{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport OpenLogin, { OPENLOGIN_NETWORK, UX_MODE, getHashQueryParams } from '@toruslabs/openlogin';\nimport { getChainConfig, BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, CHAIN_NAMESPACES, WalletInitializationError, ADAPTER_EVENTS, WalletLoginError } from '@web3auth/base';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport log from 'loglevel';\n\nvar getOpenloginDefaultOptions = function getOpenloginDefaultOptions(chainNamespace, chainId) {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : undefined,\n    loginSettings: {\n      relogin: true\n    }\n  };\n};\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar OpenloginAdapter = /*#__PURE__*/function (_BaseAdapter) {\n  _inherits(OpenloginAdapter, _BaseAdapter);\n\n  var _super = _createSuper(OpenloginAdapter);\n\n  function OpenloginAdapter(params) {\n    var _this;\n\n    _classCallCheck(this, OpenloginAdapter);\n\n    var _params$chainConfig, _params$chainConfig2, _params$chainConfig3;\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"name\", WALLET_ADAPTERS.OPENLOGIN);\n\n    _defineProperty(_assertThisInitialized(_this), \"adapterNamespace\", ADAPTER_NAMESPACES.MULTICHAIN);\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", ADAPTER_CATEGORY.IN_APP);\n\n    _defineProperty(_assertThisInitialized(_this), \"openloginInstance\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(_assertThisInitialized(_this), \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(_assertThisInitialized(_this), \"openloginOptions\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"loginSettings\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"privKeyProvider\", null);\n\n    log.debug(\"const openlogin adapter\", params);\n    var defaultOptions = getOpenloginDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);\n    _this.openloginOptions = _objectSpread(_objectSpread({\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET\n    }, defaultOptions.adapterSettings), params.adapterSettings || {});\n    _this.loginSettings = _objectSpread(_objectSpread({}, defaultOptions.loginSettings), params.loginSettings); // if no chainNamespace is passed then chain config should be set before calling init\n\n    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {\n      var _params$chainConfig4;\n\n      _this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;\n      var defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      _this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);\n      log.debug(\"const openlogin chainConfig\", _this.chainConfig);\n\n      if (!_this.chainConfig.rpcTarget) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n\n    return _this;\n  }\n\n  _createClass(OpenloginAdapter, [{\n    key: \"chainConfigProxy\",\n    get: function get() {\n      return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n    }\n  }, {\n    key: \"provider\",\n    get: function get() {\n      var _this$privKeyProvider;\n\n      return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;\n    },\n    set: function set(_) {\n      throw new Error(\"Not implemented\");\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        var _this$openloginOption, redirectResult, isRedirectResult;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _get(_getPrototypeOf(OpenloginAdapter.prototype), \"checkInitializationRequirements\", this).call(this);\n\n                if ((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.clientId) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n\n              case 3:\n                if (this.chainConfig) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n\n              case 5:\n                this.openloginInstance = new OpenLogin(this.openloginOptions);\n                redirectResult = getHashQueryParams();\n                isRedirectResult = true;\n\n                if (Object.keys(redirectResult).length > 0 && redirectResult.result) {\n                  isRedirectResult = true;\n                }\n\n                _context.next = 11;\n                return this.openloginInstance.init();\n\n              case 11:\n                this.status = ADAPTER_STATUS.READY;\n                this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n                _context.prev = 13;\n\n                if (!(this.openloginInstance.privKey && (options.autoConnect || isRedirectResult))) {\n                  _context.next = 17;\n                  break;\n                }\n\n                _context.next = 17;\n                return this.connect();\n\n              case 17:\n                _context.next = 23;\n                break;\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](13);\n                log.error(\"Failed to connect with cached openlogin provider\", _context.t0);\n                this.emit(\"ERRORED\", _context.t0);\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[13, 19]]);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _get(_getPrototypeOf(OpenloginAdapter.prototype), \"checkConnectionRequirements\", this).call(this);\n\n                this.status = ADAPTER_STATUS.CONNECTING;\n                this.emit(ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {\n                  adapter: WALLET_ADAPTERS.OPENLOGIN\n                }));\n                _context2.prev = 3;\n                _context2.next = 6;\n                return this.connectWithProvider(params);\n\n              case 6:\n                return _context2.abrupt(\"return\", this.provider);\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n                log.error(\"Failed to connect with openlogin provider\", _context2.t0); // ready again to be connected\n\n                this.status = ADAPTER_STATUS.READY;\n                this.emit(ADAPTER_EVENTS.ERRORED, _context2.t0);\n\n                if (!(_context2.t0 !== null && _context2.t0 !== void 0 && _context2.t0.message.includes(\"user closed popup\"))) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                throw WalletLoginError.popupClosed();\n\n              case 16:\n                throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 9]]);\n      }));\n\n      function connect(_x2) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var options,\n            _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {\n                  cleanup: false\n                };\n\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n              case 3:\n                if (this.openloginInstance) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n              case 5:\n                _context3.next = 7;\n                return this.openloginInstance.logout();\n\n              case 7:\n                if (options.cleanup) {\n                  this.status = ADAPTER_STATUS.NOT_READY;\n                  this.openloginInstance = null;\n                  this.privKeyProvider = null;\n                } else {\n                  // ready to be connected again\n                  this.status = ADAPTER_STATUS.READY;\n                }\n\n                this.emit(ADAPTER_EVENTS.DISCONNECTED);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function disconnect() {\n        return _disconnect.apply(this, arguments);\n      }\n\n      return disconnect;\n    }()\n  }, {\n    key: \"getUserInfo\",\n    value: function () {\n      var _getUserInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var userInfo;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n              case 2:\n                if (this.openloginInstance) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n              case 4:\n                _context4.next = 6;\n                return this.openloginInstance.getUserInfo();\n\n              case 6:\n                userInfo = _context4.sent;\n                return _context4.abrupt(\"return\", userInfo);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getUserInfo() {\n        return _getUserInfo.apply(this, arguments);\n      }\n\n      return getUserInfo;\n    }() // should be called only before initialization.\n\n  }, {\n    key: \"setAdapterSettings\",\n    value: function setAdapterSettings(adapterSettings) {\n      if (this.status === ADAPTER_STATUS.READY) return;\n      var defaultOptions = getOpenloginDefaultOptions();\n      this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions || {}), adapterSettings);\n    } // should be called only before initialization.\n\n  }, {\n    key: \"setChainConfig\",\n    value: function setChainConfig(customChainConfig) {\n      _get(_getPrototypeOf(OpenloginAdapter.prototype), \"setChainConfig\", this).call(this, customChainConfig);\n\n      this.currentChainNamespace = customChainConfig.chainNamespace;\n    }\n  }, {\n    key: \"connectWithProvider\",\n    value: function () {\n      var _connectWithProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(params) {\n        var _yield$import, SolanaPrivateKeyProvider, _yield$import2, EthereumPrivateKeyProvider, finalPrivKey, _yield$import3, getED25519Key;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.chainConfig) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n\n              case 2:\n                if (this.openloginInstance) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n              case 4:\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA)) {\n                  _context5.next = 12;\n                  break;\n                }\n\n                _context5.next = 7;\n                return import('@web3auth/solana-provider');\n\n              case 7:\n                _yield$import = _context5.sent;\n                SolanaPrivateKeyProvider = _yield$import.SolanaPrivateKeyProvider;\n                this.privKeyProvider = new SolanaPrivateKeyProvider({\n                  config: {\n                    chainConfig: this.chainConfig\n                  }\n                });\n                _context5.next = 21;\n                break;\n\n              case 12:\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.EIP155)) {\n                  _context5.next = 20;\n                  break;\n                }\n\n                _context5.next = 15;\n                return import('@web3auth/ethereum-provider');\n\n              case 15:\n                _yield$import2 = _context5.sent;\n                EthereumPrivateKeyProvider = _yield$import2.EthereumPrivateKeyProvider;\n                this.privKeyProvider = new EthereumPrivateKeyProvider({\n                  config: {\n                    chainConfig: this.chainConfig\n                  }\n                });\n                _context5.next = 21;\n                break;\n\n              case 20:\n                throw new Error(\"Invalid chainNamespace: \".concat(this.currentChainNamespace, \" found while connecting to wallet\"));\n\n              case 21:\n                if (!(!this.openloginInstance.privKey && params)) {\n                  _context5.next = 24;\n                  break;\n                }\n\n                _context5.next = 24;\n                return this.openloginInstance.login(merge(this.loginSettings, {\n                  loginProvider: params.loginProvider\n                }, {\n                  extraLoginOptions: {\n                    login_hint: params === null || params === void 0 ? void 0 : params.login_hint\n                  }\n                }));\n\n              case 24:\n                finalPrivKey = this.openloginInstance.privKey;\n\n                if (!finalPrivKey) {\n                  _context5.next = 36;\n                  break;\n                }\n\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA)) {\n                  _context5.next = 32;\n                  break;\n                }\n\n                _context5.next = 29;\n                return import('@toruslabs/openlogin-ed25519');\n\n              case 29:\n                _yield$import3 = _context5.sent;\n                getED25519Key = _yield$import3.getED25519Key;\n                finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n\n              case 32:\n                _context5.next = 34;\n                return this.privKeyProvider.setupProvider(finalPrivKey);\n\n              case 34:\n                this.status = ADAPTER_STATUS.CONNECTED;\n                this.emit(ADAPTER_EVENTS.CONNECTED, {\n                  adapter: WALLET_ADAPTERS.OPENLOGIN,\n                  reconnected: !params\n                });\n\n              case 36:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function connectWithProvider(_x3) {\n        return _connectWithProvider.apply(this, arguments);\n      }\n\n      return connectWithProvider;\n    }()\n  }]);\n\n  return OpenloginAdapter;\n}(BaseAdapter);\n\nexport { OpenloginAdapter, getOpenloginDefaultOptions };","map":{"version":3,"sources":["../src/config.ts","../src/openloginAdapter.ts"],"names":["getOpenloginDefaultOptions","adapterSettings","network","OPENLOGIN_NETWORK","clientId","uxMode","UX_MODE","POPUP","chainConfig","chainNamespace","getChainConfig","loginSettings","relogin","OpenloginAdapter","BaseAdapter","WALLET_ADAPTERS","OPENLOGIN","ADAPTER_NAMESPACES","MULTICHAIN","ADAPTER_CATEGORY","IN_APP","ADAPTER_STATUS","NOT_READY","CHAIN_NAMESPACES","EIP155","constructor","params","log","defaultOptions","MAINNET","defaultChainIdConfig","WalletInitializationError","chainConfigProxy","provider","init","redirectResult","getHashQueryParams","isRedirectResult","Object","ADAPTER_EVENTS","options","connect","adapter","error","WalletLoginError","disconnect","cleanup","getUserInfo","userInfo","setAdapterSettings","setChainConfig","customChainConfig","connectWithProvider","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","merge","loginProvider","extraLoginOptions","login_hint","finalPrivKey","getED25519Key","reconnected"],"mappings":"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","sourcesContent":["import OpenLogin, { OPENLOGIN_NETWORK, UX_MODE, getHashQueryParams } from '@toruslabs/openlogin';\nimport { getChainConfig, BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, CHAIN_NAMESPACES, WalletInitializationError, ADAPTER_EVENTS, WalletLoginError } from '@web3auth/base';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport log from 'loglevel';\n\nconst getOpenloginDefaultOptions = (chainNamespace, chainId) => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : undefined,\n    loginSettings: {\n      relogin: true\n    }\n  };\n};\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass OpenloginAdapter extends BaseAdapter {\n  constructor(params) {\n    var _params$chainConfig, _params$chainConfig2, _params$chainConfig3;\n\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.OPENLOGIN);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.MULTICHAIN);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.IN_APP);\n\n    _defineProperty(this, \"openloginInstance\", null);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"openloginOptions\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"privKeyProvider\", null);\n\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);\n    this.openloginOptions = _objectSpread(_objectSpread({\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET\n    }, defaultOptions.adapterSettings), params.adapterSettings || {});\n    this.loginSettings = _objectSpread(_objectSpread({}, defaultOptions.loginSettings), params.loginSettings); // if no chainNamespace is passed then chain config should be set before calling init\n\n    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {\n      var _params$chainConfig4;\n\n      this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n\n      if (!this.chainConfig.rpcTarget) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy() {\n    return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n  }\n\n  get provider() {\n    var _this$privKeyProvider;\n\n    return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    var _this$openloginOption;\n\n    super.checkInitializationRequirements();\n    if (!((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.clientId)) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    const redirectResult = getHashQueryParams();\n    let isRedirectResult = true;\n\n    if (Object.keys(redirectResult).length > 0 && redirectResult.result) {\n      isRedirectResult = true;\n    }\n\n    await this.openloginInstance.init();\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params) {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {\n      adapter: WALLET_ADAPTERS.OPENLOGIN\n    }));\n\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error) {\n      log.error(\"Failed to connect with openlogin provider\", error); // ready again to be connected\n\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n\n      if (error !== null && error !== void 0 && error.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  } // should be called only before initialization.\n\n\n  setAdapterSettings(adapterSettings) {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions || {}), adapterSettings);\n  } // should be called only before initialization.\n\n\n  setChainConfig(customChainConfig) {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  async connectWithProvider(params) {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const {\n        SolanaPrivateKeyProvider\n      } = await import('@web3auth/solana-provider');\n      this.privKeyProvider = new SolanaPrivateKeyProvider({\n        config: {\n          chainConfig: this.chainConfig\n        }\n      });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const {\n        EthereumPrivateKeyProvider\n      } = await import('@web3auth/ethereum-provider');\n      this.privKeyProvider = new EthereumPrivateKeyProvider({\n        config: {\n          chainConfig: this.chainConfig\n        }\n      });\n    } else {\n      throw new Error(\"Invalid chainNamespace: \".concat(this.currentChainNamespace, \" found while connecting to wallet\"));\n    } // if not logged in then login\n\n\n    if (!this.openloginInstance.privKey && params) {\n      await this.openloginInstance.login(merge(this.loginSettings, {\n        loginProvider: params.loginProvider\n      }, {\n        extraLoginOptions: {\n          login_hint: params === null || params === void 0 ? void 0 : params.login_hint\n        }\n      }));\n    }\n\n    let finalPrivKey = this.openloginInstance.privKey;\n\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const {\n          getED25519Key\n        } = await import('@toruslabs/openlogin-ed25519');\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.OPENLOGIN,\n        reconnected: !params\n      });\n    }\n  }\n\n}\n\nexport { OpenloginAdapter, getOpenloginDefaultOptions };\n//# sourceMappingURL=openloginAdapter.esm.js.map\n"]},"metadata":{},"sourceType":"module"}