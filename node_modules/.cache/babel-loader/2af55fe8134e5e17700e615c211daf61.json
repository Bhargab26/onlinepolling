{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nvar defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport var InfuraWebSocketProvider = /*#__PURE__*/function (_WebSocketProvider) {\n  _inherits(InfuraWebSocketProvider, _WebSocketProvider);\n\n  var _super = _createSuper(InfuraWebSocketProvider);\n\n  function InfuraWebSocketProvider(network, apiKey) {\n    var _this;\n\n    _classCallCheck(this, InfuraWebSocketProvider);\n\n    var provider = new InfuraProvider(network, apiKey);\n    var connection = provider.connection;\n\n    if (connection.password) {\n      logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"InfuraProvider.getWebSocketProvider()\"\n      });\n    }\n\n    var url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n    _this = _super.call(this, url, network);\n    defineReadOnly(_assertThisInitialized(_this), \"apiKey\", provider.projectId);\n    defineReadOnly(_assertThisInitialized(_this), \"projectId\", provider.projectId);\n    defineReadOnly(_assertThisInitialized(_this), \"projectSecret\", provider.projectSecret);\n    return _this;\n  }\n\n  _createClass(InfuraWebSocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.projectId === defaultProjectId;\n    }\n  }]);\n\n  return InfuraWebSocketProvider;\n}(WebSocketProvider);\nexport var InfuraProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(InfuraProvider, _UrlJsonRpcProvider);\n\n  var _super2 = _createSuper(InfuraProvider);\n\n  function InfuraProvider() {\n    _classCallCheck(this, InfuraProvider);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(InfuraProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.projectId === defaultProjectId;\n    }\n  }], [{\n    key: \"getWebSocketProvider\",\n    value: function getWebSocketProvider(network, apiKey) {\n      return new InfuraWebSocketProvider(network, apiKey);\n    }\n  }, {\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      var apiKeyObj = {\n        apiKey: defaultProjectId,\n        projectId: defaultProjectId,\n        projectSecret: null\n      };\n\n      if (apiKey == null) {\n        return apiKeyObj;\n      }\n\n      if (typeof apiKey === \"string\") {\n        apiKeyObj.projectId = apiKey;\n      } else if (apiKey.projectSecret != null) {\n        logger.assertArgument(typeof apiKey.projectId === \"string\", \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n        logger.assertArgument(typeof apiKey.projectSecret === \"string\", \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n        apiKeyObj.projectId = apiKey.projectId;\n        apiKeyObj.projectSecret = apiKey.projectSecret;\n      } else if (apiKey.projectId) {\n        apiKeyObj.projectId = apiKey.projectId;\n      }\n\n      apiKeyObj.apiKey = apiKeyObj.projectId;\n      return apiKeyObj;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n\n      switch (network ? network.name : \"unknown\") {\n        case \"homestead\":\n          host = \"mainnet.infura.io\";\n          break;\n\n        case \"ropsten\":\n          host = \"ropsten.infura.io\";\n          break;\n\n        case \"rinkeby\":\n          host = \"rinkeby.infura.io\";\n          break;\n\n        case \"kovan\":\n          host = \"kovan.infura.io\";\n          break;\n\n        case \"goerli\":\n          host = \"goerli.infura.io\";\n          break;\n\n        case \"matic\":\n          host = \"polygon-mainnet.infura.io\";\n          break;\n\n        case \"maticmum\":\n          host = \"polygon-mumbai.infura.io\";\n          break;\n\n        case \"optimism\":\n          host = \"optimism-mainnet.infura.io\";\n          break;\n\n        case \"optimism-kovan\":\n          host = \"optimism-kovan.infura.io\";\n          break;\n\n        case \"arbitrum\":\n          host = \"arbitrum-mainnet.infura.io\";\n          break;\n\n        case \"arbitrum-rinkeby\":\n          host = \"arbitrum-rinkeby.infura.io\";\n          break;\n\n        default:\n          logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"network\",\n            value: network\n          });\n      }\n\n      var connection = {\n        allowGzip: true,\n        url: \"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId,\n        throttleCallback: function throttleCallback(attempt, url) {\n          if (apiKey.projectId === defaultProjectId) {\n            showThrottleMessage();\n          }\n\n          return Promise.resolve(true);\n        }\n      };\n\n      if (apiKey.projectSecret != null) {\n        connection.user = \"\";\n        connection.password = apiKey.projectSecret;\n      }\n\n      return connection;\n    }\n  }]);\n\n  return InfuraProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"sources":["../src.ts/infura-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport class InfuraWebSocketProvider extends WebSocketProvider {\n    constructor(network, apiKey) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n}\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    static getWebSocketProvider(network, apiKey) {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        const apiKeyObj = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n        if (apiKey == null) {\n            return apiKeyObj;\n        }\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n        }\n        else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof (apiKey.projectId) === \"string\"), \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof (apiKey.projectSecret) === \"string\"), \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n        }\n        else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"ropsten\":\n                host = \"ropsten.infura.io\";\n                break;\n            case \"rinkeby\":\n                host = \"rinkeby.infura.io\";\n                break;\n            case \"kovan\":\n                host = \"kovan.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-kovan\":\n                host = \"optimism-kovan.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arbitrum-rinkeby.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        const connection = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt, url) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n}\n//# sourceMappingURL=infura-provider.js.map"]},"metadata":{},"sourceType":"module"}