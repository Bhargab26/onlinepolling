{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _wrapNativeSuper = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EthereumProviderError = exports.EthereumRpcError = void 0;\n\nvar fast_safe_stringify_1 = require(\"fast-safe-stringify\");\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n * Permits any integer error code.\n */\n\n\nvar EthereumRpcError = /*#__PURE__*/function (_Error) {\n  _inherits(EthereumRpcError, _Error);\n\n  var _super = _createSuper(EthereumRpcError);\n\n  function EthereumRpcError(code, message, data) {\n    var _this;\n\n    _classCallCheck(this, EthereumRpcError);\n\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n\n    _this = _super.call(this, message);\n    _this.code = code;\n\n    if (data !== undefined) {\n      _this.data = data;\n    }\n\n    return _this;\n  }\n  /**\n   * Returns a plain object with all public class properties.\n   */\n\n\n  _createClass(EthereumRpcError, [{\n    key: \"serialize\",\n    value: function serialize() {\n      var serialized = {\n        code: this.code,\n        message: this.message\n      };\n\n      if (this.data !== undefined) {\n        serialized.data = this.data;\n      }\n\n      if (this.stack) {\n        serialized.stack = this.stack;\n      }\n\n      return serialized;\n    }\n    /**\n     * Return a string representation of the serialized error, omitting\n     * any circular references.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return fast_safe_stringify_1.default(this.serialize(), stringifyReplacer, 2);\n    }\n  }]);\n\n  return EthereumRpcError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexports.EthereumRpcError = EthereumRpcError;\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\n\nvar EthereumProviderError = /*#__PURE__*/function (_EthereumRpcError) {\n  _inherits(EthereumProviderError, _EthereumRpcError);\n\n  var _super2 = _createSuper(EthereumProviderError);\n\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the 1000 <= 4999 range.\n   */\n  function EthereumProviderError(code, message, data) {\n    _classCallCheck(this, EthereumProviderError);\n\n    if (!isValidEthProviderCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n\n    return _super2.call(this, code, message, data);\n  }\n\n  return _createClass(EthereumProviderError);\n}(EthereumRpcError);\n\nexports.EthereumProviderError = EthereumProviderError; // Internal\n\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\n\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return undefined;\n  }\n\n  return value;\n}","map":{"version":3,"sources":["../src/classes.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,IAAA,qBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;AASA;;;;AAIG;;;IACU,gB;;;;;EAMX,0BAAY,IAAZ,EAA0B,OAA1B,EAA2C,IAA3C,EAAmD;IAAA;;IAAA;;IAEjD,IAAI,CAAC,MAAM,CAAC,SAAP,CAAiB,IAAjB,CAAL,EAA6B;MAC3B,MAAM,IAAI,KAAJ,CACJ,4BADI,CAAN;IAGD;;IACD,IAAI,CAAC,OAAD,IAAY,OAAO,OAAP,KAAmB,QAAnC,EAA6C;MAC3C,MAAM,IAAI,KAAJ,CACJ,sCADI,CAAN;IAGD;;IAED,0BAAM,OAAN;IACA,MAAK,IAAL,GAAY,IAAZ;;IACA,IAAI,IAAI,KAAK,SAAb,EAAwB;MACtB,MAAK,IAAL,GAAY,IAAZ;IACD;;IAjBgD;EAkBlD;EAED;;AAEG;;;;;WACH,qBAAS;MACP,IAAM,UAAU,GAA+B;QAC7C,IAAI,EAAE,KAAK,IADkC;QAE7C,OAAO,EAAE,KAAK;MAF+B,CAA/C;;MAIA,IAAI,KAAK,IAAL,KAAc,SAAlB,EAA6B;QAC3B,UAAU,CAAC,IAAX,GAAkB,KAAK,IAAvB;MACD;;MACD,IAAI,KAAK,KAAT,EAAgB;QACd,UAAU,CAAC,KAAX,GAAmB,KAAK,KAAxB;MACD;;MACD,OAAO,UAAP;IACD;IAED;;;AAGG;;;;WACH,oBAAQ;MACN,OAAO,qBAAA,CAAA,OAAA,CACL,KAAK,SAAL,EADK,EAEL,iBAFK,EAGL,CAHK,CAAP;IAKD;;;;iCArDsC,K;;AAAzC,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAwDA;;;AAGG;;IACU,qB;;;;;EAEX;;;AAGG;EACH,+BAAY,IAAZ,EAA0B,OAA1B,EAA2C,IAA3C,EAAmD;IAAA;;IAEjD,IAAI,CAAC,sBAAsB,CAAC,IAAD,CAA3B,EAAmC;MACjC,MAAM,IAAI,KAAJ,CACJ,2DADI,CAAN;IAGD;;IANgD,0BAQ3C,IAR2C,EAQrC,OARqC,EAQ5B,IAR4B;EASlD;;;EAf2C,gB;;AAA9C,OAAA,CAAA,qBAAA,GAAA,qBAAA,C,CAkBA;;AAEA,SAAS,sBAAT,CAAgC,IAAhC,EAA4C;EAC1C,OAAO,MAAM,CAAC,SAAP,CAAiB,IAAjB,KAA0B,IAAI,IAAI,IAAlC,IAA0C,IAAI,IAAI,IAAzD;AACD;;AAED,SAAS,iBAAT,CAA2B,CAA3B,EAAuC,KAAvC,EAAqD;EACnD,IAAI,KAAK,KAAK,YAAd,EAA4B;IAC1B,OAAO,SAAP;EACD;;EACD,OAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EthereumProviderError = exports.EthereumRpcError = void 0;\nconst fast_safe_stringify_1 = require(\"fast-safe-stringify\");\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n * Permits any integer error code.\n */\nclass EthereumRpcError extends Error {\n    constructor(code, message, data) {\n        if (!Number.isInteger(code)) {\n            throw new Error('\"code\" must be an integer.');\n        }\n        if (!message || typeof message !== 'string') {\n            throw new Error('\"message\" must be a nonempty string.');\n        }\n        super(message);\n        this.code = code;\n        if (data !== undefined) {\n            this.data = data;\n        }\n    }\n    /**\n     * Returns a plain object with all public class properties.\n     */\n    serialize() {\n        const serialized = {\n            code: this.code,\n            message: this.message,\n        };\n        if (this.data !== undefined) {\n            serialized.data = this.data;\n        }\n        if (this.stack) {\n            serialized.stack = this.stack;\n        }\n        return serialized;\n    }\n    /**\n     * Return a string representation of the serialized error, omitting\n     * any circular references.\n     */\n    toString() {\n        return fast_safe_stringify_1.default(this.serialize(), stringifyReplacer, 2);\n    }\n}\nexports.EthereumRpcError = EthereumRpcError;\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nclass EthereumProviderError extends EthereumRpcError {\n    /**\n     * Create an Ethereum Provider JSON-RPC error.\n     * `code` must be an integer in the 1000 <= 4999 range.\n     */\n    constructor(code, message, data) {\n        if (!isValidEthProviderCode(code)) {\n            throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n        }\n        super(code, message, data);\n    }\n}\nexports.EthereumProviderError = EthereumProviderError;\n// Internal\nfunction isValidEthProviderCode(code) {\n    return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\nfunction stringifyReplacer(_, value) {\n    if (value === '[Circular]') {\n        return undefined;\n    }\n    return value;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3Nlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGFzc2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZEQUFnRDtBQVNoRDs7OztHQUlHO0FBQ0gsTUFBYSxnQkFBb0IsU0FBUSxLQUFLO0lBTTVDLFlBQVksSUFBWSxFQUFFLE9BQWUsRUFBRSxJQUFRO1FBRWpELElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNCLE1BQU0sSUFBSSxLQUFLLENBQ2IsNEJBQTRCLENBQzdCLENBQUM7U0FDSDtRQUNELElBQUksQ0FBQyxPQUFPLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO1lBQzNDLE1BQU0sSUFBSSxLQUFLLENBQ2Isc0NBQXNDLENBQ3ZDLENBQUM7U0FDSDtRQUVELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztTQUNsQjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILFNBQVM7UUFDUCxNQUFNLFVBQVUsR0FBK0I7WUFDN0MsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1NBQ3RCLENBQUM7UUFDRixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQzNCLFVBQVUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztTQUM3QjtRQUNELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLFVBQVUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUMvQjtRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxRQUFRO1FBQ04sT0FBTyw2QkFBYSxDQUNsQixJQUFJLENBQUMsU0FBUyxFQUFFLEVBQ2hCLGlCQUFpQixFQUNqQixDQUFDLENBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXRERCw0Q0FzREM7QUFFRDs7O0dBR0c7QUFDSCxNQUFhLHFCQUF5QixTQUFRLGdCQUFtQjtJQUUvRDs7O09BR0c7SUFDSCxZQUFZLElBQVksRUFBRSxPQUFlLEVBQUUsSUFBUTtRQUVqRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakMsTUFBTSxJQUFJLEtBQUssQ0FDYiwyREFBMkQsQ0FDNUQsQ0FBQztTQUNIO1FBRUQsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQztDQUNGO0FBaEJELHNEQWdCQztBQUVELFdBQVc7QUFFWCxTQUFTLHNCQUFzQixDQUFDLElBQVk7SUFDMUMsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQztBQUNoRSxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxDQUFVLEVBQUUsS0FBYztJQUNuRCxJQUFJLEtBQUssS0FBSyxZQUFZLEVBQUU7UUFDMUIsT0FBTyxTQUFTLENBQUM7S0FDbEI7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMifQ=="]},"metadata":{},"sourceType":"script"}