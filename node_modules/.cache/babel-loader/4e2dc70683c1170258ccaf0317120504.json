{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalize = exports.recoverPublicKey = exports.concatSig = exports.legacyToBuffer = exports.isNullish = exports.padWithZeroes = void 0;\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar ethjs_util_1 = require(\"ethjs-util\");\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\n\n\nfunction padWithZeroes(hexString, targetLength) {\n  if (hexString !== '' && !/^[0-9a-f]+$/i.test(hexString)) {\n    throw new Error(\"Expected an unprefixed hex string. Received: \".concat(hexString));\n  }\n\n  if (targetLength < 0) {\n    throw new Error(\"Expected a non-negative integer target length. Received: \".concat(targetLength));\n  }\n\n  return String.prototype.padStart.call(hexString, targetLength, '0');\n}\n\nexports.padWithZeroes = padWithZeroes;\n/**\n * Returns `true` if the given value is nullish.\n *\n * @param value - The value being checked.\n * @returns Whether the value is nullish.\n */\n\nfunction isNullish(value) {\n  return value === null || value === undefined;\n}\n\nexports.isNullish = isNullish;\n/**\n * Convert a value to a Buffer. This function should be equivalent to the `toBuffer` function in\n * `ethereumjs-util@5.2.1`.\n *\n * @param value - The value to convert to a Buffer.\n * @returns The given value as a Buffer.\n */\n\nfunction legacyToBuffer(value) {\n  return typeof value === 'string' && !ethjs_util_1.isHexString(value) ? Buffer.from(value) : ethereumjs_util_1.toBuffer(value);\n}\n\nexports.legacyToBuffer = legacyToBuffer;\n/**\n * Concatenate an extended ECDSA signature into a single '0x'-prefixed hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature as a '0x'-prefixed string.\n */\n\nfunction concatSig(v, r, s) {\n  var rSig = ethereumjs_util_1.fromSigned(r);\n  var sSig = ethereumjs_util_1.fromSigned(s);\n  var vSig = ethereumjs_util_1.bufferToInt(v);\n  var rStr = padWithZeroes(ethereumjs_util_1.toUnsigned(rSig).toString('hex'), 64);\n  var sStr = padWithZeroes(ethereumjs_util_1.toUnsigned(sSig).toString('hex'), 64);\n  var vStr = ethjs_util_1.stripHexPrefix(ethjs_util_1.intToHex(vSig));\n  return ethereumjs_util_1.addHexPrefix(rStr.concat(sStr, vStr));\n}\n\nexports.concatSig = concatSig;\n/**\n * Recover the public key from the given signature and message hash.\n *\n * @param messageHash - The hash of the signed message.\n * @param signature - The signature.\n * @returns The public key of the signer.\n */\n\nfunction recoverPublicKey(messageHash, signature) {\n  var sigParams = ethereumjs_util_1.fromRpcSig(signature);\n  return ethereumjs_util_1.ecrecover(messageHash, sigParams.v, sigParams.r, sigParams.s);\n}\n\nexports.recoverPublicKey = recoverPublicKey;\n/**\n * Normalize the input to a lower-cased '0x'-prefixed hex string.\n *\n * @param input - The value to normalize.\n * @returns The normalized value.\n */\n\nfunction normalize(input) {\n  if (!input) {\n    return undefined;\n  }\n\n  if (typeof input === 'number') {\n    var buffer = ethereumjs_util_1.toBuffer(input);\n    input = ethereumjs_util_1.bufferToHex(buffer);\n  }\n\n  if (typeof input !== 'string') {\n    var msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n    msg += \" received \".concat(typeof input, \": \").concat(input);\n    throw new Error(msg);\n  }\n\n  return ethereumjs_util_1.addHexPrefix(input.toLowerCase());\n}\n\nexports.normalize = normalize;","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  addHexPrefix,\n  bufferToHex,\n  bufferToInt,\n  ecrecover,\n  fromRpcSig,\n  fromSigned,\n  toBuffer,\n  toUnsigned,\n} from 'ethereumjs-util';\nimport { intToHex, isHexString, stripHexPrefix } from 'ethjs-util';\n\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\nexport function padWithZeroes(hexString: string, targetLength: number): string {\n  if (hexString !== '' && !/^[a-f0-9]+$/iu.test(hexString)) {\n    throw new Error(\n      `Expected an unprefixed hex string. Received: ${hexString}`,\n    );\n  }\n\n  if (targetLength < 0) {\n    throw new Error(\n      `Expected a non-negative integer target length. Received: ${targetLength}`,\n    );\n  }\n\n  return String.prototype.padStart.call(hexString, targetLength, '0');\n}\n\n/**\n * Returns `true` if the given value is nullish.\n *\n * @param value - The value being checked.\n * @returns Whether the value is nullish.\n */\nexport function isNullish(value) {\n  return value === null || value === undefined;\n}\n\n/**\n * Convert a value to a Buffer. This function should be equivalent to the `toBuffer` function in\n * `ethereumjs-util@5.2.1`.\n *\n * @param value - The value to convert to a Buffer.\n * @returns The given value as a Buffer.\n */\nexport function legacyToBuffer(value: unknown) {\n  return typeof value === 'string' && !isHexString(value)\n    ? Buffer.from(value)\n    : toBuffer(value);\n}\n\n/**\n * Concatenate an extended ECDSA signature into a single '0x'-prefixed hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature as a '0x'-prefixed string.\n */\nexport function concatSig(v: Buffer, r: Buffer, s: Buffer): string {\n  const rSig = fromSigned(r);\n  const sSig = fromSigned(s);\n  const vSig = bufferToInt(v);\n  const rStr = padWithZeroes(toUnsigned(rSig).toString('hex'), 64);\n  const sStr = padWithZeroes(toUnsigned(sSig).toString('hex'), 64);\n  const vStr = stripHexPrefix(intToHex(vSig));\n  return addHexPrefix(rStr.concat(sStr, vStr));\n}\n\n/**\n * Recover the public key from the given signature and message hash.\n *\n * @param messageHash - The hash of the signed message.\n * @param signature - The signature.\n * @returns The public key of the signer.\n */\nexport function recoverPublicKey(\n  messageHash: Buffer,\n  signature: string,\n): Buffer {\n  const sigParams = fromRpcSig(signature);\n  return ecrecover(messageHash, sigParams.v, sigParams.r, sigParams.s);\n}\n\n/**\n * Normalize the input to a lower-cased '0x'-prefixed hex string.\n *\n * @param input - The value to normalize.\n * @returns The normalized value.\n */\nexport function normalize(input: number | string): string {\n  if (!input) {\n    return undefined;\n  }\n\n  if (typeof input === 'number') {\n    const buffer = toBuffer(input);\n    input = bufferToHex(buffer);\n  }\n\n  if (typeof input !== 'string') {\n    let msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n    msg += ` received ${typeof input}: ${input}`;\n    throw new Error(msg);\n  }\n\n  return addHexPrefix(input.toLowerCase());\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}