{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\n/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n */\nmodule.exports = function createAsyncMiddleware(asyncMiddleware) {\n  return function (req, res, next, end) {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    var resolveNextPromise;\n    var nextPromise = new Promise(function (resolve) {\n      resolveNextPromise = resolve;\n    });\n    var returnHandlerCallback, nextWasCalled;\n\n    var asyncNext = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nextWasCalled = true;\n                next(function (callback) {\n                  // eslint-disable-line callback-return\n                  returnHandlerCallback = callback;\n                  resolveNextPromise();\n                });\n                _context.next = 4;\n                return nextPromise;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function asyncNext() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    asyncMiddleware(req, res, asyncNext).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!nextWasCalled) {\n                _context2.next = 6;\n                break;\n              }\n\n              _context2.next = 3;\n              return nextPromise;\n\n            case 3:\n              // we must wait until the return handler is called\n              returnHandlerCallback(null);\n              _context2.next = 7;\n              break;\n\n            case 6:\n              end(null);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))).catch(function (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    });\n  };\n};","map":{"version":3,"names":["module","exports","createAsyncMiddleware","asyncMiddleware","req","res","next","end","resolveNextPromise","nextPromise","Promise","resolve","returnHandlerCallback","nextWasCalled","asyncNext","callback","then","catch","error"],"sources":["C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/json-rpc-engine/src/createAsyncMiddleware.js"],"sourcesContent":["/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n */\n\nmodule.exports = function createAsyncMiddleware (asyncMiddleware) {\n  return (req, res, next, end) => {\n\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise\n    const nextPromise = new Promise((resolve) => {\n      resolveNextPromise = resolve\n    })\n\n    let returnHandlerCallback, nextWasCalled\n\n    const asyncNext = async () => {\n\n      nextWasCalled = true\n\n      next((callback) => { // eslint-disable-line callback-return\n        returnHandlerCallback = callback\n        resolveNextPromise()\n      })\n      await nextPromise\n    }\n\n    asyncMiddleware(req, res, asyncNext)\n      .then(async () => {\n        if (nextWasCalled) {\n          await nextPromise // we must wait until the return handler is called\n          returnHandlerCallback(null)\n        } else {\n          end(null)\n        }\n      })\n      .catch((error) => {\n        if (returnHandlerCallback) {\n          returnHandlerCallback(error)\n        } else {\n          end(error)\n        }\n      })\n  }\n}\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,qBAAT,CAAgCC,eAAhC,EAAiD;EAChE,OAAO,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiBC,GAAjB,EAAyB;IAE9B;IACA;IACA;IACA,IAAIC,kBAAJ;IACA,IAAMC,WAAW,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;MAC3CH,kBAAkB,GAAGG,OAArB;IACD,CAFmB,CAApB;IAIA,IAAIC,qBAAJ,EAA2BC,aAA3B;;IAEA,IAAMC,SAAS;MAAA,sEAAG;QAAA;UAAA;YAAA;cAAA;gBAEhBD,aAAa,GAAG,IAAhB;gBAEAP,IAAI,CAAC,UAACS,QAAD,EAAc;kBAAE;kBACnBH,qBAAqB,GAAGG,QAAxB;kBACAP,kBAAkB;gBACnB,CAHG,CAAJ;gBAJgB;gBAAA,OAQVC,WARU;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAH;;MAAA,gBAATK,SAAS;QAAA;MAAA;IAAA,GAAf;;IAWAX,eAAe,CAACC,GAAD,EAAMC,GAAN,EAAWS,SAAX,CAAf,CACGE,IADH,0EACQ;MAAA;QAAA;UAAA;YAAA;cAAA,KACAH,aADA;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAEIJ,WAFJ;;YAAA;cAEgB;cAClBG,qBAAqB,CAAC,IAAD,CAArB;cAHE;cAAA;;YAAA;cAKFL,GAAG,CAAC,IAAD,CAAH;;YALE;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CADR,IASGU,KATH,CASS,UAACC,KAAD,EAAW;MAChB,IAAIN,qBAAJ,EAA2B;QACzBA,qBAAqB,CAACM,KAAD,CAArB;MACD,CAFD,MAEO;QACLX,GAAG,CAACW,KAAD,CAAH;MACD;IACF,CAfH;EAgBD,CAvCD;AAwCD,CAzCD"},"metadata":{},"sourceType":"script"}