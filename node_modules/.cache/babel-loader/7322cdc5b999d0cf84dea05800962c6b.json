{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { getUrl } from \"./geturl\";\n\nfunction staller(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, duration);\n  });\n}\n\nfunction bodyify(value, type) {\n  if (value == null) {\n    return null;\n  }\n\n  if (typeof value === \"string\") {\n    return value;\n  }\n\n  if (isBytesLike(value)) {\n    if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n      try {\n        return toUtf8String(value);\n      } catch (error) {}\n\n      ;\n    }\n\n    return hexlify(value);\n  }\n\n  return value;\n} // This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\n\n\nexport function _fetchData(connection, body, processFunc) {\n  // How many times to retry in the event of a throttle\n  var attemptLimit = typeof connection === \"object\" && connection.throttleLimit != null ? connection.throttleLimit : 12;\n  logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n  var throttleCallback = typeof connection === \"object\" ? connection.throttleCallback : null;\n  var throttleSlotInterval = typeof connection === \"object\" && typeof connection.throttleSlotInterval === \"number\" ? connection.throttleSlotInterval : 100;\n  logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n  var errorPassThrough = typeof connection === \"object\" ? !!connection.errorPassThrough : false;\n  var headers = {};\n  var url = null; // @TODO: Allow ConnectionInfo to override some of these values\n\n  var options = {\n    method: \"GET\"\n  };\n  var allow304 = false;\n  var timeout = 2 * 60 * 1000;\n\n  if (typeof connection === \"string\") {\n    url = connection;\n  } else if (typeof connection === \"object\") {\n    if (connection == null || connection.url == null) {\n      logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n    }\n\n    url = connection.url;\n\n    if (typeof connection.timeout === \"number\" && connection.timeout > 0) {\n      timeout = connection.timeout;\n    }\n\n    if (connection.headers) {\n      for (var key in connection.headers) {\n        headers[key.toLowerCase()] = {\n          key: key,\n          value: String(connection.headers[key])\n        };\n\n        if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n          allow304 = true;\n        }\n      }\n    }\n\n    options.allowGzip = !!connection.allowGzip;\n\n    if (connection.user != null && connection.password != null) {\n      if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n        logger.throwError(\"basic authentication requires a secure https url\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"url\",\n          url: url,\n          user: connection.user,\n          password: \"[REDACTED]\"\n        });\n      }\n\n      var authorization = connection.user + \":\" + connection.password;\n      headers[\"authorization\"] = {\n        key: \"Authorization\",\n        value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n      };\n    }\n\n    if (connection.skipFetchSetup != null) {\n      options.skipFetchSetup = !!connection.skipFetchSetup;\n    }\n  }\n\n  var reData = new RegExp(\"^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$\", \"i\");\n  var dataMatch = url ? url.match(reData) : null;\n\n  if (dataMatch) {\n    try {\n      var response = {\n        statusCode: 200,\n        statusMessage: \"OK\",\n        headers: {\n          \"content-type\": dataMatch[1]\n        },\n        body: base64Decode(dataMatch[2])\n      };\n      var result = response.body;\n\n      if (processFunc) {\n        result = processFunc(response.body, response);\n      }\n\n      return Promise.resolve(result);\n    } catch (error) {\n      logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n        body: bodyify(dataMatch[1], dataMatch[2]),\n        error: error,\n        requestBody: null,\n        requestMethod: \"GET\",\n        url: url\n      });\n    }\n  }\n\n  if (body) {\n    options.method = \"POST\";\n    options.body = body;\n\n    if (headers[\"content-type\"] == null) {\n      headers[\"content-type\"] = {\n        key: \"Content-Type\",\n        value: \"application/octet-stream\"\n      };\n    }\n\n    if (headers[\"content-length\"] == null) {\n      headers[\"content-length\"] = {\n        key: \"Content-Length\",\n        value: String(body.length)\n      };\n    }\n  }\n\n  var flatHeaders = {};\n  Object.keys(headers).forEach(function (key) {\n    var header = headers[key];\n    flatHeaders[header.key] = header.value;\n  });\n  options.headers = flatHeaders;\n\n  var runningTimeout = function () {\n    var timer = null;\n    var promise = new Promise(function (resolve, reject) {\n      if (timeout) {\n        timer = setTimeout(function () {\n          if (timer == null) {\n            return;\n          }\n\n          timer = null;\n          reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            timeout: timeout,\n            url: url\n          }));\n        }, timeout);\n      }\n    });\n\n    var cancel = function cancel() {\n      if (timer == null) {\n        return;\n      }\n\n      clearTimeout(timer);\n      timer = null;\n    };\n\n    return {\n      promise: promise,\n      cancel: cancel\n    };\n  }();\n\n  var runningFetch = function () {\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var attempt, _response, location, tryAgain, stall, retryAfter, _body, _result, _tryAgain, _timeout;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              attempt = 0;\n\n            case 1:\n              if (!(attempt < attemptLimit)) {\n                _context.next = 65;\n                break;\n              }\n\n              _response = null;\n              _context.prev = 3;\n              _context.next = 6;\n              return getUrl(url, options);\n\n            case 6:\n              _response = _context.sent;\n\n              if (!(attempt < attemptLimit)) {\n                _context.next = 28;\n                break;\n              }\n\n              if (!(_response.statusCode === 301 || _response.statusCode === 302)) {\n                _context.next = 15;\n                break;\n              }\n\n              // Redirection; for now we only support absolute locataions\n              location = _response.headers.location || \"\";\n\n              if (!(options.method === \"GET\" && location.match(/^https:/))) {\n                _context.next = 13;\n                break;\n              }\n\n              url = _response.headers.location;\n              return _context.abrupt(\"continue\", 62);\n\n            case 13:\n              _context.next = 28;\n              break;\n\n            case 15:\n              if (!(_response.statusCode === 429)) {\n                _context.next = 28;\n                break;\n              }\n\n              // Exponential back-off throttling\n              tryAgain = true;\n\n              if (!throttleCallback) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.next = 20;\n              return throttleCallback(attempt, url);\n\n            case 20:\n              tryAgain = _context.sent;\n\n            case 21:\n              if (!tryAgain) {\n                _context.next = 28;\n                break;\n              }\n\n              stall = 0;\n              retryAfter = _response.headers[\"retry-after\"];\n\n              if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                stall = parseInt(retryAfter) * 1000;\n              } else {\n                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n              } //console.log(\"Stalling 429\");\n\n\n              _context.next = 27;\n              return staller(stall);\n\n            case 27:\n              return _context.abrupt(\"continue\", 62);\n\n            case 28:\n              _context.next = 34;\n              break;\n\n            case 30:\n              _context.prev = 30;\n              _context.t0 = _context[\"catch\"](3);\n              _response = _context.t0.response;\n\n              if (_response == null) {\n                runningTimeout.cancel();\n                logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                  requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                  requestMethod: options.method,\n                  serverError: _context.t0,\n                  url: url\n                });\n              }\n\n            case 34:\n              _body = _response.body;\n\n              if (allow304 && _response.statusCode === 304) {\n                _body = null;\n              } else if (!errorPassThrough && (_response.statusCode < 200 || _response.statusCode >= 300)) {\n                runningTimeout.cancel();\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                  status: _response.statusCode,\n                  headers: _response.headers,\n                  body: bodyify(_body, _response.headers ? _response.headers[\"content-type\"] : null),\n                  requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                  requestMethod: options.method,\n                  url: url\n                });\n              }\n\n              if (!processFunc) {\n                _context.next = 60;\n                break;\n              }\n\n              _context.prev = 37;\n              _context.next = 40;\n              return processFunc(_body, _response);\n\n            case 40:\n              _result = _context.sent;\n              runningTimeout.cancel();\n              return _context.abrupt(\"return\", _result);\n\n            case 45:\n              _context.prev = 45;\n              _context.t1 = _context[\"catch\"](37);\n\n              if (!(_context.t1.throttleRetry && attempt < attemptLimit)) {\n                _context.next = 58;\n                break;\n              }\n\n              _tryAgain = true;\n\n              if (!throttleCallback) {\n                _context.next = 53;\n                break;\n              }\n\n              _context.next = 52;\n              return throttleCallback(attempt, url);\n\n            case 52:\n              _tryAgain = _context.sent;\n\n            case 53:\n              if (!_tryAgain) {\n                _context.next = 58;\n                break;\n              }\n\n              _timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt))); //console.log(\"Stalling callback\");\n\n              _context.next = 57;\n              return staller(_timeout);\n\n            case 57:\n              return _context.abrupt(\"continue\", 62);\n\n            case 58:\n              runningTimeout.cancel();\n              logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(_body, _response.headers ? _response.headers[\"content-type\"] : null),\n                error: _context.t1,\n                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                requestMethod: options.method,\n                url: url\n              });\n\n            case 60:\n              runningTimeout.cancel(); // If we had a processFunc, it either returned a T or threw above.\n              // The \"body\" is now a Uint8Array.\n\n              return _context.abrupt(\"return\", _body);\n\n            case 62:\n              attempt++;\n              _context.next = 1;\n              break;\n\n            case 65:\n              return _context.abrupt(\"return\", logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                requestMethod: options.method,\n                url: url\n              }));\n\n            case 66:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 30], [37, 45]]);\n    }));\n  }();\n\n  return Promise.race([runningTimeout.promise, runningFetch]);\n}\nexport function fetchJson(connection, json, processFunc) {\n  var processJsonFunc = function processJsonFunc(value, response) {\n    var result = null;\n\n    if (value != null) {\n      try {\n        result = JSON.parse(toUtf8String(value));\n      } catch (error) {\n        logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n          body: value,\n          error: error\n        });\n      }\n    }\n\n    if (processFunc) {\n      result = processFunc(result, response);\n    }\n\n    return result;\n  }; // If we have json to send, we must\n  // - add content-type of application/json (unless already overridden)\n  // - convert the json to bytes\n\n\n  var body = null;\n\n  if (json != null) {\n    body = toUtf8Bytes(json); // Create a connection with the content-type set for JSON\n\n    var updated = typeof connection === \"string\" ? {\n      url: connection\n    } : shallowCopy(connection);\n\n    if (updated.headers) {\n      var hasContentType = Object.keys(updated.headers).filter(function (k) {\n        return k.toLowerCase() === \"content-type\";\n      }).length !== 0;\n\n      if (!hasContentType) {\n        updated.headers = shallowCopy(updated.headers);\n        updated.headers[\"content-type\"] = \"application/json\";\n      }\n    } else {\n      updated.headers = {\n        \"content-type\": \"application/json\"\n      };\n    }\n\n    connection = updated;\n  }\n\n  return _fetchData(connection, body, processJsonFunc);\n}\nexport function poll(func, options) {\n  if (!options) {\n    options = {};\n  }\n\n  options = shallowCopy(options);\n\n  if (options.floor == null) {\n    options.floor = 0;\n  }\n\n  if (options.ceiling == null) {\n    options.ceiling = 10000;\n  }\n\n  if (options.interval == null) {\n    options.interval = 250;\n  }\n\n  return new Promise(function (resolve, reject) {\n    var timer = null;\n    var done = false; // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n\n    var cancel = function cancel() {\n      if (done) {\n        return false;\n      }\n\n      done = true;\n\n      if (timer) {\n        clearTimeout(timer);\n      }\n\n      return true;\n    };\n\n    if (options.timeout) {\n      timer = setTimeout(function () {\n        if (cancel()) {\n          reject(new Error(\"timeout\"));\n        }\n      }, options.timeout);\n    }\n\n    var retryLimit = options.retryLimit;\n    var attempt = 0;\n\n    function check() {\n      return func().then(function (result) {\n        // If we have a result, or are allowed null then we're done\n        if (result !== undefined) {\n          if (cancel()) {\n            resolve(result);\n          }\n        } else if (options.oncePoll) {\n          options.oncePoll.once(\"poll\", check);\n        } else if (options.onceBlock) {\n          options.onceBlock.once(\"block\", check); // Otherwise, exponential back-off (up to 10s) our next request\n        } else if (!done) {\n          attempt++;\n\n          if (attempt > retryLimit) {\n            if (cancel()) {\n              reject(new Error(\"retry limit reached\"));\n            }\n\n            return;\n          }\n\n          var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n\n          if (timeout < options.floor) {\n            timeout = options.floor;\n          }\n\n          if (timeout > options.ceiling) {\n            timeout = options.ceiling;\n          }\n\n          setTimeout(check, timeout);\n        }\n\n        return null;\n      }, function (error) {\n        if (cancel()) {\n          reject(error);\n        }\n      });\n    }\n\n    check();\n  });\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getUrl } from \"./geturl\";\nfunction staller(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\nfunction bodyify(value, type) {\n    if (value == null) {\n        return null;\n    }\n    if (typeof (value) === \"string\") {\n        return value;\n    }\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            }\n            catch (error) { }\n            ;\n        }\n        return hexlify(value);\n    }\n    return value;\n}\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData(connection, body, processFunc) {\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof (connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit : 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n    const throttleCallback = ((typeof (connection) === \"object\") ? connection.throttleCallback : null);\n    const throttleSlotInterval = ((typeof (connection) === \"object\" && typeof (connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval : 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n    const errorPassThrough = ((typeof (connection) === \"object\") ? !!(connection.errorPassThrough) : false);\n    const headers = {};\n    let url = null;\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options = {\n        method: \"GET\",\n    };\n    let allow304 = false;\n    let timeout = 2 * 60 * 1000;\n    if (typeof (connection) === \"string\") {\n        url = connection;\n    }\n    else if (typeof (connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n        url = connection.url;\n        if (typeof (connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n        options.allowGzip = !!connection.allowGzip;\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\"basic authentication requires a secure https url\", Logger.errors.INVALID_ARGUMENT, { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" });\n            }\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n    }\n    const reData = new RegExp(\"^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData) : null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": dataMatch[1] },\n                body: base64Decode(dataMatch[2])\n            };\n            let result = response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(result);\n        }\n        catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n    const flatHeaders = {};\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n    const runningTimeout = (function () {\n        let timer = null;\n        const promise = new Promise(function (resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) {\n                        return;\n                    }\n                    timer = null;\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n        const cancel = function () {\n            if (timer == null) {\n                return;\n            }\n            clearTimeout(timer);\n            timer = null;\n        };\n        return { promise, cancel };\n    })();\n    const runningFetch = (function () {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let attempt = 0; attempt < attemptLimit; attempt++) {\n                let response = null;\n                try {\n                    response = yield getUrl(url, options);\n                    if (attempt < attemptLimit) {\n                        if (response.statusCode === 301 || response.statusCode === 302) {\n                            // Redirection; for now we only support absolute locataions\n                            const location = response.headers.location || \"\";\n                            if (options.method === \"GET\" && location.match(/^https:/)) {\n                                url = response.headers.location;\n                                continue;\n                            }\n                        }\n                        else if (response.statusCode === 429) {\n                            // Exponential back-off throttling\n                            let tryAgain = true;\n                            if (throttleCallback) {\n                                tryAgain = yield throttleCallback(attempt, url);\n                            }\n                            if (tryAgain) {\n                                let stall = 0;\n                                const retryAfter = response.headers[\"retry-after\"];\n                                if (typeof (retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                    stall = parseInt(retryAfter) * 1000;\n                                }\n                                else {\n                                    stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                                }\n                                //console.log(\"Stalling 429\");\n                                yield staller(stall);\n                                continue;\n                            }\n                        }\n                    }\n                }\n                catch (error) {\n                    response = error.response;\n                    if (response == null) {\n                        runningTimeout.cancel();\n                        logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                            requestMethod: options.method,\n                            serverError: error,\n                            url: url\n                        });\n                    }\n                }\n                let body = response.body;\n                if (allow304 && response.statusCode === 304) {\n                    body = null;\n                }\n                else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                        status: response.statusCode,\n                        headers: response.headers,\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"] : null)),\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n                if (processFunc) {\n                    try {\n                        const result = yield processFunc(body, response);\n                        runningTimeout.cancel();\n                        return result;\n                    }\n                    catch (error) {\n                        // Allow the processFunc to trigger a throttle\n                        if (error.throttleRetry && attempt < attemptLimit) {\n                            let tryAgain = true;\n                            if (throttleCallback) {\n                                tryAgain = yield throttleCallback(attempt, url);\n                            }\n                            if (tryAgain) {\n                                const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                                //console.log(\"Stalling callback\");\n                                yield staller(timeout);\n                                continue;\n                            }\n                        }\n                        runningTimeout.cancel();\n                        logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                            body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"] : null)),\n                            error: error,\n                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                            requestMethod: options.method,\n                            url: url\n                        });\n                    }\n                }\n                runningTimeout.cancel();\n                // If we had a processFunc, it either returned a T or threw above.\n                // The \"body\" is now a Uint8Array.\n                return body;\n            }\n            return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                requestMethod: options.method,\n                url: url\n            });\n        });\n    })();\n    return Promise.race([runningTimeout.promise, runningFetch]);\n}\nexport function fetchJson(connection, json, processFunc) {\n    let processJsonFunc = (value, response) => {\n        let result = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            }\n            catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n        return result;\n    };\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n        // Create a connection with the content-type set for JSON\n        const updated = (typeof (connection) === \"string\") ? ({ url: connection }) : shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        }\n        else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n    return _fetchData(connection, body, processJsonFunc);\n}\nexport function poll(func, options) {\n    if (!options) {\n        options = {};\n    }\n    options = shallowCopy(options);\n    if (options.floor == null) {\n        options.floor = 0;\n    }\n    if (options.ceiling == null) {\n        options.ceiling = 10000;\n    }\n    if (options.interval == null) {\n        options.interval = 250;\n    }\n    return new Promise(function (resolve, reject) {\n        let timer = null;\n        let done = false;\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = () => {\n            if (done) {\n                return false;\n            }\n            done = true;\n            if (timer) {\n                clearTimeout(timer);\n            }\n            return true;\n        };\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) {\n                    reject(new Error(\"timeout\"));\n                }\n            }, options.timeout);\n        }\n        const retryLimit = options.retryLimit;\n        let attempt = 0;\n        function check() {\n            return func().then(function (result) {\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) {\n                        resolve(result);\n                    }\n                }\n                else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n                }\n                else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n                    // Otherwise, exponential back-off (up to 10s) our next request\n                }\n                else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) {\n                            reject(new Error(\"retry limit reached\"));\n                        }\n                        return;\n                    }\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) {\n                        timeout = options.floor;\n                    }\n                    if (timeout > options.ceiling) {\n                        timeout = options.ceiling;\n                    }\n                    setTimeout(check, timeout);\n                }\n                return null;\n            }, function (error) {\n                if (cancel()) {\n                    reject(error);\n                }\n            });\n        }\n        check();\n    });\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}