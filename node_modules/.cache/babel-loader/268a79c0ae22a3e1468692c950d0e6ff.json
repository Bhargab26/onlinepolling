{"ast":null,"code":"var ethUtil = require('ethereumjs-util');\n\nvar ethAbi = require('ethereumjs-abi');\n\nmodule.exports = {\n  concatSig: function concatSig(v, r, s) {\n    var rSig = ethUtil.fromSigned(r);\n    var sSig = ethUtil.fromSigned(s);\n    var vSig = ethUtil.bufferToInt(v);\n    var rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64);\n    var sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64);\n    var vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));\n    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex');\n  },\n  normalize: function normalize(input) {\n    if (!input) return;\n\n    if (typeof input === 'number') {\n      var buffer = ethUtil.toBuffer(input);\n      input = ethUtil.bufferToHex(buffer);\n    }\n\n    if (typeof input !== 'string') {\n      var msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n      msg += ' received ' + typeof input + ': ' + input;\n      throw new Error(msg);\n    }\n\n    return ethUtil.addHexPrefix(input.toLowerCase());\n  },\n  personalSign: function personalSign(privateKey, msgParams) {\n    var message = ethUtil.toBuffer(msgParams.data);\n    var msgHash = ethUtil.hashPersonalMessage(message);\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n    var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));\n    return serialized;\n  },\n  recoverPersonalSignature: function recoverPersonalSignature(msgParams) {\n    var publicKey = getPublicKeyFor(msgParams);\n    var sender = ethUtil.publicToAddress(publicKey);\n    var senderHex = ethUtil.bufferToHex(sender);\n    return senderHex;\n  },\n  extractPublicKey: function extractPublicKey(msgParams) {\n    var publicKey = getPublicKeyFor(msgParams);\n    return '0x' + publicKey.toString('hex');\n  },\n  typedSignatureHash: function typedSignatureHash(typedData) {\n    var hashBuffer = _typedSignatureHash(typedData);\n\n    return ethUtil.bufferToHex(hashBuffer);\n  },\n  signTypedData: function signTypedData(privateKey, msgParams) {\n    var msgHash = _typedSignatureHash(msgParams.data);\n\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));\n  },\n  recoverTypedSignature: function recoverTypedSignature(msgParams) {\n    var msgHash = _typedSignatureHash(msgParams.data);\n\n    var publicKey = recoverPublicKey(msgHash, msgParams.sig);\n    var sender = ethUtil.publicToAddress(publicKey);\n    return ethUtil.bufferToHex(sender);\n  }\n};\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\n\nfunction _typedSignatureHash(typedData) {\n  var error = new Error('Expect argument to be non-empty array');\n  if (typeof typedData !== 'object' || !typedData.length) throw error;\n  var data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value;\n  });\n  var types = typedData.map(function (e) {\n    return e.type;\n  });\n  var schema = typedData.map(function (e) {\n    if (!e.name) throw error;\n    return e.type + ' ' + e.name;\n  });\n  return ethAbi.soliditySHA3(['bytes32', 'bytes32'], [ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema), ethAbi.soliditySHA3(types, data)]);\n}\n\nfunction recoverPublicKey(hash, sig) {\n  var signature = ethUtil.toBuffer(sig);\n  var sigParams = ethUtil.fromRpcSig(signature);\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);\n}\n\nfunction getPublicKeyFor(msgParams) {\n  var message = ethUtil.toBuffer(msgParams.data);\n  var msgHash = ethUtil.hashPersonalMessage(message);\n  return recoverPublicKey(msgHash, msgParams.sig);\n}\n\nfunction padWithZeroes(number, length) {\n  var myString = '' + number;\n\n  while (myString.length < length) {\n    myString = '0' + myString;\n  }\n\n  return myString;\n}","map":{"version":3,"names":["ethUtil","require","ethAbi","module","exports","concatSig","v","r","s","rSig","fromSigned","sSig","vSig","bufferToInt","rStr","padWithZeroes","toUnsigned","toString","sStr","vStr","stripHexPrefix","intToHex","addHexPrefix","concat","normalize","input","buffer","toBuffer","bufferToHex","msg","Error","toLowerCase","personalSign","privateKey","msgParams","message","data","msgHash","hashPersonalMessage","sig","ecsign","serialized","recoverPersonalSignature","publicKey","getPublicKeyFor","sender","publicToAddress","senderHex","extractPublicKey","typedSignatureHash","typedData","hashBuffer","signTypedData","recoverTypedSignature","recoverPublicKey","error","length","map","e","type","value","types","schema","name","soliditySHA3","Array","fill","hash","signature","sigParams","fromRpcSig","ecrecover","number","myString"],"sources":["C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/eth-sig-util/index.js"],"sourcesContent":["const ethUtil = require('ethereumjs-util')\nconst ethAbi = require('ethereumjs-abi')\n\nmodule.exports = {\n\n  concatSig: function (v, r, s) {\n    const rSig = ethUtil.fromSigned(r)\n    const sSig = ethUtil.fromSigned(s)\n    const vSig = ethUtil.bufferToInt(v)\n    const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64)\n    const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64)\n    const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig))\n    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex')\n  },\n\n  normalize: function (input) {\n    if (!input) return\n\n    if (typeof input === 'number') {\n      const buffer = ethUtil.toBuffer(input)\n      input = ethUtil.bufferToHex(buffer)\n    }\n\n    if (typeof input !== 'string') {\n      var msg = 'eth-sig-util.normalize() requires hex string or integer input.'\n      msg += ' received ' + (typeof input) + ': ' + input\n      throw new Error(msg)\n    }\n\n    return ethUtil.addHexPrefix(input.toLowerCase())\n  },\n\n  personalSign: function (privateKey, msgParams) {\n    var message = ethUtil.toBuffer(msgParams.data)\n    var msgHash = ethUtil.hashPersonalMessage(message)\n    var sig = ethUtil.ecsign(msgHash, privateKey)\n    var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n    return serialized\n  },\n\n  recoverPersonalSignature: function (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    const sender = ethUtil.publicToAddress(publicKey)\n    const senderHex = ethUtil.bufferToHex(sender)\n    return senderHex\n  },\n\n  extractPublicKey: function (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    return '0x' + publicKey.toString('hex')\n  },\n\n  typedSignatureHash: function (typedData) {\n    const hashBuffer = typedSignatureHash(typedData)\n    return ethUtil.bufferToHex(hashBuffer)\n  },\n\n  signTypedData: function (privateKey, msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const sig = ethUtil.ecsign(msgHash, privateKey)\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n  },\n\n  recoverTypedSignature: function (msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const publicKey = recoverPublicKey(msgHash, msgParams.sig)\n    const sender = ethUtil.publicToAddress(publicKey)\n    return ethUtil.bufferToHex(sender)\n  }\n\n}\n\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction typedSignatureHash(typedData) {\n  const error = new Error('Expect argument to be non-empty array')\n  if (typeof typedData !== 'object' || !typedData.length) throw error\n\n  const data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value\n  })\n  const types = typedData.map(function (e) { return e.type })\n  const schema = typedData.map(function (e) {\n    if (!e.name) throw error\n    return e.type + ' ' + e.name\n  })\n\n  return ethAbi.soliditySHA3(\n    ['bytes32', 'bytes32'],\n    [\n      ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),\n      ethAbi.soliditySHA3(types, data)\n    ]\n  )\n}\n\nfunction recoverPublicKey(hash, sig) {\n  const signature = ethUtil.toBuffer(sig)\n  const sigParams = ethUtil.fromRpcSig(signature)\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s)\n}\n\nfunction getPublicKeyFor (msgParams) {\n  const message = ethUtil.toBuffer(msgParams.data)\n  const msgHash = ethUtil.hashPersonalMessage(message)\n  return recoverPublicKey(msgHash, msgParams.sig)\n}\n\n\nfunction padWithZeroes (number, length) {\n  var myString = '' + number\n  while (myString.length < length) {\n    myString = '0' + myString\n  }\n  return myString\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}