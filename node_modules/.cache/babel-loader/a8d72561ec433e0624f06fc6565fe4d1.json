{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nvar apiKey = \"torus-default\";\nvar embedHost = \"\"; // #region API Keys\n\nvar gatewayAuthHeader = \"x-api-key\";\nvar gatewayEmbedHostHeader = \"x-embed-host\";\n\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\n\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\n\nfunction getEmbedHost() {\n  return embedHost;\n}\n\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\n\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\n\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nfunction getApiKeyHeaders() {\n  var headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\n\nvar promiseTimeout = function promiseTimeout(ms, promise) {\n  var timeout = new Promise(function (resolve, reject) {\n    var id = setTimeout(function () {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\n\nvar get = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n    var options_,\n        customOptions,\n        defaultOptions,\n        options,\n        response,\n        _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options_ = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            customOptions = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            defaultOptions = {\n              mode: \"cors\",\n              headers: {}\n            };\n\n            if (customOptions.useAPIKey) {\n              defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n            }\n\n            options = merge(defaultOptions, options_, {\n              method: \"GET\"\n            });\n            _context.next = 7;\n            return fetch(url, options);\n\n          case 7:\n            response = _context.sent;\n\n            if (!response.ok) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\", response.json());\n\n          case 10:\n            debugLogResponse(response);\n            throw response;\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function get(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar post = function post(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  var options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetch(url, options).then(function (response) {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\n\nvar patch = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url) {\n    var data,\n        options_,\n        customOptions,\n        defaultOptions,\n        options,\n        response,\n        _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            data = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            options_ = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            customOptions = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {};\n            defaultOptions = {\n              mode: \"cors\",\n              headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\"\n              }\n            }; // for multipart request browser/client will add multipart content type\n            // along with multipart boundary , so for multipart request send\n            // content-type: undefined or send with multipart boundary if already known\n\n            if (customOptions.useAPIKey) {\n              defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n            }\n\n            options = merge(defaultOptions, options_, {\n              method: \"PATCH\"\n            }); // deep merge changes the structure of form data and url encoded data ,\n            // so we should not deepmerge body data\n\n            if (customOptions.isUrlEncodedData) {\n              // for multipart request browser/client will add multipart content type\n              // along with multipart boundary , so for multipart request send\n              // content-type: undefined or send with multipart boundary if already known\n              options.body = data; // If url encoded data, this must not be the content type\n\n              if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n            } else {\n              options.body = JSON.stringify(data);\n            }\n\n            _context2.next = 9;\n            return fetch(url, options);\n\n          case 9:\n            response = _context2.sent;\n\n            if (!response.ok) {\n              _context2.next = 12;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", response.json());\n\n          case 12:\n            debugLogResponse(response);\n            throw response;\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function patch(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar remove = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(url) {\n    var data,\n        options_,\n        customOptions,\n        defaultOptions,\n        options,\n        response,\n        _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            data = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n            options_ = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n            customOptions = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : {};\n            defaultOptions = {\n              mode: \"cors\",\n              headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\"\n              }\n            }; // for multipart request browser/client will add multipart content type\n            // along with multipart boundary , so for multipart request send\n            // content-type: undefined or send with multipart boundary if already known\n\n            if (customOptions.useAPIKey) {\n              defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n            }\n\n            options = merge(defaultOptions, options_, {\n              method: \"DELETE\"\n            });\n\n            if (customOptions.isUrlEncodedData) {\n              // for multipart request browser/client will add multipart content type\n              // along with multipart boundary , so for multipart request send\n              // content-type: undefined or send with multipart boundary if already known\n              options.body = data; // If url encoded data, this must not be the content type\n\n              if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n            } else {\n              options.body = JSON.stringify(data);\n            }\n\n            _context3.next = 9;\n            return fetch(url, options);\n\n          case 9:\n            response = _context3.sent;\n\n            if (!response.ok) {\n              _context3.next = 12;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", response.json());\n\n          case 12:\n            debugLogResponse(response);\n            throw response;\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function remove(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar generateJsonRPCObject = function generateJsonRPCObject(method, parameters) {\n  return {\n    jsonrpc: \"2.0\",\n    method: method,\n    id: 10,\n    params: parameters\n  };\n};\n\nvar promiseRace = function promiseRace(url, options) {\n  var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, remove, setAPIKey, setEmbedHost, setLogLevel };","map":{"version":3,"sources":["../src/index.ts"],"names":["log","logLevel","levels","apiKey","embedHost","gatewayAuthHeader","gatewayEmbedHostHeader","setEmbedHost","embedHost_","clearEmbedHost","getEmbedHost","setAPIKey","apiKey_","clearAPIKey","getAPIKey","setLogLevel","level","headers","response","promiseTimeout","timeout","id","setTimeout","clearTimeout","reject","Promise","get","options_","customOptions","defaultOptions","mode","getApiKeyHeaders","options","merge","method","fetch","debugLogResponse","post","data","JSON","patch","remove","generateJsonRPCObject","jsonrpc","params","parameters","promiseRace"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\n\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetch(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, remove, setAPIKey, setEmbedHost, setLogLevel };\n//# sourceMappingURL=httpHelpers.esm.js.map\n"]},"metadata":{},"sourceType":"module"}