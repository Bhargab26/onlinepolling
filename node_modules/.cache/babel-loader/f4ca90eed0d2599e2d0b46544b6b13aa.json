{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nmodule.exports = getBlocksForRange;\n\nfunction getBlocksForRange(_x) {\n  return _getBlocksForRange.apply(this, arguments);\n}\n\nfunction _getBlocksForRange() {\n  _getBlocksForRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n    var provider, fromBlock, toBlock, fromBlockNumber, toBlockNumber, blockCountToQuery, missingBlockNumbers, blockBodies;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            provider = _ref.provider, fromBlock = _ref.fromBlock, toBlock = _ref.toBlock;\n            if (!fromBlock) fromBlock = toBlock;\n            fromBlockNumber = hexToInt(fromBlock);\n            toBlockNumber = hexToInt(toBlock);\n            blockCountToQuery = toBlockNumber - fromBlockNumber + 1; // load all blocks from old to new (inclusive)\n\n            missingBlockNumbers = Array(blockCountToQuery).fill().map(function (_, index) {\n              return fromBlockNumber + index;\n            }).map(intToHex);\n            _context.next = 8;\n            return Promise.all(missingBlockNumbers.map(function (blockNum) {\n              return query(provider, 'eth_getBlockByNumber', [blockNum, false]);\n            }));\n\n          case 8:\n            blockBodies = _context.sent;\n            return _context.abrupt(\"return\", blockBodies);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getBlocksForRange.apply(this, arguments);\n}\n\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  return Number.parseInt(hexString, 16);\n}\n\nfunction incrementHexInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  var value = hexToInt(hexString);\n  return intToHex(value + 1);\n}\n\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int;\n  var hexString = int.toString(16);\n  return '0x' + hexString;\n}\n\nfunction query(provider, method, params) {\n  return new Promise(function (resolve, reject) {\n    provider.sendAsync({\n      id: 1,\n      jsonrpc: '2.0',\n      method: method,\n      params: params\n    }, function (err, res) {\n      if (err) return reject(err);\n      resolve(res.result);\n    });\n  });\n}","map":{"version":3,"names":["module","exports","getBlocksForRange","provider","fromBlock","toBlock","fromBlockNumber","hexToInt","toBlockNumber","blockCountToQuery","missingBlockNumbers","Array","fill","map","_","index","intToHex","Promise","all","blockNum","query","blockBodies","hexString","undefined","Number","parseInt","incrementHexInt","value","int","toString","method","params","resolve","reject","sendAsync","id","jsonrpc","err","res","result"],"sources":["C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/eth-json-rpc-filters/getBlocksForRange.js"],"sourcesContent":["module.exports = getBlocksForRange\n\nasync function getBlocksForRange({ provider, fromBlock, toBlock }) {\n  if (!fromBlock) fromBlock = toBlock\n\n  const fromBlockNumber = hexToInt(fromBlock)\n  const toBlockNumber = hexToInt(toBlock)\n  const blockCountToQuery = toBlockNumber - fromBlockNumber + 1\n  // load all blocks from old to new (inclusive)\n  const missingBlockNumbers = Array(blockCountToQuery).fill()\n                              .map((_,index) => fromBlockNumber + index)\n                              .map(intToHex)\n  const blockBodies = await Promise.all(\n    missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false]))\n  )\n  return blockBodies\n}\n\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString\n  return Number.parseInt(hexString, 16)\n}\n\nfunction incrementHexInt(hexString){\n  if (hexString === undefined || hexString === null) return hexString\n  const value = hexToInt(hexString)\n  return intToHex(value + 1)\n}\n\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int\n  const hexString = int.toString(16)\n  return '0x' + hexString\n}\n\nfunction query(provider, method, params) {\n  return new Promise((resolve, reject) => {\n    provider.sendAsync({ id: 1, jsonrpc: '2.0', method, params }, (err, res) => {\n      if (err) return reject(err)\n      resolve(res.result)\n    })\n  })\n}\n"],"mappings":";;;;AAAAA,MAAM,CAACC,OAAP,GAAiBC,iBAAjB;;SAEeA,iB;;;;;kFAAf;IAAA;IAAA;MAAA;QAAA;UAAA;YAAmCC,QAAnC,QAAmCA,QAAnC,EAA6CC,SAA7C,QAA6CA,SAA7C,EAAwDC,OAAxD,QAAwDA,OAAxD;YACE,IAAI,CAACD,SAAL,EAAgBA,SAAS,GAAGC,OAAZ;YAEVC,eAHR,GAG0BC,QAAQ,CAACH,SAAD,CAHlC;YAIQI,aAJR,GAIwBD,QAAQ,CAACF,OAAD,CAJhC;YAKQI,iBALR,GAK4BD,aAAa,GAAGF,eAAhB,GAAkC,CAL9D,EAME;;YACMI,mBAPR,GAO8BC,KAAK,CAACF,iBAAD,CAAL,CAAyBG,IAAzB,GACCC,GADD,CACK,UAACC,CAAD,EAAGC,KAAH;cAAA,OAAaT,eAAe,GAAGS,KAA/B;YAAA,CADL,EAECF,GAFD,CAEKG,QAFL,CAP9B;YAAA;YAAA,OAU4BC,OAAO,CAACC,GAAR,CACxBR,mBAAmB,CAACG,GAApB,CAAwB,UAAAM,QAAQ;cAAA,OAAIC,KAAK,CAACjB,QAAD,EAAW,sBAAX,EAAmC,CAACgB,QAAD,EAAW,KAAX,CAAnC,CAAT;YAAA,CAAhC,CADwB,CAV5B;;UAAA;YAUQE,WAVR;YAAA,iCAaSA,WAbT;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAgBA,SAASd,QAAT,CAAkBe,SAAlB,EAA6B;EAC3B,IAAIA,SAAS,KAAKC,SAAd,IAA2BD,SAAS,KAAK,IAA7C,EAAmD,OAAOA,SAAP;EACnD,OAAOE,MAAM,CAACC,QAAP,CAAgBH,SAAhB,EAA2B,EAA3B,CAAP;AACD;;AAED,SAASI,eAAT,CAAyBJ,SAAzB,EAAmC;EACjC,IAAIA,SAAS,KAAKC,SAAd,IAA2BD,SAAS,KAAK,IAA7C,EAAmD,OAAOA,SAAP;EACnD,IAAMK,KAAK,GAAGpB,QAAQ,CAACe,SAAD,CAAtB;EACA,OAAON,QAAQ,CAACW,KAAK,GAAG,CAAT,CAAf;AACD;;AAED,SAASX,QAAT,CAAkBY,GAAlB,EAAuB;EACrB,IAAIA,GAAG,KAAKL,SAAR,IAAqBK,GAAG,KAAK,IAAjC,EAAuC,OAAOA,GAAP;EACvC,IAAMN,SAAS,GAAGM,GAAG,CAACC,QAAJ,CAAa,EAAb,CAAlB;EACA,OAAO,OAAOP,SAAd;AACD;;AAED,SAASF,KAAT,CAAejB,QAAf,EAAyB2B,MAAzB,EAAiCC,MAAjC,EAAyC;EACvC,OAAO,IAAId,OAAJ,CAAY,UAACe,OAAD,EAAUC,MAAV,EAAqB;IACtC9B,QAAQ,CAAC+B,SAAT,CAAmB;MAAEC,EAAE,EAAE,CAAN;MAASC,OAAO,EAAE,KAAlB;MAAyBN,MAAM,EAANA,MAAzB;MAAiCC,MAAM,EAANA;IAAjC,CAAnB,EAA8D,UAACM,GAAD,EAAMC,GAAN,EAAc;MAC1E,IAAID,GAAJ,EAAS,OAAOJ,MAAM,CAACI,GAAD,CAAb;MACTL,OAAO,CAACM,GAAG,CAACC,MAAL,CAAP;IACD,CAHD;EAID,CALM,CAAP;AAMD"},"metadata":{},"sourceType":"script"}