{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar EthQuery = require('eth-query');\n\nvar pify = require('pify');\n\nvar BaseFilterWithHistory = require('./base-filter-history');\n\nvar _require = require('./hexUtils'),\n    bnToHex = _require.bnToHex,\n    hexToInt = _require.hexToInt,\n    incrementHexInt = _require.incrementHexInt,\n    minBlockRef = _require.minBlockRef,\n    blockRefIsNumber = _require.blockRefIsNumber;\n\nvar LogFilter = /*#__PURE__*/function (_BaseFilterWithHistor) {\n  \"use strict\";\n\n  _inherits(LogFilter, _BaseFilterWithHistor);\n\n  var _super = _createSuper(LogFilter);\n\n  function LogFilter(_ref) {\n    var _this;\n\n    var provider = _ref.provider,\n        params = _ref.params;\n\n    _classCallCheck(this, LogFilter);\n\n    _this = _super.call(this);\n    _this.type = 'log';\n    _this.ethQuery = new EthQuery(provider);\n    _this.params = Object.assign({\n      fromBlock: 'latest',\n      toBlock: 'latest',\n      address: undefined,\n      topics: []\n    }, params); // normalize address parameter\n\n    if (_this.params.address) {\n      // ensure array\n      if (!Array.isArray(_this.params.address)) {\n        _this.params.address = [_this.params.address];\n      } // ensure lowercase\n\n\n      _this.params.address = _this.params.address.map(function (address) {\n        return address.toLowerCase();\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(LogFilter, [{\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref2) {\n        var currentBlock, fromBlock, toBlock, params, newLogs;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                currentBlock = _ref2.currentBlock;\n                // resolve params.fromBlock\n                fromBlock = this.params.fromBlock;\n                if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock;\n                if ('earliest' === fromBlock) fromBlock = '0x0';\n                this.params.fromBlock = fromBlock; // set toBlock for initial lookup\n\n                toBlock = minBlockRef(this.params.toBlock, currentBlock);\n                params = Object.assign({}, this.params, {\n                  toBlock: toBlock\n                }); // fetch logs and add to results\n\n                _context.next = 9;\n                return this._fetchLogs(params);\n\n              case 9:\n                newLogs = _context.sent;\n                this.addInitialResults(newLogs);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initialize(_x) {\n        return _initialize.apply(this, arguments);\n      }\n\n      return initialize;\n    }()\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref3) {\n        var _this2 = this;\n\n        var oldBlock, newBlock, toBlock, fromBlock, params, newLogs, matchingLogs;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                oldBlock = _ref3.oldBlock, newBlock = _ref3.newBlock;\n                // configure params for this update\n                toBlock = newBlock;\n\n                // oldBlock is empty on first sync\n                if (oldBlock) {\n                  fromBlock = incrementHexInt(oldBlock);\n                } else {\n                  fromBlock = newBlock;\n                } // fetch logs\n\n\n                params = Object.assign({}, this.params, {\n                  fromBlock: fromBlock,\n                  toBlock: toBlock\n                });\n                _context2.next = 6;\n                return this._fetchLogs(params);\n\n              case 6:\n                newLogs = _context2.sent;\n                matchingLogs = newLogs.filter(function (log) {\n                  return _this2.matchLog(log);\n                }); // add to results\n\n                this.addResults(matchingLogs);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function update(_x2) {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  }, {\n    key: \"_fetchLogs\",\n    value: function () {\n      var _fetchLogs2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(params) {\n        var _this3 = this;\n\n        var newLogs;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return pify(function (cb) {\n                  return _this3.ethQuery.getLogs(params, cb);\n                })();\n\n              case 2:\n                newLogs = _context3.sent;\n                return _context3.abrupt(\"return\", newLogs);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function _fetchLogs(_x3) {\n        return _fetchLogs2.apply(this, arguments);\n      }\n\n      return _fetchLogs;\n    }()\n  }, {\n    key: \"matchLog\",\n    value: function matchLog(log) {\n      // check if block number in bounds:\n      if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false;\n      if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false; // address is correct:\n\n      var normalizedLogAddress = log.address && log.address.toLowerCase();\n      if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false; // topics match:\n      // topics are position-dependant\n      // topics can be nested to represent `or` [[a || b], c]\n      // topics can be null, representing a wild card for that position\n\n      var topicsMatch = this.params.topics.every(function (topicPattern, index) {\n        // pattern is longer than actual topics\n        var logTopic = log.topics[index];\n        if (!logTopic) return false;\n        logTopic = logTopic.toLowerCase(); // normalize subTopics\n\n        var subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern]; // check for wild card\n\n        var subtopicsIncludeWildcard = subtopicsToMatch.includes(null);\n        if (subtopicsIncludeWildcard) return true;\n        subtopicsToMatch = subtopicsToMatch.map(function (topic) {\n          return topic.toLowerCase();\n        }); // check each possible matching topic\n\n        var topicDoesMatch = subtopicsToMatch.includes(logTopic);\n        return topicDoesMatch;\n      });\n      return topicsMatch;\n    }\n  }]);\n\n  return LogFilter;\n}(BaseFilterWithHistory);\n\nmodule.exports = LogFilter;","map":{"version":3,"names":["EthQuery","require","pify","BaseFilterWithHistory","bnToHex","hexToInt","incrementHexInt","minBlockRef","blockRefIsNumber","LogFilter","provider","params","type","ethQuery","Object","assign","fromBlock","toBlock","address","undefined","topics","Array","isArray","map","toLowerCase","currentBlock","includes","_fetchLogs","newLogs","addInitialResults","oldBlock","newBlock","matchingLogs","filter","log","matchLog","addResults","cb","getLogs","blockNumber","normalizedLogAddress","topicsMatch","every","topicPattern","index","logTopic","subtopicsToMatch","subtopicsIncludeWildcard","topic","topicDoesMatch","module","exports"],"sources":["C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/eth-json-rpc-filters/log-filter.js"],"sourcesContent":["const EthQuery = require('eth-query')\nconst pify = require('pify')\nconst BaseFilterWithHistory = require('./base-filter-history')\nconst { bnToHex, hexToInt, incrementHexInt, minBlockRef, blockRefIsNumber } = require('./hexUtils')\n\nclass LogFilter extends BaseFilterWithHistory {\n\n  constructor ({ provider, params }) {\n    super()\n    this.type = 'log'\n    this.ethQuery = new EthQuery(provider)\n    this.params = Object.assign({\n      fromBlock: 'latest',\n      toBlock: 'latest',\n      address: undefined,\n      topics: [],\n    }, params)\n    // normalize address parameter\n    if (this.params.address) {\n      // ensure array\n      if (!Array.isArray(this.params.address)) {\n        this.params.address = [this.params.address]\n      }\n      // ensure lowercase\n      this.params.address = this.params.address.map(address => address.toLowerCase())\n    }\n  }\n\n  async initialize({ currentBlock }) {\n    // resolve params.fromBlock\n    let fromBlock = this.params.fromBlock\n    if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock\n    if ('earliest' === fromBlock) fromBlock = '0x0'\n    this.params.fromBlock = fromBlock\n    // set toBlock for initial lookup\n    const toBlock = minBlockRef(this.params.toBlock, currentBlock)\n    const params = Object.assign({}, this.params, { toBlock })\n    // fetch logs and add to results\n    const newLogs = await this._fetchLogs(params)\n    this.addInitialResults(newLogs)\n  }\n\n  async update ({ oldBlock, newBlock }) {\n    // configure params for this update\n    const toBlock = newBlock\n    let fromBlock\n    // oldBlock is empty on first sync\n    if (oldBlock) {\n      fromBlock = incrementHexInt(oldBlock)\n    } else {\n      fromBlock = newBlock\n    }\n    // fetch logs\n    const params = Object.assign({}, this.params, { fromBlock, toBlock })\n    const newLogs = await this._fetchLogs(params)\n    const matchingLogs = newLogs.filter(log => this.matchLog(log))\n\n    // add to results\n    this.addResults(matchingLogs)\n  }\n\n  async _fetchLogs (params) {\n    const newLogs = await pify(cb => this.ethQuery.getLogs(params, cb))()\n    // add to results\n    return newLogs\n  }\n\n  matchLog(log) {\n    // check if block number in bounds:\n    if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false\n    if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false\n\n    // address is correct:\n    const normalizedLogAddress = log.address && log.address.toLowerCase()\n    if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false\n\n    // topics match:\n    // topics are position-dependant\n    // topics can be nested to represent `or` [[a || b], c]\n    // topics can be null, representing a wild card for that position\n    const topicsMatch = this.params.topics.every((topicPattern, index) => {\n      // pattern is longer than actual topics\n      let logTopic = log.topics[index]\n      if (!logTopic) return false\n      logTopic = logTopic.toLowerCase()\n      // normalize subTopics\n      let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern]\n      // check for wild card\n      const subtopicsIncludeWildcard = subtopicsToMatch.includes(null)\n      if (subtopicsIncludeWildcard) return true\n      subtopicsToMatch = subtopicsToMatch.map(topic => topic.toLowerCase())\n      // check each possible matching topic\n      const topicDoesMatch = subtopicsToMatch.includes(logTopic)\n      return topicDoesMatch\n    })\n\n    return topicsMatch\n  }\n\n}\n\nmodule.exports = LogFilter\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}