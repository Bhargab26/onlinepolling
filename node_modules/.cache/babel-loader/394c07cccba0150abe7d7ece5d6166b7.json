{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\n\nvar _slicedToArray = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _wrapNativeSuper = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar bs58_1 = __importDefault(require(\"bs58\")); // TODO: Make sure this polyfill not included when not required\n\n\nvar encoding = __importStar(require(\"text-encoding-utf-8\"));\n\nvar ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nvar textDecoder = new ResolvedTextDecoder(\"utf-8\", {\n  fatal: true\n});\n\nfunction baseEncode(value) {\n  if (typeof value === \"string\") {\n    value = Buffer.from(value, \"utf8\");\n  }\n\n  return bs58_1.default.encode(Buffer.from(value));\n}\n\nexports.baseEncode = baseEncode;\n\nfunction baseDecode(value) {\n  return Buffer.from(bs58_1.default.decode(value));\n}\n\nexports.baseDecode = baseDecode;\nvar INITIAL_LENGTH = 1024;\n\nvar BorshError = /*#__PURE__*/function (_Error) {\n  _inherits(BorshError, _Error);\n\n  var _super = _createSuper(BorshError);\n\n  function BorshError(message) {\n    var _this;\n\n    _classCallCheck(this, BorshError);\n\n    _this = _super.call(this, message);\n    _this.fieldPath = [];\n    _this.originalMessage = message;\n    return _this;\n  }\n\n  _createClass(BorshError, [{\n    key: \"addToFieldPath\",\n    value: function addToFieldPath(fieldName) {\n      this.fieldPath.splice(0, 0, fieldName); // NOTE: Modifying message directly as jest doesn't use .toString()\n\n      this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n  }]);\n\n  return BorshError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexports.BorshError = BorshError; /// Binary encoder.\n\nvar BinaryWriter = /*#__PURE__*/function () {\n  function BinaryWriter() {\n    _classCallCheck(this, BinaryWriter);\n\n    this.buf = Buffer.alloc(INITIAL_LENGTH);\n    this.length = 0;\n  }\n\n  _createClass(BinaryWriter, [{\n    key: \"maybeResize\",\n    value: function maybeResize() {\n      if (this.buf.length < 16 + this.length) {\n        this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n      }\n    }\n  }, {\n    key: \"writeU8\",\n    value: function writeU8(value) {\n      this.maybeResize();\n      this.buf.writeUInt8(value, this.length);\n      this.length += 1;\n    }\n  }, {\n    key: \"writeU16\",\n    value: function writeU16(value) {\n      this.maybeResize();\n      this.buf.writeUInt16LE(value, this.length);\n      this.length += 2;\n    }\n  }, {\n    key: \"writeU32\",\n    value: function writeU32(value) {\n      this.maybeResize();\n      this.buf.writeUInt32LE(value, this.length);\n      this.length += 4;\n    }\n  }, {\n    key: \"writeU64\",\n    value: function writeU64(value) {\n      this.maybeResize();\n      this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n  }, {\n    key: \"writeU128\",\n    value: function writeU128(value) {\n      this.maybeResize();\n      this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n  }, {\n    key: \"writeU256\",\n    value: function writeU256(value) {\n      this.maybeResize();\n      this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n  }, {\n    key: \"writeU512\",\n    value: function writeU512(value) {\n      this.maybeResize();\n      this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n  }, {\n    key: \"writeBuffer\",\n    value: function writeBuffer(buffer) {\n      // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n      this.buf = Buffer.concat([Buffer.from(this.buf.subarray(0, this.length)), buffer, Buffer.alloc(INITIAL_LENGTH)]);\n      this.length += buffer.length;\n    }\n  }, {\n    key: \"writeString\",\n    value: function writeString(str) {\n      this.maybeResize();\n      var b = Buffer.from(str, \"utf8\");\n      this.writeU32(b.length);\n      this.writeBuffer(b);\n    }\n  }, {\n    key: \"writeFixedArray\",\n    value: function writeFixedArray(array) {\n      this.writeBuffer(Buffer.from(array));\n    }\n  }, {\n    key: \"writeArray\",\n    value: function writeArray(array, fn) {\n      this.maybeResize();\n      this.writeU32(array.length);\n\n      var _iterator = _createForOfIteratorHelper(array),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var elem = _step.value;\n          this.maybeResize();\n          fn(elem);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this.buf.subarray(0, this.length);\n    }\n  }]);\n\n  return BinaryWriter;\n}();\n\nexports.BinaryWriter = BinaryWriter;\n\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n  var originalMethod = propertyDescriptor.value;\n\n  propertyDescriptor.value = function () {\n    try {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return originalMethod.apply(this, args);\n    } catch (e) {\n      if (e instanceof RangeError) {\n        var code = e.code;\n\n        if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n          throw new BorshError(\"Reached the end of buffer when deserializing\");\n        }\n      }\n\n      throw e;\n    }\n  };\n}\n\nvar BinaryReader = /*#__PURE__*/function () {\n  function BinaryReader(buf) {\n    _classCallCheck(this, BinaryReader);\n\n    this.buf = buf;\n    this.offset = 0;\n  }\n\n  _createClass(BinaryReader, [{\n    key: \"readU8\",\n    value: function readU8() {\n      var value = this.buf.readUInt8(this.offset);\n      this.offset += 1;\n      return value;\n    }\n  }, {\n    key: \"readU16\",\n    value: function readU16() {\n      var value = this.buf.readUInt16LE(this.offset);\n      this.offset += 2;\n      return value;\n    }\n  }, {\n    key: \"readU32\",\n    value: function readU32() {\n      var value = this.buf.readUInt32LE(this.offset);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"readU64\",\n    value: function readU64() {\n      var buf = this.readBuffer(8);\n      return new bn_js_1.default(buf, \"le\");\n    }\n  }, {\n    key: \"readU128\",\n    value: function readU128() {\n      var buf = this.readBuffer(16);\n      return new bn_js_1.default(buf, \"le\");\n    }\n  }, {\n    key: \"readU256\",\n    value: function readU256() {\n      var buf = this.readBuffer(32);\n      return new bn_js_1.default(buf, \"le\");\n    }\n  }, {\n    key: \"readU512\",\n    value: function readU512() {\n      var buf = this.readBuffer(64);\n      return new bn_js_1.default(buf, \"le\");\n    }\n  }, {\n    key: \"readBuffer\",\n    value: function readBuffer(len) {\n      if (this.offset + len > this.buf.length) {\n        throw new BorshError(\"Expected buffer length \".concat(len, \" isn't within bounds\"));\n      }\n\n      var result = this.buf.slice(this.offset, this.offset + len);\n      this.offset += len;\n      return result;\n    }\n  }, {\n    key: \"readString\",\n    value: function readString() {\n      var len = this.readU32();\n      var buf = this.readBuffer(len);\n\n      try {\n        // NOTE: Using TextDecoder to fail on invalid UTF-8\n        return textDecoder.decode(buf);\n      } catch (e) {\n        throw new BorshError(\"Error decoding UTF-8 string: \".concat(e));\n      }\n    }\n  }, {\n    key: \"readFixedArray\",\n    value: function readFixedArray(len) {\n      return new Uint8Array(this.readBuffer(len));\n    }\n  }, {\n    key: \"readArray\",\n    value: function readArray(fn) {\n      var len = this.readU32();\n      var result = Array();\n\n      for (var i = 0; i < len; ++i) {\n        result.push(fn());\n      }\n\n      return result;\n    }\n  }]);\n\n  return BinaryReader;\n}();\n\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU8\", null);\n\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU16\", null);\n\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU32\", null);\n\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU64\", null);\n\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU128\", null);\n\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU256\", null);\n\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU512\", null);\n\n__decorate([handlingRangeError], BinaryReader.prototype, \"readString\", null);\n\n__decorate([handlingRangeError], BinaryReader.prototype, \"readFixedArray\", null);\n\n__decorate([handlingRangeError], BinaryReader.prototype, \"readArray\", null);\n\nexports.BinaryReader = BinaryReader;\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n  try {\n    // TODO: Handle missing values properly (make sure they never result in just skipped write)\n    if (typeof fieldType === \"string\") {\n      writer[\"write\".concat(capitalizeFirstLetter(fieldType))](value);\n    } else if (fieldType instanceof Array) {\n      if (typeof fieldType[0] === \"number\") {\n        if (value.length !== fieldType[0]) {\n          throw new BorshError(\"Expecting byte array of length \".concat(fieldType[0], \", but got \").concat(value.length, \" bytes\"));\n        }\n\n        writer.writeFixedArray(value);\n      } else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n        if (value.length !== fieldType[1]) {\n          throw new BorshError(\"Expecting byte array of length \".concat(fieldType[1], \", but got \").concat(value.length, \" bytes\"));\n        }\n\n        for (var i = 0; i < fieldType[1]; i++) {\n          serializeField(schema, null, value[i], fieldType[0], writer);\n        }\n      } else {\n        writer.writeArray(value, function (item) {\n          serializeField(schema, fieldName, item, fieldType[0], writer);\n        });\n      }\n    } else if (fieldType.kind !== undefined) {\n      switch (fieldType.kind) {\n        case \"option\":\n          {\n            if (value === null || value === undefined) {\n              writer.writeU8(0);\n            } else {\n              writer.writeU8(1);\n              serializeField(schema, fieldName, value, fieldType.type, writer);\n            }\n\n            break;\n          }\n\n        case \"map\":\n          {\n            writer.writeU32(value.size);\n            value.forEach(function (val, key) {\n              serializeField(schema, fieldName, key, fieldType.key, writer);\n              serializeField(schema, fieldName, val, fieldType.value, writer);\n            });\n            break;\n          }\n\n        default:\n          throw new BorshError(\"FieldType \".concat(fieldType, \" unrecognized\"));\n      }\n    } else {\n      serializeStruct(schema, value, writer);\n    }\n  } catch (error) {\n    if (error instanceof BorshError) {\n      error.addToFieldPath(fieldName);\n    }\n\n    throw error;\n  }\n}\n\nfunction serializeStruct(schema, obj, writer) {\n  if (typeof obj.borshSerialize === \"function\") {\n    obj.borshSerialize(writer);\n    return;\n  }\n\n  var structSchema = schema.get(obj.constructor);\n\n  if (!structSchema) {\n    throw new BorshError(\"Class \".concat(obj.constructor.name, \" is missing in schema\"));\n  }\n\n  if (structSchema.kind === \"struct\") {\n    structSchema.fields.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          fieldName = _ref2[0],\n          fieldType = _ref2[1];\n\n      serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n    });\n  } else if (structSchema.kind === \"enum\") {\n    var name = obj[structSchema.field];\n\n    for (var idx = 0; idx < structSchema.values.length; ++idx) {\n      var _structSchema$values$ = _slicedToArray(structSchema.values[idx], 2),\n          fieldName = _structSchema$values$[0],\n          fieldType = _structSchema$values$[1];\n\n      if (fieldName === name) {\n        writer.writeU8(idx);\n        serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        break;\n      }\n    }\n  } else {\n    throw new BorshError(\"Unexpected schema kind: \".concat(structSchema.kind, \" for \").concat(obj.constructor.name));\n  }\n} /// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\n\n\nfunction serialize(schema, obj) {\n  var Writer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BinaryWriter;\n  var writer = new Writer();\n  serializeStruct(schema, obj, writer);\n  return writer.toArray();\n}\n\nexports.serialize = serialize;\n\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n  try {\n    if (typeof fieldType === \"string\") {\n      return reader[\"read\".concat(capitalizeFirstLetter(fieldType))]();\n    }\n\n    if (fieldType instanceof Array) {\n      if (typeof fieldType[0] === \"number\") {\n        return reader.readFixedArray(fieldType[0]);\n      } else if (typeof fieldType[1] === \"number\") {\n        var arr = [];\n\n        for (var i = 0; i < fieldType[1]; i++) {\n          arr.push(deserializeField(schema, null, fieldType[0], reader));\n        }\n\n        return arr;\n      } else {\n        return reader.readArray(function () {\n          return deserializeField(schema, fieldName, fieldType[0], reader);\n        });\n      }\n    }\n\n    if (fieldType.kind === \"option\") {\n      var option = reader.readU8();\n\n      if (option) {\n        return deserializeField(schema, fieldName, fieldType.type, reader);\n      }\n\n      return undefined;\n    }\n\n    if (fieldType.kind === \"map\") {\n      var map = new Map();\n      var length = reader.readU32();\n\n      for (var _i = 0; _i < length; _i++) {\n        var key = deserializeField(schema, fieldName, fieldType.key, reader);\n        var val = deserializeField(schema, fieldName, fieldType.value, reader);\n        map.set(key, val);\n      }\n\n      return map;\n    }\n\n    return deserializeStruct(schema, fieldType, reader);\n  } catch (error) {\n    if (error instanceof BorshError) {\n      error.addToFieldPath(fieldName);\n    }\n\n    throw error;\n  }\n}\n\nfunction deserializeStruct(schema, classType, reader) {\n  if (typeof classType.borshDeserialize === \"function\") {\n    return classType.borshDeserialize(reader);\n  }\n\n  var structSchema = schema.get(classType);\n\n  if (!structSchema) {\n    throw new BorshError(\"Class \".concat(classType.name, \" is missing in schema\"));\n  }\n\n  if (structSchema.kind === \"struct\") {\n    var result = {};\n\n    var _iterator2 = _createForOfIteratorHelper(schema.get(classType).fields),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n            fieldName = _step2$value[0],\n            fieldType = _step2$value[1];\n\n        result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return new classType(result);\n  }\n\n  if (structSchema.kind === \"enum\") {\n    var idx = reader.readU8();\n\n    if (idx >= structSchema.values.length) {\n      throw new BorshError(\"Enum index: \".concat(idx, \" is out of range\"));\n    }\n\n    var _structSchema$values$2 = _slicedToArray(structSchema.values[idx], 2),\n        _fieldName = _structSchema$values$2[0],\n        _fieldType = _structSchema$values$2[1];\n\n    var fieldValue = deserializeField(schema, _fieldName, _fieldType, reader);\n    return new classType(_defineProperty({}, _fieldName, fieldValue));\n  }\n\n  throw new BorshError(\"Unexpected schema kind: \".concat(structSchema.kind, \" for \").concat(classType.constructor.name));\n} /// Deserializes object from bytes using schema.\n\n\nfunction deserialize(schema, classType, buffer) {\n  var Reader = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BinaryReader;\n  var reader = new Reader(buffer);\n  var result = deserializeStruct(schema, classType, reader);\n\n  if (reader.offset < buffer.length) {\n    throw new BorshError(\"Unexpected \".concat(buffer.length - reader.offset, \" bytes after deserialized data\"));\n  }\n\n  return result;\n}\n\nexports.deserialize = deserialize; /// Deserializes object from bytes using schema, without checking the length read\n\nfunction deserializeUnchecked(schema, classType, buffer) {\n  var Reader = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BinaryReader;\n  var reader = new Reader(buffer);\n  return deserializeStruct(schema, classType, reader);\n}\n\nexports.deserializeUnchecked = deserializeUnchecked;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","d","Reflect","decorate","i","__importStar","mod","__esModule","result","hasOwnProperty","call","__importDefault","exports","deserializeUnchecked","deserialize","serialize","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","require","bs58_1","encoding","ResolvedTextDecoder","TextDecoder","textDecoder","fatal","Buffer","from","default","encode","decode","INITIAL_LENGTH","message","fieldPath","originalMessage","fieldName","splice","join","Error","buf","alloc","concat","maybeResize","writeUInt8","writeUInt16LE","writeUInt32LE","writeBuffer","toArray","buffer","subarray","str","b","writeU32","array","fn","elem","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","args","apply","e","RangeError","code","indexOf","offset","readUInt8","readUInt16LE","readUInt32LE","readBuffer","len","slice","readU32","Uint8Array","Array","push","prototype","capitalizeFirstLetter","string","charAt","toUpperCase","serializeField","schema","fieldType","writer","writeFixedArray","writeArray","item","kind","writeU8","type","size","forEach","val","serializeStruct","error","addToFieldPath","obj","borshSerialize","structSchema","constructor","name","fields","map","field","idx","values","Writer","deserializeField","reader","readFixedArray","arr","readArray","option","readU8","Map","set","deserializeStruct","classType","borshDeserialize","fieldValue","Reader"],"sources":["C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/borsh/lib/index.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}