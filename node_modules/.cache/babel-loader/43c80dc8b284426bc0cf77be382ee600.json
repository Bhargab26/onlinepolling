{"ast":null,"code":"\"use strict\";\n\nimport _assertThisInitialized from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork as _getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nvar MAX_CCIP_REDIRECTS = 10; //////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n\n  return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n\n  return topics.map(function (topic) {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      var unique = {};\n      topic.forEach(function (topic) {\n        unique[checkTopic(topic)] = true;\n      }); // The order of OR-topics does not matter\n\n      var sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\n\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n\n  return data.split(/&/g).map(function (topic) {\n    if (topic === \"\") {\n      return [];\n    }\n\n    var comps = topic.split(\"|\").map(function (topic) {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n\n  throw new Error(\"invalid event - \" + eventName);\n} //////////////////////////////\n// Helper Object\n\n\nfunction getTime() {\n  return new Date().getTime();\n}\n\nfunction stall(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, duration);\n  });\n} //////////////////////////////\n// Provider Object\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\n\nvar PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport var Event = /*#__PURE__*/function () {\n  function Event(tag, listener, once) {\n    _classCallCheck(this, Event);\n\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n\n  _createClass(Event, [{\n    key: \"event\",\n    get: function get() {\n      switch (this.type) {\n        case \"tx\":\n          return this.hash;\n\n        case \"filter\":\n          return this.filter;\n      }\n\n      return this.tag;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.tag.split(\":\")[0];\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n\n      if (comps[0] !== \"tx\") {\n        return null;\n      }\n\n      return comps[1];\n    }\n  }, {\n    key: \"filter\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n\n      if (comps[0] !== \"filter\") {\n        return null;\n      }\n\n      var address = comps[1];\n      var topics = deserializeTopics(comps[2]);\n      var filter = {};\n\n      if (topics.length > 0) {\n        filter.topics = topics;\n      }\n\n      if (address && address !== \"*\") {\n        filter.address = address;\n      }\n\n      return filter;\n    }\n  }, {\n    key: \"pollable\",\n    value: function pollable() {\n      return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n    }\n  }]);\n\n  return Event;\n}();\n; // https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n\nvar coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\n\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n} // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\n\n\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nvar matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nvar matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), matcherIpfs, new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\n\nfunction _parseString(result, start) {\n  try {\n    return toUtf8String(_parseBytes(result, start));\n  } catch (error) {}\n\n  return null;\n}\n\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n\n  var offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n  var length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n  return hexDataSlice(result, offset + 32, offset + 32 + length);\n} // Trim off the ipfs:// prefix and return the default gateway URL\n\n\nfunction getIpfsLink(link) {\n  if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n    link = link.substring(12);\n  } else if (link.match(/^ipfs:\\/\\//i)) {\n    link = link.substring(7);\n  } else {\n    logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n  }\n\n  return \"https://gateway.ipfs.io/ipfs/\".concat(link);\n}\n\nfunction numPad(value) {\n  var result = arrayify(value);\n\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n\n  var padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\n\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n\n  var result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n} // ABI Encodes a series of (bytes, bytes, ...)\n\n\nfunction encodeBytes(datas) {\n  var result = [];\n  var byteCount = 0; // Add place-holders for pointers as we add items\n\n  for (var i = 0; i < datas.length; i++) {\n    result.push(null);\n    byteCount += 32;\n  }\n\n  for (var _i = 0; _i < datas.length; _i++) {\n    var data = arrayify(datas[_i]); // Update the bytes offset\n\n    result[_i] = numPad(byteCount); // The length and padded value of data\n\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n\n  return hexConcat(result);\n}\n\nexport var Resolver = /*#__PURE__*/function () {\n  // The resolvedAddress is only for creating a ReverseLookup resolver\n  function Resolver(provider, address, name, resolvedAddress) {\n    _classCallCheck(this, Resolver);\n\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n    defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n  }\n\n  _createClass(Resolver, [{\n    key: \"supportsWildcard\",\n    value: function supportsWildcard() {\n      var _this = this;\n\n      if (!this._supportsEip2544) {\n        // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n        this._supportsEip2544 = this.provider.call({\n          to: this.address,\n          data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n        }).then(function (result) {\n          return BigNumber.from(result).eq(1);\n        }).catch(function (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return false;\n          } // Rethrow the error: link is down, etc. Let future attempts retry.\n\n\n          _this._supportsEip2544 = null;\n          throw error;\n        });\n      }\n\n      return this._supportsEip2544;\n    }\n  }, {\n    key: \"_fetch\",\n    value: function _fetch(selector, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var tx, parseBytes, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // e.g. keccak256(\"addr(bytes32,uint256)\")\n                tx = {\n                  to: this.address,\n                  ccipReadEnabled: true,\n                  data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n                }; // Wildcard support; use EIP-2544 to resolve the request\n\n                parseBytes = false;\n                _context.next = 4;\n                return this.supportsWildcard();\n\n              case 4:\n                if (!_context.sent) {\n                  _context.next = 7;\n                  break;\n                }\n\n                parseBytes = true; // selector(\"resolve(bytes,bytes)\")\n\n                tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n\n              case 7:\n                _context.prev = 7;\n                _context.next = 10;\n                return this.provider.call(tx);\n\n              case 10:\n                result = _context.sent;\n\n                if (arrayify(result).length % 32 === 4) {\n                  logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                    transaction: tx,\n                    data: result\n                  });\n                }\n\n                if (parseBytes) {\n                  result = _parseBytes(result, 0);\n                }\n\n                return _context.abrupt(\"return\", result);\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](7);\n\n                if (!(_context.t0.code === Logger.errors.CALL_EXCEPTION)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", null);\n\n              case 20:\n                throw _context.t0;\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[7, 16]]);\n      }));\n    }\n  }, {\n    key: \"_fetchBytes\",\n    value: function _fetchBytes(selector, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._fetch(selector, parameters);\n\n              case 2:\n                result = _context2.sent;\n\n                if (!(result != null)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _parseBytes(result, 0));\n\n              case 5:\n                return _context2.abrupt(\"return\", null);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(coinType, hexBytes) {\n      var coinInfo = coinInfos[String(coinType)];\n\n      if (coinInfo == null) {\n        logger.throwError(\"unsupported coin type: \".concat(coinType), Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress(\".concat(coinType, \")\")\n        });\n      }\n\n      if (coinInfo.ilk === \"eth\") {\n        return this.provider.formatter.address(hexBytes);\n      }\n\n      var bytes = arrayify(hexBytes); // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n\n      if (coinInfo.p2pkh != null) {\n        var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n\n        if (p2pkh) {\n          var length = parseInt(p2pkh[1], 16);\n\n          if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n            return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n          }\n        }\n      } // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n\n\n      if (coinInfo.p2sh != null) {\n        var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n\n        if (p2sh) {\n          var _length = parseInt(p2sh[1], 16);\n\n          if (p2sh[2].length === _length * 2 && _length >= 1 && _length <= 75) {\n            return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n          }\n        }\n      } // Bech32\n\n\n      if (coinInfo.prefix != null) {\n        var _length2 = bytes[1]; // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n\n        var _version = bytes[0];\n\n        if (_version === 0x00) {\n          if (_length2 !== 20 && _length2 !== 32) {\n            _version = -1;\n          }\n        } else {\n          _version = -1;\n        }\n\n        if (_version >= 0 && bytes.length === 2 + _length2 && _length2 >= 1 && _length2 <= 75) {\n          var words = bech32.toWords(bytes.slice(2));\n          words.unshift(_version);\n          return bech32.encode(coinInfo.prefix, words);\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(coinType) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var result, hexBytes, address;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (coinType == null) {\n                  coinType = 60;\n                } // If Ethereum, use the standard `addr(bytes32)`\n\n\n                if (!(coinType === 60)) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                _context3.prev = 2;\n                _context3.next = 5;\n                return this._fetch(\"0x3b3b57de\");\n\n              case 5:\n                result = _context3.sent;\n\n                if (!(result === \"0x\" || result === HashZero)) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 8:\n                return _context3.abrupt(\"return\", this.provider.formatter.callAddress(result));\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](2);\n\n                if (!(_context3.t0.code === Logger.errors.CALL_EXCEPTION)) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 15:\n                throw _context3.t0;\n\n              case 16:\n                _context3.next = 18;\n                return this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n              case 18:\n                hexBytes = _context3.sent;\n\n                if (!(hexBytes == null || hexBytes === \"0x\")) {\n                  _context3.next = 21;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 21:\n                // Compute the address\n                address = this._getAddress(coinType, hexBytes);\n\n                if (address == null) {\n                  logger.throwError(\"invalid or unsupported coin data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress(\".concat(coinType, \")\"),\n                    coinType: coinType,\n                    data: hexBytes\n                  });\n                }\n\n                return _context3.abrupt(\"return\", address);\n\n              case 24:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 11]]);\n      }));\n    }\n  }, {\n    key: \"getAvatar\",\n    value: function getAvatar() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var linkage, avatar, i, match, scheme, selector, owner, comps, addr, tokenId, tokenOwner, balance, tx, metadataUrl, metadata, imageUrl, ipfs;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                linkage = [{\n                  type: \"name\",\n                  content: this.name\n                }];\n                _context4.prev = 1;\n                _context4.next = 4;\n                return this.getText(\"avatar\");\n\n              case 4:\n                avatar = _context4.sent;\n\n                if (!(avatar == null)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 7:\n                i = 0;\n\n              case 8:\n                if (!(i < matchers.length)) {\n                  _context4.next = 91;\n                  break;\n                }\n\n                match = avatar.match(matchers[i]);\n\n                if (!(match == null)) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                return _context4.abrupt(\"continue\", 88);\n\n              case 12:\n                scheme = match[1].toLowerCase();\n                _context4.t0 = scheme;\n                _context4.next = _context4.t0 === \"https\" ? 16 : _context4.t0 === \"data\" ? 18 : _context4.t0 === \"ipfs\" ? 20 : _context4.t0 === \"erc721\" ? 22 : _context4.t0 === \"erc1155\" ? 22 : 88;\n                break;\n\n              case 16:\n                linkage.push({\n                  type: \"url\",\n                  content: avatar\n                });\n                return _context4.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: avatar\n                });\n\n              case 18:\n                linkage.push({\n                  type: \"data\",\n                  content: avatar\n                });\n                return _context4.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: avatar\n                });\n\n              case 20:\n                linkage.push({\n                  type: \"ipfs\",\n                  content: avatar\n                });\n                return _context4.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: getIpfsLink(avatar)\n                });\n\n              case 22:\n                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                linkage.push({\n                  type: scheme,\n                  content: avatar\n                }); // The owner of this name\n\n                _context4.t1 = this._resolvedAddress;\n\n                if (_context4.t1) {\n                  _context4.next = 29;\n                  break;\n                }\n\n                _context4.next = 28;\n                return this.getAddress();\n\n              case 28:\n                _context4.t1 = _context4.sent;\n\n              case 29:\n                owner = _context4.t1;\n                comps = (match[2] || \"\").split(\"/\");\n\n                if (!(comps.length !== 2)) {\n                  _context4.next = 33;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 33:\n                _context4.next = 35;\n                return this.provider.formatter.address(comps[0]);\n\n              case 35:\n                addr = _context4.sent;\n                tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32); // Check that this account owns the token\n\n                if (!(scheme === \"erc721\")) {\n                  _context4.next = 48;\n                  break;\n                }\n\n                _context4.t2 = this.provider.formatter;\n                _context4.next = 41;\n                return this.provider.call({\n                  to: addr,\n                  data: hexConcat([\"0x6352211e\", tokenId])\n                });\n\n              case 41:\n                _context4.t3 = _context4.sent;\n                tokenOwner = _context4.t2.callAddress.call(_context4.t2, _context4.t3);\n\n                if (!(owner !== tokenOwner)) {\n                  _context4.next = 45;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 45:\n                linkage.push({\n                  type: \"owner\",\n                  content: tokenOwner\n                });\n                _context4.next = 57;\n                break;\n\n              case 48:\n                if (!(scheme === \"erc1155\")) {\n                  _context4.next = 57;\n                  break;\n                }\n\n                _context4.t4 = BigNumber;\n                _context4.next = 52;\n                return this.provider.call({\n                  to: addr,\n                  data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                });\n\n              case 52:\n                _context4.t5 = _context4.sent;\n                balance = _context4.t4.from.call(_context4.t4, _context4.t5);\n\n                if (!balance.isZero()) {\n                  _context4.next = 56;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 56:\n                linkage.push({\n                  type: \"balance\",\n                  content: balance.toString()\n                });\n\n              case 57:\n                // Call the token contract for the metadata URL\n                tx = {\n                  to: this.provider.formatter.address(comps[0]),\n                  data: hexConcat([selector, tokenId])\n                };\n                _context4.t6 = _parseString;\n                _context4.next = 61;\n                return this.provider.call(tx);\n\n              case 61:\n                _context4.t7 = _context4.sent;\n                metadataUrl = (0, _context4.t6)(_context4.t7, 0);\n\n                if (!(metadataUrl == null)) {\n                  _context4.next = 65;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 65:\n                linkage.push({\n                  type: \"metadata-url-base\",\n                  content: metadataUrl\n                }); // ERC-1155 allows a generic {id} in the URL\n\n                if (scheme === \"erc1155\") {\n                  metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                  linkage.push({\n                    type: \"metadata-url-expanded\",\n                    content: metadataUrl\n                  });\n                } // Transform IPFS metadata links\n\n\n                if (metadataUrl.match(/^ipfs:/i)) {\n                  metadataUrl = getIpfsLink(metadataUrl);\n                }\n\n                linkage.push({\n                  type: \"metadata-url\",\n                  content: metadataUrl\n                }); // Get the token metadata\n\n                _context4.next = 71;\n                return fetchJson(metadataUrl);\n\n              case 71:\n                metadata = _context4.sent;\n\n                if (metadata) {\n                  _context4.next = 74;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 74:\n                linkage.push({\n                  type: \"metadata\",\n                  content: JSON.stringify(metadata)\n                }); // Pull the image URL out\n\n                imageUrl = metadata.image;\n\n                if (!(typeof imageUrl !== \"string\")) {\n                  _context4.next = 78;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 78:\n                if (!imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                  _context4.next = 81;\n                  break;\n                }\n\n                _context4.next = 86;\n                break;\n\n              case 81:\n                // Transform IPFS link to gateway\n                ipfs = imageUrl.match(matcherIpfs);\n\n                if (!(ipfs == null)) {\n                  _context4.next = 84;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 84:\n                linkage.push({\n                  type: \"url-ipfs\",\n                  content: imageUrl\n                });\n                imageUrl = getIpfsLink(imageUrl);\n\n              case 86:\n                linkage.push({\n                  type: \"url\",\n                  content: imageUrl\n                });\n                return _context4.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: imageUrl\n                });\n\n              case 88:\n                i++;\n                _context4.next = 8;\n                break;\n\n              case 91:\n                _context4.next = 95;\n                break;\n\n              case 93:\n                _context4.prev = 93;\n                _context4.t8 = _context4[\"catch\"](1);\n\n              case 95:\n                return _context4.abrupt(\"return\", null);\n\n              case 96:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 93]]);\n      }));\n    }\n  }, {\n    key: \"getContentHash\",\n    value: function getContentHash() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var hexBytes, ipfs, length, swarm;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._fetchBytes(\"0xbc1c58d1\");\n\n              case 2:\n                hexBytes = _context5.sent;\n\n                if (!(hexBytes == null || hexBytes === \"0x\")) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", null);\n\n              case 5:\n                // IPFS (CID: 1, Type: DAG-PB)\n                ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n                if (!ipfs) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                length = parseInt(ipfs[3], 16);\n\n                if (!(ipfs[4].length === length * 2)) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]));\n\n              case 10:\n                // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n                swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n\n                if (!swarm) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                if (!(swarm[1].length === 32 * 2)) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", \"bzz:/\\/\" + swarm[1]);\n\n              case 14:\n                return _context5.abrupt(\"return\", logger.throwError(\"invalid or unsupported content hash data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"getContentHash()\",\n                  data: hexBytes\n                }));\n\n              case 15:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"getText\",\n    value: function getText(key) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var keyBytes, hexBytes;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                // The key encoded as parameter to fetchBytes\n                keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n                // offset 64, with the length at offset 64 and data starting at offset 96\n\n                keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]); // Pad to word-size (32 bytes)\n\n                if (keyBytes.length % 32 !== 0) {\n                  keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n                }\n\n                _context6.next = 5;\n                return this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n\n              case 5:\n                hexBytes = _context6.sent;\n\n                if (!(hexBytes == null || hexBytes === \"0x\")) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", null);\n\n              case 8:\n                return _context6.abrupt(\"return\", toUtf8String(hexBytes));\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }]);\n\n  return Resolver;\n}();\nvar defaultFormatter = null;\nvar nextPollId = 1;\nexport var BaseProvider = /*#__PURE__*/function (_Provider) {\n  _inherits(BaseProvider, _Provider);\n\n  var _super = _createSuper(BaseProvider);\n\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  function BaseProvider(network) {\n    var _this2;\n\n    _classCallCheck(this, BaseProvider);\n\n    logger.checkNew(this instanceof BaseProvider ? this.constructor : void 0, Provider);\n    _this2 = _super.call(this); // Events being listened to\n\n    _this2._events = [];\n    _this2._emitted = {\n      block: -2\n    };\n    _this2.disableCcipRead = false;\n    _this2.formatter = (this instanceof BaseProvider ? this.constructor : void 0).getFormatter(); // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n\n    defineReadOnly(_assertThisInitialized(_this2), \"anyNetwork\", network === \"any\");\n\n    if (_this2.anyNetwork) {\n      network = _this2.detectNetwork();\n    }\n\n    if (network instanceof Promise) {\n      _this2._networkPromise = network; // Squash any \"unhandled promise\" errors; that do not need to be handled\n\n      network.catch(function (error) {}); // Trigger initial network setting (async)\n\n      _this2._ready().catch(function (error) {});\n    } else {\n      var knownNetwork = getStatic(this instanceof BaseProvider ? this.constructor : void 0, \"getNetwork\")(network);\n\n      if (knownNetwork) {\n        defineReadOnly(_assertThisInitialized(_this2), \"_network\", knownNetwork);\n\n        _this2.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n\n    _this2._maxInternalBlockNumber = -1024;\n    _this2._lastBlockNumber = -2;\n    _this2._maxFilterBlockRange = 10;\n    _this2._pollingInterval = 4000;\n    _this2._fastQueryDate = 0;\n    return _this2;\n  }\n\n  _createClass(BaseProvider, [{\n    key: \"_ready\",\n    value: function _ready() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var network;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(this._network == null)) {\n                  _context7.next = 17;\n                  break;\n                }\n\n                network = null;\n\n                if (!this._networkPromise) {\n                  _context7.next = 11;\n                  break;\n                }\n\n                _context7.prev = 3;\n                _context7.next = 6;\n                return this._networkPromise;\n\n              case 6:\n                network = _context7.sent;\n                _context7.next = 11;\n                break;\n\n              case 9:\n                _context7.prev = 9;\n                _context7.t0 = _context7[\"catch\"](3);\n\n              case 11:\n                if (!(network == null)) {\n                  _context7.next = 15;\n                  break;\n                }\n\n                _context7.next = 14;\n                return this.detectNetwork();\n\n              case 14:\n                network = _context7.sent;\n\n              case 15:\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                  logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                } // Possible this call stacked so do not call defineReadOnly again\n\n\n                if (this._network == null) {\n                  if (this.anyNetwork) {\n                    this._network = network;\n                  } else {\n                    defineReadOnly(this, \"_network\", network);\n                  }\n\n                  this.emit(\"network\", network, null);\n                }\n\n              case 17:\n                return _context7.abrupt(\"return\", this._network);\n\n              case 18:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[3, 9]]);\n      }));\n    } // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n\n  }, {\n    key: \"ready\",\n    get: function get() {\n      var _this3 = this;\n\n      return poll(function () {\n        return _this3._ready().then(function (network) {\n          return network;\n        }, function (error) {\n          // If the network isn't running yet, we will wait\n          if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n            return undefined;\n          }\n\n          throw error;\n        });\n      });\n    } // @TODO: Remove this and just create a singleton formatter\n\n  }, {\n    key: \"ccipReadFetch\",\n    value: function ccipReadFetch(tx, calldata, urls) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var sender, data, errorMessages, i, url, href, json, result, errorMessage;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(this.disableCcipRead || urls.length === 0)) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", null);\n\n              case 2:\n                sender = (tx.from || \"0x0000000000000000000000000000000000000000\").toLowerCase();\n                data = calldata.toLowerCase();\n                errorMessages = [];\n                i = 0;\n\n              case 6:\n                if (!(i < urls.length)) {\n                  _context8.next = 22;\n                  break;\n                }\n\n                url = urls[i]; // URL expansion\n\n                href = url.replace(\"{sender}\", sender).replace(\"{data}\", data); // If no {data} is present, use POST; otherwise GET\n\n                json = url.indexOf(\"{data}\") >= 0 ? null : JSON.stringify({\n                  data: data,\n                  sender: sender\n                });\n                _context8.next = 12;\n                return fetchJson({\n                  url: href,\n                  errorPassThrough: true\n                }, json, function (value, response) {\n                  value.status = response.statusCode;\n                  return value;\n                });\n\n              case 12:\n                result = _context8.sent;\n\n                if (!result.data) {\n                  _context8.next = 15;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", result.data);\n\n              case 15:\n                errorMessage = result.message || \"unknown error\"; // 4xx indicates the result is not present; stop\n\n                if (!(result.status >= 400 && result.status < 500)) {\n                  _context8.next = 18;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", logger.throwError(\"response not found during CCIP fetch: \".concat(errorMessage), Logger.errors.SERVER_ERROR, {\n                  url: url,\n                  errorMessage: errorMessage\n                }));\n\n              case 18:\n                // 5xx indicates server issue; try the next url\n                errorMessages.push(errorMessage);\n\n              case 19:\n                i++;\n                _context8.next = 6;\n                break;\n\n              case 22:\n                return _context8.abrupt(\"return\", logger.throwError(\"error encountered during CCIP fetch: \".concat(errorMessages.map(function (m) {\n                  return JSON.stringify(m);\n                }).join(\", \")), Logger.errors.SERVER_ERROR, {\n                  urls: urls,\n                  errorMessages: errorMessages\n                }));\n\n              case 23:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    } // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n\n  }, {\n    key: \"_getInternalBlockNumber\",\n    value: function _getInternalBlockNumber(maxAge) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _this4 = this;\n\n        var internalBlockNumber, result, reqTime, checkInternalBlockNumber;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this._ready();\n\n              case 2:\n                if (!(maxAge > 0)) {\n                  _context9.next = 20;\n                  break;\n                }\n\n              case 3:\n                if (!this._internalBlockNumber) {\n                  _context9.next = 20;\n                  break;\n                }\n\n                // ...\"remember\" which fetch we started with\n                internalBlockNumber = this._internalBlockNumber;\n                _context9.prev = 5;\n                _context9.next = 8;\n                return internalBlockNumber;\n\n              case 8:\n                result = _context9.sent;\n\n                if (!(getTime() - result.respTime <= maxAge)) {\n                  _context9.next = 11;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", result.blockNumber);\n\n              case 11:\n                return _context9.abrupt(\"break\", 20);\n\n              case 14:\n                _context9.prev = 14;\n                _context9.t0 = _context9[\"catch\"](5);\n\n                if (!(this._internalBlockNumber === internalBlockNumber)) {\n                  _context9.next = 18;\n                  break;\n                }\n\n                return _context9.abrupt(\"break\", 20);\n\n              case 18:\n                _context9.next = 3;\n                break;\n\n              case 20:\n                reqTime = getTime();\n                checkInternalBlockNumber = resolveProperties({\n                  blockNumber: this.perform(\"getBlockNumber\", {}),\n                  networkError: this.getNetwork().then(function (network) {\n                    return null;\n                  }, function (error) {\n                    return error;\n                  })\n                }).then(function (_ref) {\n                  var blockNumber = _ref.blockNumber,\n                      networkError = _ref.networkError;\n\n                  if (networkError) {\n                    // Unremember this bad internal block number\n                    if (_this4._internalBlockNumber === checkInternalBlockNumber) {\n                      _this4._internalBlockNumber = null;\n                    }\n\n                    throw networkError;\n                  }\n\n                  var respTime = getTime();\n                  blockNumber = BigNumber.from(blockNumber).toNumber();\n\n                  if (blockNumber < _this4._maxInternalBlockNumber) {\n                    blockNumber = _this4._maxInternalBlockNumber;\n                  }\n\n                  _this4._maxInternalBlockNumber = blockNumber;\n\n                  _this4._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\n\n                  return {\n                    blockNumber: blockNumber,\n                    reqTime: reqTime,\n                    respTime: respTime\n                  };\n                });\n                this._internalBlockNumber = checkInternalBlockNumber; // Swallow unhandled exceptions; if needed they are handled else where\n\n                checkInternalBlockNumber.catch(function (error) {\n                  // Don't null the dead (rejected) fetch, if it has already been updated\n                  if (_this4._internalBlockNumber === checkInternalBlockNumber) {\n                    _this4._internalBlockNumber = null;\n                  }\n                });\n                _context9.next = 26;\n                return checkInternalBlockNumber;\n\n              case 26:\n                return _context9.abrupt(\"return\", _context9.sent.blockNumber);\n\n              case 27:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[5, 14]]);\n      }));\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var _this5 = this;\n\n        var pollId, runners, blockNumber, i;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n\n                runners = [];\n                blockNumber = null;\n                _context10.prev = 3;\n                _context10.next = 6;\n                return this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n\n              case 6:\n                blockNumber = _context10.sent;\n                _context10.next = 13;\n                break;\n\n              case 9:\n                _context10.prev = 9;\n                _context10.t0 = _context10[\"catch\"](3);\n                this.emit(\"error\", _context10.t0);\n                return _context10.abrupt(\"return\");\n\n              case 13:\n                this._setFastBlockNumber(blockNumber); // Emit a poll event after we have the latest (fast) block number\n\n\n                this.emit(\"poll\", pollId, blockNumber); // If the block has not changed, meh.\n\n                if (!(blockNumber === this._lastBlockNumber)) {\n                  _context10.next = 18;\n                  break;\n                }\n\n                this.emit(\"didPoll\", pollId);\n                return _context10.abrupt(\"return\");\n\n              case 18:\n                // First polling cycle, trigger a \"block\" events\n                if (this._emitted.block === -2) {\n                  this._emitted.block = blockNumber - 1;\n                }\n\n                if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n                  logger.warn(\"network block skew detected; skipping block events (emitted=\".concat(this._emitted.block, \" blockNumber\").concat(blockNumber, \")\"));\n                  this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                  }));\n                  this.emit(\"block\", blockNumber);\n                } else {\n                  // Notify all listener for each block that has passed\n                  for (i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                  }\n                } // The emitted block was updated, check for obsolete events\n\n\n                if (this._emitted.block !== blockNumber) {\n                  this._emitted.block = blockNumber;\n                  Object.keys(this._emitted).forEach(function (key) {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                      return;\n                    } // The block we were at when we emitted this event\n\n\n                    var eventBlockNumber = _this5._emitted[key]; // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n\n                    if (eventBlockNumber === \"pending\") {\n                      return;\n                    } // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n\n\n                    if (blockNumber - eventBlockNumber > 12) {\n                      delete _this5._emitted[key];\n                    }\n                  });\n                } // First polling cycle\n\n\n                if (this._lastBlockNumber === -2) {\n                  this._lastBlockNumber = blockNumber - 1;\n                } // Find all transaction hashes we are waiting on\n\n\n                this._events.forEach(function (event) {\n                  switch (event.type) {\n                    case \"tx\":\n                      {\n                        var hash = event.hash;\n\n                        var runner = _this5.getTransactionReceipt(hash).then(function (receipt) {\n                          if (!receipt || receipt.blockNumber == null) {\n                            return null;\n                          }\n\n                          _this5._emitted[\"t:\" + hash] = receipt.blockNumber;\n\n                          _this5.emit(hash, receipt);\n\n                          return null;\n                        }).catch(function (error) {\n                          _this5.emit(\"error\", error);\n                        });\n\n                        runners.push(runner);\n                        break;\n                      }\n\n                    case \"filter\":\n                      {\n                        // We only allow a single getLogs to be in-flight at a time\n                        if (!event._inflight) {\n                          event._inflight = true; // Filter from the last known event; due to load-balancing\n                          // and some nodes returning updated block numbers before\n                          // indexing events, a logs result with 0 entries cannot be\n                          // trusted and we must retry a range which includes it again\n\n                          var filter = event.filter;\n                          filter.fromBlock = event._lastBlockNumber + 1;\n                          filter.toBlock = blockNumber; // Prevent fitler ranges from growing too wild\n\n                          if (filter.toBlock - _this5._maxFilterBlockRange > filter.fromBlock) {\n                            filter.fromBlock = filter.toBlock - _this5._maxFilterBlockRange;\n                          }\n\n                          var _runner = _this5.getLogs(filter).then(function (logs) {\n                            // Allow the next getLogs\n                            event._inflight = false;\n\n                            if (logs.length === 0) {\n                              return;\n                            }\n\n                            logs.forEach(function (log) {\n                              // Only when we get an event for a given block number\n                              // can we trust the events are indexed\n                              if (log.blockNumber > event._lastBlockNumber) {\n                                event._lastBlockNumber = log.blockNumber;\n                              } // Make sure we stall requests to fetch blocks and txs\n\n\n                              _this5._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                              _this5._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                              _this5.emit(filter, log);\n                            });\n                          }).catch(function (error) {\n                            _this5.emit(\"error\", error); // Allow another getLogs (the range was not updated)\n\n\n                            event._inflight = false;\n                          });\n\n                          runners.push(_runner);\n                        }\n\n                        break;\n                      }\n                  }\n                });\n\n                this._lastBlockNumber = blockNumber; // Once all events for this loop have been processed, emit \"didPoll\"\n\n                Promise.all(runners).then(function () {\n                  _this5.emit(\"didPoll\", pollId);\n                }).catch(function (error) {\n                  _this5.emit(\"error\", error);\n                });\n                return _context10.abrupt(\"return\");\n\n              case 26:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[3, 9]]);\n      }));\n    } // Deprecated; do not use this\n\n  }, {\n    key: \"resetEventsBlock\",\n    value: function resetEventsBlock(blockNumber) {\n      this._lastBlockNumber = blockNumber - 1;\n\n      if (this.polling) {\n        this.poll();\n      }\n    }\n  }, {\n    key: \"network\",\n    get: function get() {\n      return this._network;\n    } // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n\n  }, {\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"provider.detectNetwork\"\n                }));\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n    }\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var network, currentNetwork, error;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this._ready();\n\n              case 2:\n                network = _context12.sent;\n                _context12.next = 5;\n                return this.detectNetwork();\n\n              case 5:\n                currentNetwork = _context12.sent;\n\n                if (!(network.chainId !== currentNetwork.chainId)) {\n                  _context12.next = 23;\n                  break;\n                }\n\n                if (!this.anyNetwork) {\n                  _context12.next = 20;\n                  break;\n                }\n\n                this._network = currentNetwork; // Reset all internal block number guards and caches\n\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null; // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n\n                this.emit(\"network\", currentNetwork, network);\n                _context12.next = 19;\n                return stall(0);\n\n              case 19:\n                return _context12.abrupt(\"return\", this._network);\n\n              case 20:\n                error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                  event: \"changed\",\n                  network: network,\n                  detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n\n              case 23:\n                return _context12.abrupt(\"return\", network);\n\n              case 24:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n    }\n  }, {\n    key: \"blockNumber\",\n    get: function get() {\n      var _this6 = this;\n\n      this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {\n        _this6._setFastBlockNumber(blockNumber);\n      }, function (error) {});\n\n      return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n    }\n  }, {\n    key: \"polling\",\n    get: function get() {\n      return this._poller != null;\n    },\n    set: function set(value) {\n      var _this7 = this;\n\n      if (value && !this._poller) {\n        this._poller = setInterval(function () {\n          _this7.poll();\n        }, this.pollingInterval);\n\n        if (!this._bootstrapPoll) {\n          this._bootstrapPoll = setTimeout(function () {\n            _this7.poll(); // We block additional polls until the polling interval\n            // is done, to prevent overwhelming the poll function\n\n\n            _this7._bootstrapPoll = setTimeout(function () {\n              // If polling was disabled, something may require a poke\n              // since starting the bootstrap poll and it was disabled\n              if (!_this7._poller) {\n                _this7.poll();\n              } // Clear out the bootstrap so we can do another\n\n\n              _this7._bootstrapPoll = null;\n            }, _this7.pollingInterval);\n          }, 0);\n        }\n      } else if (!value && this._poller) {\n        clearInterval(this._poller);\n        this._poller = null;\n      }\n    }\n  }, {\n    key: \"pollingInterval\",\n    get: function get() {\n      return this._pollingInterval;\n    },\n    set: function set(value) {\n      var _this8 = this;\n\n      if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n        throw new Error(\"invalid polling interval\");\n      }\n\n      this._pollingInterval = value;\n\n      if (this._poller) {\n        clearInterval(this._poller);\n        this._poller = setInterval(function () {\n          _this8.poll();\n        }, this._pollingInterval);\n      }\n    }\n  }, {\n    key: \"_getFastBlockNumber\",\n    value: function _getFastBlockNumber() {\n      var _this9 = this;\n\n      var now = getTime(); // Stale block number, request a newer value\n\n      if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n        this._fastQueryDate = now;\n        this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {\n          if (_this9._fastBlockNumber == null || blockNumber > _this9._fastBlockNumber) {\n            _this9._fastBlockNumber = blockNumber;\n          }\n\n          return _this9._fastBlockNumber;\n        });\n      }\n\n      return this._fastBlockNumberPromise;\n    }\n  }, {\n    key: \"_setFastBlockNumber\",\n    value: function _setFastBlockNumber(blockNumber) {\n      // Older block, maybe a stale request\n      if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n        return;\n      } // Update the time we updated the blocknumber\n\n\n      this._fastQueryDate = getTime(); // Newer block number, use  it\n\n      if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n        this._fastBlockNumber = blockNumber;\n        this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n      }\n    }\n  }, {\n    key: \"waitForTransaction\",\n    value: function waitForTransaction(transactionHash, confirmations, timeout) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                return _context13.abrupt(\"return\", this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null));\n\n              case 1:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n    }\n  }, {\n    key: \"_waitForTransaction\",\n    value: function _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n        var _this10 = this;\n\n        var receipt;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.getTransactionReceipt(transactionHash);\n\n              case 2:\n                receipt = _context16.sent;\n\n                if (!((receipt ? receipt.confirmations : 0) >= confirmations)) {\n                  _context16.next = 5;\n                  break;\n                }\n\n                return _context16.abrupt(\"return\", receipt);\n\n              case 5:\n                return _context16.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var cancelFuncs = [];\n                  var done = false;\n\n                  var alreadyDone = function alreadyDone() {\n                    if (done) {\n                      return true;\n                    }\n\n                    done = true;\n                    cancelFuncs.forEach(function (func) {\n                      func();\n                    });\n                    return false;\n                  };\n\n                  var minedHandler = function minedHandler(receipt) {\n                    if (receipt.confirmations < confirmations) {\n                      return;\n                    }\n\n                    if (alreadyDone()) {\n                      return;\n                    }\n\n                    resolve(receipt);\n                  };\n\n                  _this10.on(transactionHash, minedHandler);\n\n                  cancelFuncs.push(function () {\n                    _this10.removeListener(transactionHash, minedHandler);\n                  });\n\n                  if (replaceable) {\n                    var lastBlockNumber = replaceable.startBlock;\n                    var scannedBlock = null;\n\n                    var replaceHandler = function replaceHandler(blockNumber) {\n                      return __awaiter(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n                        var _this11 = this;\n\n                        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n                          while (1) {\n                            switch (_context15.prev = _context15.next) {\n                              case 0:\n                                if (!done) {\n                                  _context15.next = 2;\n                                  break;\n                                }\n\n                                return _context15.abrupt(\"return\");\n\n                              case 2:\n                                _context15.next = 4;\n                                return stall(1000);\n\n                              case 4:\n                                this.getTransactionCount(replaceable.from).then(function (nonce) {\n                                  return __awaiter(_this11, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n                                    var mined, block, ti, tx, _receipt, reason;\n\n                                    return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n                                      while (1) {\n                                        switch (_context14.prev = _context14.next) {\n                                          case 0:\n                                            if (!done) {\n                                              _context14.next = 2;\n                                              break;\n                                            }\n\n                                            return _context14.abrupt(\"return\");\n\n                                          case 2:\n                                            if (!(nonce <= replaceable.nonce)) {\n                                              _context14.next = 6;\n                                              break;\n                                            }\n\n                                            lastBlockNumber = blockNumber;\n                                            _context14.next = 41;\n                                            break;\n\n                                          case 6:\n                                            _context14.next = 8;\n                                            return this.getTransaction(transactionHash);\n\n                                          case 8:\n                                            mined = _context14.sent;\n\n                                            if (!(mined && mined.blockNumber != null)) {\n                                              _context14.next = 11;\n                                              break;\n                                            }\n\n                                            return _context14.abrupt(\"return\");\n\n                                          case 11:\n                                            // First time scanning. We start a little earlier for some\n                                            // wiggle room here to handle the eventually consistent nature\n                                            // of blockchain (e.g. the getTransactionCount was for a\n                                            // different block)\n                                            if (scannedBlock == null) {\n                                              scannedBlock = lastBlockNumber - 3;\n\n                                              if (scannedBlock < replaceable.startBlock) {\n                                                scannedBlock = replaceable.startBlock;\n                                              }\n                                            }\n\n                                          case 12:\n                                            if (!(scannedBlock <= blockNumber)) {\n                                              _context14.next = 41;\n                                              break;\n                                            }\n\n                                            if (!done) {\n                                              _context14.next = 15;\n                                              break;\n                                            }\n\n                                            return _context14.abrupt(\"return\");\n\n                                          case 15:\n                                            _context14.next = 17;\n                                            return this.getBlockWithTransactions(scannedBlock);\n\n                                          case 17:\n                                            block = _context14.sent;\n                                            ti = 0;\n\n                                          case 19:\n                                            if (!(ti < block.transactions.length)) {\n                                              _context14.next = 38;\n                                              break;\n                                            }\n\n                                            tx = block.transactions[ti]; // Successfully mined!\n\n                                            if (!(tx.hash === transactionHash)) {\n                                              _context14.next = 23;\n                                              break;\n                                            }\n\n                                            return _context14.abrupt(\"return\");\n\n                                          case 23:\n                                            if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce)) {\n                                              _context14.next = 35;\n                                              break;\n                                            }\n\n                                            if (!done) {\n                                              _context14.next = 26;\n                                              break;\n                                            }\n\n                                            return _context14.abrupt(\"return\");\n\n                                          case 26:\n                                            _context14.next = 28;\n                                            return this.waitForTransaction(tx.hash, confirmations);\n\n                                          case 28:\n                                            _receipt = _context14.sent;\n\n                                            if (!alreadyDone()) {\n                                              _context14.next = 31;\n                                              break;\n                                            }\n\n                                            return _context14.abrupt(\"return\");\n\n                                          case 31:\n                                            // The reason we were replaced\n                                            reason = \"replaced\";\n\n                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                              reason = \"repriced\";\n                                            } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                              reason = \"cancelled\";\n                                            } // Explain why we were replaced\n\n\n                                            reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                              cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                                              reason: reason,\n                                              replacement: this._wrapTransaction(tx),\n                                              hash: transactionHash,\n                                              receipt: _receipt\n                                            }));\n                                            return _context14.abrupt(\"return\");\n\n                                          case 35:\n                                            ti++;\n                                            _context14.next = 19;\n                                            break;\n\n                                          case 38:\n                                            scannedBlock++;\n                                            _context14.next = 12;\n                                            break;\n\n                                          case 41:\n                                            if (!done) {\n                                              _context14.next = 43;\n                                              break;\n                                            }\n\n                                            return _context14.abrupt(\"return\");\n\n                                          case 43:\n                                            this.once(\"block\", replaceHandler);\n\n                                          case 44:\n                                          case \"end\":\n                                            return _context14.stop();\n                                        }\n                                      }\n                                    }, _callee14, this);\n                                  }));\n                                }, function (error) {\n                                  if (done) {\n                                    return;\n                                  }\n\n                                  _this11.once(\"block\", replaceHandler);\n                                });\n\n                              case 5:\n                              case \"end\":\n                                return _context15.stop();\n                            }\n                          }\n                        }, _callee15, this);\n                      }));\n                    };\n\n                    if (done) {\n                      return;\n                    }\n\n                    _this10.once(\"block\", replaceHandler);\n\n                    cancelFuncs.push(function () {\n                      _this10.removeListener(\"block\", replaceHandler);\n                    });\n                  }\n\n                  if (typeof timeout === \"number\" && timeout > 0) {\n                    var timer = setTimeout(function () {\n                      if (alreadyDone()) {\n                        return;\n                      }\n\n                      reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n                        timeout: timeout\n                      }));\n                    }, timeout);\n\n                    if (timer.unref) {\n                      timer.unref();\n                    }\n\n                    cancelFuncs.push(function () {\n                      clearTimeout(timer);\n                    });\n                  }\n                }));\n\n              case 6:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n    }\n  }, {\n    key: \"getBlockNumber\",\n    value: function getBlockNumber() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                return _context17.abrupt(\"return\", this._getInternalBlockNumber(0));\n\n              case 1:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context18.next = 4;\n                return this.perform(\"getGasPrice\", {});\n\n              case 4:\n                result = _context18.sent;\n                _context18.prev = 5;\n                return _context18.abrupt(\"return\", BigNumber.from(result));\n\n              case 9:\n                _context18.prev = 9;\n                _context18.t0 = _context18[\"catch\"](5);\n                return _context18.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getGasPrice\",\n                  result: result,\n                  error: _context18.t0\n                }));\n\n              case 12:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this, [[5, 9]]);\n      }));\n    }\n  }, {\n    key: \"getBalance\",\n    value: function getBalance(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context19.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n\n              case 4:\n                params = _context19.sent;\n                _context19.next = 7;\n                return this.perform(\"getBalance\", params);\n\n              case 7:\n                result = _context19.sent;\n                _context19.prev = 8;\n                return _context19.abrupt(\"return\", BigNumber.from(result));\n\n              case 12:\n                _context19.prev = 12;\n                _context19.t0 = _context19[\"catch\"](8);\n                return _context19.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getBalance\",\n                  params: params,\n                  result: result,\n                  error: _context19.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getTransactionCount\",\n    value: function getTransactionCount(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context20.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n\n              case 4:\n                params = _context20.sent;\n                _context20.next = 7;\n                return this.perform(\"getTransactionCount\", params);\n\n              case 7:\n                result = _context20.sent;\n                _context20.prev = 8;\n                return _context20.abrupt(\"return\", BigNumber.from(result).toNumber());\n\n              case 12:\n                _context20.prev = 12;\n                _context20.t0 = _context20[\"catch\"](8);\n                return _context20.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getTransactionCount\",\n                  params: params,\n                  result: result,\n                  error: _context20.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getCode\",\n    value: function getCode(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context21.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n\n              case 4:\n                params = _context21.sent;\n                _context21.next = 7;\n                return this.perform(\"getCode\", params);\n\n              case 7:\n                result = _context21.sent;\n                _context21.prev = 8;\n                return _context21.abrupt(\"return\", hexlify(result));\n\n              case 12:\n                _context21.prev = 12;\n                _context21.t0 = _context21[\"catch\"](8);\n                return _context21.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getCode\",\n                  params: params,\n                  result: result,\n                  error: _context21.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getStorageAt\",\n    value: function getStorageAt(addressOrName, position, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context22.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag),\n                  position: Promise.resolve(position).then(function (p) {\n                    return hexValue(p);\n                  })\n                });\n\n              case 4:\n                params = _context22.sent;\n                _context22.next = 7;\n                return this.perform(\"getStorageAt\", params);\n\n              case 7:\n                result = _context22.sent;\n                _context22.prev = 8;\n                return _context22.abrupt(\"return\", hexlify(result));\n\n              case 12:\n                _context22.prev = 12;\n                _context22.t0 = _context22[\"catch\"](8);\n                return _context22.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getStorageAt\",\n                  params: params,\n                  result: result,\n                  error: _context22.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this, [[8, 12]]);\n      }));\n    } // This should be called by any subclass wrapping a TransactionResponse\n\n  }, {\n    key: \"_wrapTransaction\",\n    value: function _wrapTransaction(tx, hash, startBlock) {\n      var _this12 = this;\n\n      if (hash != null && hexDataLength(hash) !== 32) {\n        throw new Error(\"invalid response - sendTransaction\");\n      }\n\n      var result = tx; // Check the hash we expect is the same as the hash the server reported\n\n      if (hash != null && tx.hash !== hash) {\n        logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n          expectedHash: tx.hash,\n          returnedHash: hash\n        });\n      }\n\n      result.wait = function (confirms, timeout) {\n        return __awaiter(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n          var replacement, receipt;\n          return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n            while (1) {\n              switch (_context23.prev = _context23.next) {\n                case 0:\n                  if (confirms == null) {\n                    confirms = 1;\n                  }\n\n                  if (timeout == null) {\n                    timeout = 0;\n                  } // Get the details to detect replacement\n\n\n                  replacement = undefined;\n\n                  if (confirms !== 0 && startBlock != null) {\n                    replacement = {\n                      data: tx.data,\n                      from: tx.from,\n                      nonce: tx.nonce,\n                      to: tx.to,\n                      value: tx.value,\n                      startBlock: startBlock\n                    };\n                  }\n\n                  _context23.next = 6;\n                  return this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n\n                case 6:\n                  receipt = _context23.sent;\n\n                  if (!(receipt == null && confirms === 0)) {\n                    _context23.next = 9;\n                    break;\n                  }\n\n                  return _context23.abrupt(\"return\", null);\n\n                case 9:\n                  // No longer pending, allow the polling loop to garbage collect this\n                  this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n                  if (receipt.status === 0) {\n                    logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                      transactionHash: tx.hash,\n                      transaction: tx,\n                      receipt: receipt\n                    });\n                  }\n\n                  return _context23.abrupt(\"return\", receipt);\n\n                case 12:\n                case \"end\":\n                  return _context23.stop();\n              }\n            }\n          }, _callee23, this);\n        }));\n      };\n\n      return result;\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(signedTransaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {\n        var hexTx, tx, blockNumber, hash;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context24.next = 4;\n                return Promise.resolve(signedTransaction).then(function (t) {\n                  return hexlify(t);\n                });\n\n              case 4:\n                hexTx = _context24.sent;\n                tx = this.formatter.transaction(signedTransaction);\n\n                if (tx.confirmations == null) {\n                  tx.confirmations = 0;\n                }\n\n                _context24.next = 9;\n                return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n              case 9:\n                blockNumber = _context24.sent;\n                _context24.prev = 10;\n                _context24.next = 13;\n                return this.perform(\"sendTransaction\", {\n                  signedTransaction: hexTx\n                });\n\n              case 13:\n                hash = _context24.sent;\n                return _context24.abrupt(\"return\", this._wrapTransaction(tx, hash, blockNumber));\n\n              case 17:\n                _context24.prev = 17;\n                _context24.t0 = _context24[\"catch\"](10);\n                _context24.t0.transaction = tx;\n                _context24.t0.transactionHash = tx.hash;\n                throw _context24.t0;\n\n              case 22:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this, [[10, 17]]);\n      }));\n    }\n  }, {\n    key: \"_getTransactionRequest\",\n    value: function _getTransactionRequest(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {\n        var _this13 = this;\n\n        var values, tx;\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                _context25.next = 2;\n                return transaction;\n\n              case 2:\n                values = _context25.sent;\n                tx = {};\n                [\"from\", \"to\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? _this13._getAddress(v) : null;\n                  });\n                });\n                [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? BigNumber.from(v) : null;\n                  });\n                });\n                [\"type\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v != null ? v : null;\n                  });\n                });\n\n                if (values.accessList) {\n                  tx.accessList = this.formatter.accessList(values.accessList);\n                }\n\n                [\"data\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? hexlify(v) : null;\n                  });\n                });\n                _context25.t0 = this.formatter;\n                _context25.next = 12;\n                return resolveProperties(tx);\n\n              case 12:\n                _context25.t1 = _context25.sent;\n                return _context25.abrupt(\"return\", _context25.t0.transactionRequest.call(_context25.t0, _context25.t1));\n\n              case 14:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n    }\n  }, {\n    key: \"_getFilter\",\n    value: function _getFilter(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {\n        var _this14 = this;\n\n        var result;\n        return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.next = 2;\n                return filter;\n\n              case 2:\n                filter = _context26.sent;\n                result = {};\n\n                if (filter.address != null) {\n                  result.address = this._getAddress(filter.address);\n                }\n\n                [\"blockHash\", \"topics\"].forEach(function (key) {\n                  if (filter[key] == null) {\n                    return;\n                  }\n\n                  result[key] = filter[key];\n                });\n                [\"fromBlock\", \"toBlock\"].forEach(function (key) {\n                  if (filter[key] == null) {\n                    return;\n                  }\n\n                  result[key] = _this14._getBlockTag(filter[key]);\n                });\n                _context26.t0 = this.formatter;\n                _context26.next = 10;\n                return resolveProperties(result);\n\n              case 10:\n                _context26.t1 = _context26.sent;\n                return _context26.abrupt(\"return\", _context26.t0.filter.call(_context26.t0, _context26.t1));\n\n              case 12:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n    }\n  }, {\n    key: \"_call\",\n    value: function _call(transaction, blockTag, attempt) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {\n        var txSender, result, data, sender, urls, urlsOffset, urlsLength, urlsData, u, url, calldata, callbackSelector, extraData, ccipResult, tx;\n        return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                if (attempt >= MAX_CCIP_REDIRECTS) {\n                  logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                    redirects: attempt,\n                    transaction: transaction\n                  });\n                }\n\n                txSender = transaction.to;\n                _context27.next = 4;\n                return this.perform(\"call\", {\n                  transaction: transaction,\n                  blockTag: blockTag\n                });\n\n              case 4:\n                result = _context27.sent;\n\n                if (!(attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && hexDataLength(result) % 32 === 4)) {\n                  _context27.next = 31;\n                  break;\n                }\n\n                _context27.prev = 6;\n                data = hexDataSlice(result, 4); // Check the sender of the OffchainLookup matches the transaction\n\n                sender = hexDataSlice(data, 0, 32);\n\n                if (!BigNumber.from(sender).eq(txSender)) {\n                  logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                    name: \"OffchainLookup\",\n                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                    transaction: transaction,\n                    data: result\n                  });\n                } // Read the URLs from the response\n\n\n                urls = [];\n                urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                urlsData = hexDataSlice(data, urlsOffset + 32);\n\n                for (u = 0; u < urlsLength; u++) {\n                  url = _parseString(urlsData, u * 32);\n\n                  if (url == null) {\n                    logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                      name: \"OffchainLookup\",\n                      signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                      transaction: transaction,\n                      data: result\n                    });\n                  }\n\n                  urls.push(url);\n                } // Get the CCIP calldata to forward\n\n\n                calldata = _parseBytes(data, 64); // Get the callbackSelector (bytes4)\n\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                  logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                    name: \"OffchainLookup\",\n                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                    transaction: transaction,\n                    data: result\n                  });\n                }\n\n                callbackSelector = hexDataSlice(data, 96, 100); // Get the extra data to send back to the contract as context\n\n                extraData = _parseBytes(data, 128);\n                _context27.next = 21;\n                return this.ccipReadFetch(transaction, calldata, urls);\n\n              case 21:\n                ccipResult = _context27.sent;\n\n                if (ccipResult == null) {\n                  logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                    name: \"OffchainLookup\",\n                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                    transaction: transaction,\n                    data: result\n                  });\n                }\n\n                tx = {\n                  to: txSender,\n                  data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n                };\n                return _context27.abrupt(\"return\", this._call(tx, blockTag, attempt + 1));\n\n              case 27:\n                _context27.prev = 27;\n                _context27.t0 = _context27[\"catch\"](6);\n\n                if (!(_context27.t0.code === Logger.errors.SERVER_ERROR)) {\n                  _context27.next = 31;\n                  break;\n                }\n\n                throw _context27.t0;\n\n              case 31:\n                _context27.prev = 31;\n                return _context27.abrupt(\"return\", hexlify(result));\n\n              case 35:\n                _context27.prev = 35;\n                _context27.t1 = _context27[\"catch\"](31);\n                return _context27.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"call\",\n                  params: {\n                    transaction: transaction,\n                    blockTag: blockTag\n                  },\n                  result: result,\n                  error: _context27.t1\n                }));\n\n              case 38:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this, [[6, 27], [31, 35]]);\n      }));\n    }\n  }, {\n    key: \"call\",\n    value: function call(transaction, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {\n        var resolved;\n        return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                _context28.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context28.next = 4;\n                return resolveProperties({\n                  transaction: this._getTransactionRequest(transaction),\n                  blockTag: this._getBlockTag(blockTag),\n                  ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n                });\n\n              case 4:\n                resolved = _context28.sent;\n                return _context28.abrupt(\"return\", this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1));\n\n              case 6:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n    }\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                _context29.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context29.next = 4;\n                return resolveProperties({\n                  transaction: this._getTransactionRequest(transaction)\n                });\n\n              case 4:\n                params = _context29.sent;\n                _context29.next = 7;\n                return this.perform(\"estimateGas\", params);\n\n              case 7:\n                result = _context29.sent;\n                _context29.prev = 8;\n                return _context29.abrupt(\"return\", BigNumber.from(result));\n\n              case 12:\n                _context29.prev = 12;\n                _context29.t0 = _context29[\"catch\"](8);\n                return _context29.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"estimateGas\",\n                  params: params,\n                  result: result,\n                  error: _context29.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(addressOrName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {\n        var address;\n        return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                _context30.next = 2;\n                return addressOrName;\n\n              case 2:\n                addressOrName = _context30.sent;\n\n                if (typeof addressOrName !== \"string\") {\n                  logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n                }\n\n                _context30.next = 6;\n                return this.resolveName(addressOrName);\n\n              case 6:\n                address = _context30.sent;\n\n                if (address == null) {\n                  logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"resolveName(\".concat(JSON.stringify(addressOrName), \")\")\n                  });\n                }\n\n                return _context30.abrupt(\"return\", address);\n\n              case 9:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n    }\n  }, {\n    key: \"_getBlock\",\n    value: function _getBlock(blockHashOrBlockTag, includeTransactions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {\n        var _this15 = this;\n\n        var blockNumber, params;\n        return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                _context32.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context32.next = 4;\n                return blockHashOrBlockTag;\n\n              case 4:\n                blockHashOrBlockTag = _context32.sent;\n                // If blockTag is a number (not \"latest\", etc), this is the block number\n                blockNumber = -128;\n                params = {\n                  includeTransactions: !!includeTransactions\n                };\n\n                if (!isHexString(blockHashOrBlockTag, 32)) {\n                  _context32.next = 11;\n                  break;\n                }\n\n                params.blockHash = blockHashOrBlockTag;\n                _context32.next = 21;\n                break;\n\n              case 11:\n                _context32.prev = 11;\n                _context32.next = 14;\n                return this._getBlockTag(blockHashOrBlockTag);\n\n              case 14:\n                params.blockTag = _context32.sent;\n\n                if (isHexString(params.blockTag)) {\n                  blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n\n                _context32.next = 21;\n                break;\n\n              case 18:\n                _context32.prev = 18;\n                _context32.t0 = _context32[\"catch\"](11);\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n\n              case 21:\n                return _context32.abrupt(\"return\", poll(function () {\n                  return __awaiter(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {\n                    var _this16 = this;\n\n                    var block, _blockNumber, i, tx, confirmations, blockWithTxs;\n\n                    return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n                      while (1) {\n                        switch (_context31.prev = _context31.next) {\n                          case 0:\n                            _context31.next = 2;\n                            return this.perform(\"getBlock\", params);\n\n                          case 2:\n                            block = _context31.sent;\n\n                            if (!(block == null)) {\n                              _context31.next = 11;\n                              break;\n                            }\n\n                            if (!(params.blockHash != null)) {\n                              _context31.next = 7;\n                              break;\n                            }\n\n                            if (!(this._emitted[\"b:\" + params.blockHash] == null)) {\n                              _context31.next = 7;\n                              break;\n                            }\n\n                            return _context31.abrupt(\"return\", null);\n\n                          case 7:\n                            if (!(params.blockTag != null)) {\n                              _context31.next = 10;\n                              break;\n                            }\n\n                            if (!(blockNumber > this._emitted.block)) {\n                              _context31.next = 10;\n                              break;\n                            }\n\n                            return _context31.abrupt(\"return\", null);\n\n                          case 10:\n                            return _context31.abrupt(\"return\", undefined);\n\n                          case 11:\n                            if (!includeTransactions) {\n                              _context31.next = 34;\n                              break;\n                            }\n\n                            _blockNumber = null;\n                            i = 0;\n\n                          case 14:\n                            if (!(i < block.transactions.length)) {\n                              _context31.next = 31;\n                              break;\n                            }\n\n                            tx = block.transactions[i];\n\n                            if (!(tx.blockNumber == null)) {\n                              _context31.next = 20;\n                              break;\n                            }\n\n                            tx.confirmations = 0;\n                            _context31.next = 28;\n                            break;\n\n                          case 20:\n                            if (!(tx.confirmations == null)) {\n                              _context31.next = 28;\n                              break;\n                            }\n\n                            if (!(_blockNumber == null)) {\n                              _context31.next = 25;\n                              break;\n                            }\n\n                            _context31.next = 24;\n                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                          case 24:\n                            _blockNumber = _context31.sent;\n\n                          case 25:\n                            // Add the confirmations using the fast block number (pessimistic)\n                            confirmations = _blockNumber - tx.blockNumber + 1;\n\n                            if (confirmations <= 0) {\n                              confirmations = 1;\n                            }\n\n                            tx.confirmations = confirmations;\n\n                          case 28:\n                            i++;\n                            _context31.next = 14;\n                            break;\n\n                          case 31:\n                            blockWithTxs = this.formatter.blockWithTransactions(block);\n                            blockWithTxs.transactions = blockWithTxs.transactions.map(function (tx) {\n                              return _this16._wrapTransaction(tx);\n                            });\n                            return _context31.abrupt(\"return\", blockWithTxs);\n\n                          case 34:\n                            return _context31.abrupt(\"return\", this.formatter.block(block));\n\n                          case 35:\n                          case \"end\":\n                            return _context31.stop();\n                        }\n                      }\n                    }, _callee31, this);\n                  }));\n                }, {\n                  oncePoll: this\n                }));\n\n              case 22:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this, [[11, 18]]);\n      }));\n    }\n  }, {\n    key: \"getBlock\",\n    value: function getBlock(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, false);\n    }\n  }, {\n    key: \"getBlockWithTransactions\",\n    value: function getBlockWithTransactions(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, true);\n    }\n  }, {\n    key: \"getTransaction\",\n    value: function getTransaction(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {\n        var _this17 = this;\n\n        var params;\n        return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                _context34.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context34.next = 4;\n                return transactionHash;\n\n              case 4:\n                transactionHash = _context34.sent;\n                params = {\n                  transactionHash: this.formatter.hash(transactionHash, true)\n                };\n                return _context34.abrupt(\"return\", poll(function () {\n                  return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {\n                    var result, tx, blockNumber, confirmations;\n                    return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n                      while (1) {\n                        switch (_context33.prev = _context33.next) {\n                          case 0:\n                            _context33.next = 2;\n                            return this.perform(\"getTransaction\", params);\n\n                          case 2:\n                            result = _context33.sent;\n\n                            if (!(result == null)) {\n                              _context33.next = 7;\n                              break;\n                            }\n\n                            if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                              _context33.next = 6;\n                              break;\n                            }\n\n                            return _context33.abrupt(\"return\", null);\n\n                          case 6:\n                            return _context33.abrupt(\"return\", undefined);\n\n                          case 7:\n                            tx = this.formatter.transactionResponse(result);\n\n                            if (!(tx.blockNumber == null)) {\n                              _context33.next = 12;\n                              break;\n                            }\n\n                            tx.confirmations = 0;\n                            _context33.next = 19;\n                            break;\n\n                          case 12:\n                            if (!(tx.confirmations == null)) {\n                              _context33.next = 19;\n                              break;\n                            }\n\n                            _context33.next = 15;\n                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                          case 15:\n                            blockNumber = _context33.sent;\n                            // Add the confirmations using the fast block number (pessimistic)\n                            confirmations = blockNumber - tx.blockNumber + 1;\n\n                            if (confirmations <= 0) {\n                              confirmations = 1;\n                            }\n\n                            tx.confirmations = confirmations;\n\n                          case 19:\n                            return _context33.abrupt(\"return\", this._wrapTransaction(tx));\n\n                          case 20:\n                          case \"end\":\n                            return _context33.stop();\n                        }\n                      }\n                    }, _callee33, this);\n                  }));\n                }, {\n                  oncePoll: this\n                }));\n\n              case 7:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n    }\n  }, {\n    key: \"getTransactionReceipt\",\n    value: function getTransactionReceipt(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {\n        var _this18 = this;\n\n        var params;\n        return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                _context36.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context36.next = 4;\n                return transactionHash;\n\n              case 4:\n                transactionHash = _context36.sent;\n                params = {\n                  transactionHash: this.formatter.hash(transactionHash, true)\n                };\n                return _context36.abrupt(\"return\", poll(function () {\n                  return __awaiter(_this18, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {\n                    var result, receipt, blockNumber, confirmations;\n                    return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n                      while (1) {\n                        switch (_context35.prev = _context35.next) {\n                          case 0:\n                            _context35.next = 2;\n                            return this.perform(\"getTransactionReceipt\", params);\n\n                          case 2:\n                            result = _context35.sent;\n\n                            if (!(result == null)) {\n                              _context35.next = 7;\n                              break;\n                            }\n\n                            if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                              _context35.next = 6;\n                              break;\n                            }\n\n                            return _context35.abrupt(\"return\", null);\n\n                          case 6:\n                            return _context35.abrupt(\"return\", undefined);\n\n                          case 7:\n                            if (!(result.blockHash == null)) {\n                              _context35.next = 9;\n                              break;\n                            }\n\n                            return _context35.abrupt(\"return\", undefined);\n\n                          case 9:\n                            receipt = this.formatter.receipt(result);\n\n                            if (!(receipt.blockNumber == null)) {\n                              _context35.next = 14;\n                              break;\n                            }\n\n                            receipt.confirmations = 0;\n                            _context35.next = 21;\n                            break;\n\n                          case 14:\n                            if (!(receipt.confirmations == null)) {\n                              _context35.next = 21;\n                              break;\n                            }\n\n                            _context35.next = 17;\n                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                          case 17:\n                            blockNumber = _context35.sent;\n                            // Add the confirmations using the fast block number (pessimistic)\n                            confirmations = blockNumber - receipt.blockNumber + 1;\n\n                            if (confirmations <= 0) {\n                              confirmations = 1;\n                            }\n\n                            receipt.confirmations = confirmations;\n\n                          case 21:\n                            return _context35.abrupt(\"return\", receipt);\n\n                          case 22:\n                          case \"end\":\n                            return _context35.stop();\n                        }\n                      }\n                    }, _callee35, this);\n                  }));\n                }, {\n                  oncePoll: this\n                }));\n\n              case 7:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n    }\n  }, {\n    key: \"getLogs\",\n    value: function getLogs(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {\n        var params, logs;\n        return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                _context37.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context37.next = 4;\n                return resolveProperties({\n                  filter: this._getFilter(filter)\n                });\n\n              case 4:\n                params = _context37.sent;\n                _context37.next = 7;\n                return this.perform(\"getLogs\", params);\n\n              case 7:\n                logs = _context37.sent;\n                logs.forEach(function (log) {\n                  if (log.removed == null) {\n                    log.removed = false;\n                  }\n                });\n                return _context37.abrupt(\"return\", Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs));\n\n              case 10:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n    }\n  }, {\n    key: \"getEtherPrice\",\n    value: function getEtherPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {\n        return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                _context38.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                return _context38.abrupt(\"return\", this.perform(\"getEtherPrice\", {}));\n\n              case 3:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this);\n      }));\n    }\n  }, {\n    key: \"_getBlockTag\",\n    value: function _getBlockTag(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {\n        var blockNumber;\n        return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                _context39.next = 2;\n                return blockTag;\n\n              case 2:\n                blockTag = _context39.sent;\n\n                if (!(typeof blockTag === \"number\" && blockTag < 0)) {\n                  _context39.next = 11;\n                  break;\n                }\n\n                if (blockTag % 1) {\n                  logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n\n                _context39.next = 7;\n                return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n              case 7:\n                blockNumber = _context39.sent;\n                blockNumber += blockTag;\n\n                if (blockNumber < 0) {\n                  blockNumber = 0;\n                }\n\n                return _context39.abrupt(\"return\", this.formatter.blockTag(blockNumber));\n\n              case 11:\n                return _context39.abrupt(\"return\", this.formatter.blockTag(blockTag));\n\n              case 12:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, this);\n      }));\n    }\n  }, {\n    key: \"getResolver\",\n    value: function getResolver(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {\n        var currentName, addr, resolver;\n        return _regeneratorRuntime().wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                currentName = name;\n\n              case 1:\n                if (!true) {\n                  _context40.next = 22;\n                  break;\n                }\n\n                if (!(currentName === \"\" || currentName === \".\")) {\n                  _context40.next = 4;\n                  break;\n                }\n\n                return _context40.abrupt(\"return\", null);\n\n              case 4:\n                if (!(name !== \"eth\" && currentName === \"eth\")) {\n                  _context40.next = 6;\n                  break;\n                }\n\n                return _context40.abrupt(\"return\", null);\n\n              case 6:\n                _context40.next = 8;\n                return this._getResolver(currentName, \"getResolver\");\n\n              case 8:\n                addr = _context40.sent;\n\n                if (!(addr != null)) {\n                  _context40.next = 19;\n                  break;\n                }\n\n                resolver = new Resolver(this, addr, name); // Legacy resolver found, using EIP-2544 so it isn't safe to use\n\n                _context40.t0 = currentName !== name;\n\n                if (!_context40.t0) {\n                  _context40.next = 16;\n                  break;\n                }\n\n                _context40.next = 15;\n                return resolver.supportsWildcard();\n\n              case 15:\n                _context40.t0 = !_context40.sent;\n\n              case 16:\n                if (!_context40.t0) {\n                  _context40.next = 18;\n                  break;\n                }\n\n                return _context40.abrupt(\"return\", null);\n\n              case 18:\n                return _context40.abrupt(\"return\", resolver);\n\n              case 19:\n                // Get the parent node\n                currentName = currentName.split(\".\").slice(1).join(\".\");\n                _context40.next = 1;\n                break;\n\n              case 22:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40, this);\n      }));\n    }\n  }, {\n    key: \"_getResolver\",\n    value: function _getResolver(name, operation) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {\n        var network, addrData;\n        return _regeneratorRuntime().wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                if (operation == null) {\n                  operation = \"ENS\";\n                }\n\n                _context41.next = 3;\n                return this.getNetwork();\n\n              case 3:\n                network = _context41.sent;\n\n                // No ENS...\n                if (!network.ensAddress) {\n                  logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: operation,\n                    network: network.name\n                  });\n                }\n\n                _context41.prev = 5;\n                _context41.next = 8;\n                return this.call({\n                  to: network.ensAddress,\n                  data: \"0x0178b8bf\" + namehash(name).substring(2)\n                });\n\n              case 8:\n                addrData = _context41.sent;\n                return _context41.abrupt(\"return\", this.formatter.callAddress(addrData));\n\n              case 12:\n                _context41.prev = 12;\n                _context41.t0 = _context41[\"catch\"](5);\n\n              case 14:\n                return _context41.abrupt(\"return\", null);\n\n              case 15:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this, [[5, 12]]);\n      }));\n    }\n  }, {\n    key: \"resolveName\",\n    value: function resolveName(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee42() {\n        var resolver;\n        return _regeneratorRuntime().wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                _context42.next = 2;\n                return name;\n\n              case 2:\n                name = _context42.sent;\n                _context42.prev = 3;\n                return _context42.abrupt(\"return\", Promise.resolve(this.formatter.address(name)));\n\n              case 7:\n                _context42.prev = 7;\n                _context42.t0 = _context42[\"catch\"](3);\n\n                if (!isHexString(name)) {\n                  _context42.next = 11;\n                  break;\n                }\n\n                throw _context42.t0;\n\n              case 11:\n                if (typeof name !== \"string\") {\n                  logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n                } // Get the addr from the resovler\n\n\n                _context42.next = 14;\n                return this.getResolver(name);\n\n              case 14:\n                resolver = _context42.sent;\n\n                if (resolver) {\n                  _context42.next = 17;\n                  break;\n                }\n\n                return _context42.abrupt(\"return\", null);\n\n              case 17:\n                _context42.next = 19;\n                return resolver.getAddress();\n\n              case 19:\n                return _context42.abrupt(\"return\", _context42.sent);\n\n              case 20:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42, this, [[3, 7]]);\n      }));\n    }\n  }, {\n    key: \"lookupAddress\",\n    value: function lookupAddress(address) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {\n        var node, resolverAddr, name, addr;\n        return _regeneratorRuntime().wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                _context43.next = 2;\n                return address;\n\n              case 2:\n                address = _context43.sent;\n                address = this.formatter.address(address);\n                node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                _context43.next = 7;\n                return this._getResolver(node, \"lookupAddress\");\n\n              case 7:\n                resolverAddr = _context43.sent;\n\n                if (!(resolverAddr == null)) {\n                  _context43.next = 10;\n                  break;\n                }\n\n                return _context43.abrupt(\"return\", null);\n\n              case 10:\n                _context43.t0 = _parseString;\n                _context43.next = 13;\n                return this.call({\n                  to: resolverAddr,\n                  data: \"0x691f3431\" + namehash(node).substring(2)\n                });\n\n              case 13:\n                _context43.t1 = _context43.sent;\n                name = (0, _context43.t0)(_context43.t1, 0);\n                _context43.next = 17;\n                return this.resolveName(name);\n\n              case 17:\n                addr = _context43.sent;\n\n                if (!(addr != address)) {\n                  _context43.next = 20;\n                  break;\n                }\n\n                return _context43.abrupt(\"return\", null);\n\n              case 20:\n                return _context43.abrupt(\"return\", name);\n\n              case 21:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43, this);\n      }));\n    }\n  }, {\n    key: \"getAvatar\",\n    value: function getAvatar(nameOrAddress) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {\n        var resolver, address, node, resolverAddress, _avatar, name, avatar;\n\n        return _regeneratorRuntime().wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                resolver = null;\n\n                if (!isHexString(nameOrAddress)) {\n                  _context44.next = 40;\n                  break;\n                }\n\n                // Address; reverse lookup\n                address = this.formatter.address(nameOrAddress);\n                node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                _context44.next = 6;\n                return this._getResolver(node, \"getAvatar\");\n\n              case 6:\n                resolverAddress = _context44.sent;\n\n                if (resolverAddress) {\n                  _context44.next = 9;\n                  break;\n                }\n\n                return _context44.abrupt(\"return\", null);\n\n              case 9:\n                // Try resolving the avatar against the addr.reverse resolver\n                resolver = new Resolver(this, resolverAddress, node);\n                _context44.prev = 10;\n                _context44.next = 13;\n                return resolver.getAvatar();\n\n              case 13:\n                _avatar = _context44.sent;\n\n                if (!_avatar) {\n                  _context44.next = 16;\n                  break;\n                }\n\n                return _context44.abrupt(\"return\", _avatar.url);\n\n              case 16:\n                _context44.next = 22;\n                break;\n\n              case 18:\n                _context44.prev = 18;\n                _context44.t0 = _context44[\"catch\"](10);\n\n                if (!(_context44.t0.code !== Logger.errors.CALL_EXCEPTION)) {\n                  _context44.next = 22;\n                  break;\n                }\n\n                throw _context44.t0;\n\n              case 22:\n                _context44.prev = 22;\n                _context44.t1 = _parseString;\n                _context44.next = 26;\n                return this.call({\n                  to: resolverAddress,\n                  data: \"0x691f3431\" + namehash(node).substring(2)\n                });\n\n              case 26:\n                _context44.t2 = _context44.sent;\n                name = (0, _context44.t1)(_context44.t2, 0);\n                _context44.next = 30;\n                return this.getResolver(name);\n\n              case 30:\n                resolver = _context44.sent;\n                _context44.next = 38;\n                break;\n\n              case 33:\n                _context44.prev = 33;\n                _context44.t3 = _context44[\"catch\"](22);\n\n                if (!(_context44.t3.code !== Logger.errors.CALL_EXCEPTION)) {\n                  _context44.next = 37;\n                  break;\n                }\n\n                throw _context44.t3;\n\n              case 37:\n                return _context44.abrupt(\"return\", null);\n\n              case 38:\n                _context44.next = 45;\n                break;\n\n              case 40:\n                _context44.next = 42;\n                return this.getResolver(nameOrAddress);\n\n              case 42:\n                resolver = _context44.sent;\n\n                if (resolver) {\n                  _context44.next = 45;\n                  break;\n                }\n\n                return _context44.abrupt(\"return\", null);\n\n              case 45:\n                _context44.next = 47;\n                return resolver.getAvatar();\n\n              case 47:\n                avatar = _context44.sent;\n\n                if (!(avatar == null)) {\n                  _context44.next = 50;\n                  break;\n                }\n\n                return _context44.abrupt(\"return\", null);\n\n              case 50:\n                return _context44.abrupt(\"return\", avatar.url);\n\n              case 51:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44, this, [[10, 18], [22, 33]]);\n      }));\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n        operation: method\n      });\n    }\n  }, {\n    key: \"_startEvent\",\n    value: function _startEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_stopEvent\",\n    value: function _stopEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_addEventListener\",\n    value: function _addEventListener(eventName, listener, once) {\n      var event = new Event(getEventTag(eventName), listener, once);\n\n      this._events.push(event);\n\n      this._startEvent(event);\n\n      return this;\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, listener) {\n      return this._addEventListener(eventName, listener, false);\n    }\n  }, {\n    key: \"once\",\n    value: function once(eventName, listener) {\n      return this._addEventListener(eventName, listener, true);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      var _this19 = this;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var result = false;\n      var stopped = [];\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        setTimeout(function () {\n          event.listener.apply(_this19, args);\n        }, 0);\n        result = true;\n\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n\n        return true;\n      });\n      stopped.forEach(function (event) {\n        _this19._stopEvent(event);\n      });\n      return result;\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventName) {\n      if (!eventName) {\n        return this._events.length;\n      }\n\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).length;\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners(eventName) {\n      if (eventName == null) {\n        return this._events.map(function (event) {\n          return event.listener;\n        });\n      }\n\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).map(function (event) {\n        return event.listener;\n      });\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventName, listener) {\n      var _this20 = this;\n\n      if (listener == null) {\n        return this.removeAllListeners(eventName);\n      }\n\n      var stopped = [];\n      var found = false;\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag || event.listener != listener) {\n          return true;\n        }\n\n        if (found) {\n          return true;\n        }\n\n        found = true;\n        stopped.push(event);\n        return false;\n      });\n      stopped.forEach(function (event) {\n        _this20._stopEvent(event);\n      });\n      return this;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      var _this21 = this;\n\n      var stopped = [];\n\n      if (eventName == null) {\n        stopped = this._events;\n        this._events = [];\n      } else {\n        var eventTag = getEventTag(eventName);\n        this._events = this._events.filter(function (event) {\n          if (event.tag !== eventTag) {\n            return true;\n          }\n\n          stopped.push(event);\n          return false;\n        });\n      }\n\n      stopped.forEach(function (event) {\n        _this21._stopEvent(event);\n      });\n      return this;\n    }\n  }], [{\n    key: \"getFormatter\",\n    value: function getFormatter() {\n      if (defaultFormatter == null) {\n        defaultFormatter = new Formatter();\n      }\n\n      return defaultFormatter;\n    } // @TODO: Remove this and just use getNetwork\n\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork(network) {\n      return _getNetwork(network == null ? \"homestead\" : network);\n    }\n  }]);\n\n  return BaseProvider;\n}(Provider);","map":{"version":3,"sources":["../src.ts/base-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nconst MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if (hexDataLength(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) {\n        topics.pop();\n    }\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        }\n        else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null : topic);\n        });\n        return ((comps.length === 1) ? comps[0] : comps);\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof (eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    }\n    else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    }\n    else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    }\n    else if (eventName && typeof (eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return (new Date()).getTime();\n}\nfunction stall(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n    constructor(tag, listener, once) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n    get event() {\n        switch (this.type) {\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n        }\n        return this.tag;\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n    \"0\": { symbol: \"btc\", p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\": { symbol: \"ltc\", p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\": { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\": { symbol: \"eth\", ilk: \"eth\" },\n    \"61\": { symbol: \"etc\", ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\nfunction bytes32ify(value) {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\nfunction _parseString(result, start) {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    }\n    catch (error) { }\n    return null;\n}\nfunction _parseBytes(result, start) {\n    if (result === \"0x\") {\n        return null;\n    }\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    }\n    else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    }\n    else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n    return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\nfunction numPad(value) {\n    const result = arrayify(value);\n    if (result.length > 32) {\n        throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\nfunction bytesPad(value) {\n    if ((value.length % 32) === 0) {\n        return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n    const result = [];\n    let byteCount = 0;\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return hexConcat(result);\n}\nexport class Resolver {\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider, address, name, resolvedAddress) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n    supportsWildcard() {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return false;\n                }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n        return this._supportsEip2544;\n    }\n    _fetch(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // e.g. keccak256(\"addr(bytes32,uint256)\")\n            const tx = {\n                to: this.address,\n                ccipReadEnabled: true,\n                data: hexConcat([selector, namehash(this.name), (parameters || \"0x\")])\n            };\n            // Wildcard support; use EIP-2544 to resolve the request\n            let parseBytes = false;\n            if (yield this.supportsWildcard()) {\n                parseBytes = true;\n                // selector(\"resolve(bytes,bytes)\")\n                tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n            }\n            try {\n                let result = yield this.provider.call(tx);\n                if ((arrayify(result).length % 32) === 4) {\n                    logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                        transaction: tx, data: result\n                    });\n                }\n                if (parseBytes) {\n                    result = _parseBytes(result, 0);\n                }\n                return result;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                throw error;\n            }\n        });\n    }\n    _fetchBytes(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this._fetch(selector, parameters);\n            if (result != null) {\n                return _parseBytes(result, 0);\n            }\n            return null;\n        });\n    }\n    _getAddress(coinType, hexBytes) {\n        const coinInfo = coinInfos[String(coinType)];\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${coinType})`\n            });\n        }\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n        const bytes = arrayify(hexBytes);\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2pkh], (\"0x\" + p2pkh[2])]));\n                }\n            }\n        }\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2sh], (\"0x\" + p2sh[2])]));\n                }\n            }\n        }\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            }\n            else {\n                version = -1;\n            }\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n        return null;\n    }\n    getAddress(coinType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (coinType == null) {\n                coinType = 60;\n            }\n            // If Ethereum, use the standard `addr(bytes32)`\n            if (coinType === 60) {\n                try {\n                    // keccak256(\"addr(bytes32)\")\n                    const result = yield this._fetch(\"0x3b3b57de\");\n                    // No address\n                    if (result === \"0x\" || result === HashZero) {\n                        return null;\n                    }\n                    return this.provider.formatter.callAddress(result);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.CALL_EXCEPTION) {\n                        return null;\n                    }\n                    throw error;\n                }\n            }\n            // keccak256(\"addr(bytes32,uint256\")\n            const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            // No address\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // Compute the address\n            const address = this._getAddress(coinType, hexBytes);\n            if (address == null) {\n                logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `getAddress(${coinType})`,\n                    coinType: coinType,\n                    data: hexBytes\n                });\n            }\n            return address;\n        });\n    }\n    getAvatar() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const linkage = [{ type: \"name\", content: this.name }];\n            try {\n                // test data for ricmoo.eth\n                //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n                const avatar = yield this.getText(\"avatar\");\n                if (avatar == null) {\n                    return null;\n                }\n                for (let i = 0; i < matchers.length; i++) {\n                    const match = avatar.match(matchers[i]);\n                    if (match == null) {\n                        continue;\n                    }\n                    const scheme = match[1].toLowerCase();\n                    switch (scheme) {\n                        case \"https\":\n                            linkage.push({ type: \"url\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"data\":\n                            linkage.push({ type: \"data\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"ipfs\":\n                            linkage.push({ type: \"ipfs\", content: avatar });\n                            return { linkage, url: getIpfsLink(avatar) };\n                        case \"erc721\":\n                        case \"erc1155\": {\n                            // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                            const selector = (scheme === \"erc721\") ? \"0xc87b56dd\" : \"0x0e89341c\";\n                            linkage.push({ type: scheme, content: avatar });\n                            // The owner of this name\n                            const owner = (this._resolvedAddress || (yield this.getAddress()));\n                            const comps = (match[2] || \"\").split(\"/\");\n                            if (comps.length !== 2) {\n                                return null;\n                            }\n                            const addr = yield this.provider.formatter.address(comps[0]);\n                            const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n                            // Check that this account owns the token\n                            if (scheme === \"erc721\") {\n                                // ownerOf(uint256 tokenId)\n                                const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x6352211e\", tokenId])\n                                }));\n                                if (owner !== tokenOwner) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"owner\", content: tokenOwner });\n                            }\n                            else if (scheme === \"erc1155\") {\n                                // balanceOf(address owner, uint256 tokenId)\n                                const balance = BigNumber.from(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                                }));\n                                if (balance.isZero()) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"balance\", content: balance.toString() });\n                            }\n                            // Call the token contract for the metadata URL\n                            const tx = {\n                                to: this.provider.formatter.address(comps[0]),\n                                data: hexConcat([selector, tokenId])\n                            };\n                            let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n                            if (metadataUrl == null) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n                            // ERC-1155 allows a generic {id} in the URL\n                            if (scheme === \"erc1155\") {\n                                metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                                linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                            }\n                            // Transform IPFS metadata links\n                            if (metadataUrl.match(/^ipfs:/i)) {\n                                metadataUrl = getIpfsLink(metadataUrl);\n                            }\n                            linkage.push({ type: \"metadata-url\", content: metadataUrl });\n                            // Get the token metadata\n                            const metadata = yield fetchJson(metadataUrl);\n                            if (!metadata) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                            // Pull the image URL out\n                            let imageUrl = metadata.image;\n                            if (typeof (imageUrl) !== \"string\") {\n                                return null;\n                            }\n                            if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                                // Allow\n                            }\n                            else {\n                                // Transform IPFS link to gateway\n                                const ipfs = imageUrl.match(matcherIpfs);\n                                if (ipfs == null) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                                imageUrl = getIpfsLink(imageUrl);\n                            }\n                            linkage.push({ type: \"url\", content: imageUrl });\n                            return { linkage, url: imageUrl };\n                        }\n                    }\n                }\n            }\n            catch (error) { }\n            return null;\n        });\n    }\n    getContentHash() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // keccak256(\"contenthash()\")\n            const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n            // No contenthash\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // IPFS (CID: 1, Type: DAG-PB)\n            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipfs) {\n                const length = parseInt(ipfs[3], 16);\n                if (ipfs[4].length === length * 2) {\n                    return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n                }\n            }\n            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n            if (swarm) {\n                if (swarm[1].length === (32 * 2)) {\n                    return \"bzz:/\\/\" + swarm[1];\n                }\n            }\n            return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n            });\n        });\n    }\n    getText(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // The key encoded as parameter to fetchBytes\n            let keyBytes = toUtf8Bytes(key);\n            // The nodehash consumes the first slot, so the string pointer targets\n            // offset 64, with the length at offset 64 and data starting at offset 96\n            keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n            // Pad to word-size (32 bytes)\n            if ((keyBytes.length % 32) !== 0) {\n                keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32))]);\n            }\n            const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            return toUtf8String(hexBytes);\n        });\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n    constructor(network) {\n        logger.checkNew(new.target, Provider);\n        super();\n        // Events being listened to\n        this._events = [];\n        this._emitted = { block: -2 };\n        this.disableCcipRead = false;\n        this.formatter = new.target.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) {\n            network = this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n        }\n        else {\n            const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n            }\n            else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n        this._pollingInterval = 4000;\n        this._fastQueryDate = 0;\n    }\n    _ready() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._network == null) {\n                let network = null;\n                if (this._networkPromise) {\n                    try {\n                        network = yield this._networkPromise;\n                    }\n                    catch (error) { }\n                }\n                // Try the Provider's network detection (this MUST throw if it cannot)\n                if (network == null) {\n                    network = yield this.detectNetwork();\n                }\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                    logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                    if (this.anyNetwork) {\n                        this._network = network;\n                    }\n                    else {\n                        defineReadOnly(this, \"_network\", network);\n                    }\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return this._network;\n        });\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready() {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network) {\n        return getNetwork((network == null) ? \"homestead\" : network);\n    }\n    ccipReadFetch(tx, calldata, urls) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.disableCcipRead || urls.length === 0) {\n                return null;\n            }\n            const sender = (tx.from || \"0x0000000000000000000000000000000000000000\").toLowerCase();\n            const data = calldata.toLowerCase();\n            const errorMessages = [];\n            for (let i = 0; i < urls.length; i++) {\n                const url = urls[i];\n                // URL expansion\n                const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n                // If no {data} is present, use POST; otherwise GET\n                const json = (url.indexOf(\"{data}\") >= 0) ? null : JSON.stringify({ data, sender });\n                const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                    value.status = response.statusCode;\n                    return value;\n                });\n                if (result.data) {\n                    return result.data;\n                }\n                const errorMessage = (result.message || \"unknown error\");\n                // 4xx indicates the result is not present; stop\n                if (result.status >= 400 && result.status < 500) {\n                    return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n                }\n                // 5xx indicates server issue; try the next url\n                errorMessages.push(errorMessage);\n            }\n            return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n                urls, errorMessages\n            });\n        });\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    _getInternalBlockNumber(maxAge) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._ready();\n            // Allowing stale data up to maxAge old\n            if (maxAge > 0) {\n                // While there are pending internal block requests...\n                while (this._internalBlockNumber) {\n                    // ...\"remember\" which fetch we started with\n                    const internalBlockNumber = this._internalBlockNumber;\n                    try {\n                        // Check the result is not too stale\n                        const result = yield internalBlockNumber;\n                        if ((getTime() - result.respTime) <= maxAge) {\n                            return result.blockNumber;\n                        }\n                        // Too old; fetch a new value\n                        break;\n                    }\n                    catch (error) {\n                        // The fetch rejected; if we are the first to get the\n                        // rejection, drop through so we replace it with a new\n                        // fetch; all others blocked will then get that fetch\n                        // which won't match the one they \"remembered\" and loop\n                        if (this._internalBlockNumber === internalBlockNumber) {\n                            break;\n                        }\n                    }\n                }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = resolveProperties({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then((network) => (null), (error) => (error))\n            }).then(({ blockNumber, networkError }) => {\n                if (networkError) {\n                    // Unremember this bad internal block number\n                    if (this._internalBlockNumber === checkInternalBlockNumber) {\n                        this._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                }\n                const respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return { blockNumber, reqTime, respTime };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            // Swallow unhandled exceptions; if needed they are handled else where\n            checkInternalBlockNumber.catch((error) => {\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n            });\n            return (yield checkInternalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pollId = nextPollId++;\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            let blockNumber = null;\n            try {\n                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            }\n            catch (error) {\n                this.emit(\"error\", error);\n                return;\n            }\n            this._setFastBlockNumber(blockNumber);\n            // Emit a poll event after we have the latest (fast) block number\n            this.emit(\"poll\", pollId, blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                this.emit(\"didPoll\", pollId);\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs((this._emitted.block) - blockNumber) > 1000) {\n                logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n            }\n            else {\n                // Notify all listener for each block that has passed\n                for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                }\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key) => {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event) => {\n                switch (event.type) {\n                    case \"tx\": {\n                        const hash = event.hash;\n                        let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                            if (!receipt || receipt.blockNumber == null) {\n                                return null;\n                            }\n                            this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                            this.emit(hash, receipt);\n                            return null;\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                    case \"filter\": {\n                        // We only allow a single getLogs to be in-flight at a time\n                        if (!event._inflight) {\n                            event._inflight = true;\n                            // Filter from the last known event; due to load-balancing\n                            // and some nodes returning updated block numbers before\n                            // indexing events, a logs result with 0 entries cannot be\n                            // trusted and we must retry a range which includes it again\n                            const filter = event.filter;\n                            filter.fromBlock = event._lastBlockNumber + 1;\n                            filter.toBlock = blockNumber;\n                            // Prevent fitler ranges from growing too wild\n                            if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {\n                                filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;\n                            }\n                            const runner = this.getLogs(filter).then((logs) => {\n                                // Allow the next getLogs\n                                event._inflight = false;\n                                if (logs.length === 0) {\n                                    return;\n                                }\n                                logs.forEach((log) => {\n                                    // Only when we get an event for a given block number\n                                    // can we trust the events are indexed\n                                    if (log.blockNumber > event._lastBlockNumber) {\n                                        event._lastBlockNumber = log.blockNumber;\n                                    }\n                                    // Make sure we stall requests to fetch blocks and txs\n                                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                    this.emit(filter, log);\n                                });\n                            }).catch((error) => {\n                                this.emit(\"error\", error);\n                                // Allow another getLogs (the range was not updated)\n                                event._inflight = false;\n                            });\n                            runners.push(runner);\n                        }\n                        break;\n                    }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            // Once all events for this loop have been processed, emit \"didPoll\"\n            Promise.all(runners).then(() => {\n                this.emit(\"didPoll\", pollId);\n            }).catch((error) => { this.emit(\"error\", error); });\n            return;\n        });\n    }\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n            });\n        });\n    }\n    getNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const network = yield this._ready();\n            // Make sure we are still connected to the same network; this is\n            // only an external call for backends which can have the underlying\n            // network change spontaneously\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n                // We are allowing network changes, things can get complex fast;\n                // make sure you know what you are doing if you use \"any\"\n                if (this.anyNetwork) {\n                    this._network = currentNetwork;\n                    // Reset all internal block number guards and caches\n                    this._lastBlockNumber = -2;\n                    this._fastBlockNumber = null;\n                    this._fastBlockNumberPromise = null;\n                    this._fastQueryDate = 0;\n                    this._emitted.block = -2;\n                    this._maxInternalBlockNumber = -1024;\n                    this._internalBlockNumber = null;\n                    // The \"network\" event MUST happen before this method resolves\n                    // so any events have a chance to unregister, so we stall an\n                    // additional event loop before returning from /this/ call\n                    this.emit(\"network\", currentNetwork, network);\n                    yield stall(0);\n                    return this._network;\n                }\n                const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                    event: \"changed\",\n                    network: network,\n                    detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n            }\n            return network;\n        });\n    }\n    get blockNumber() {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;\n    }\n    get polling() {\n        return (this._poller != null);\n    }\n    set polling(value) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) {\n                            this.poll();\n                        }\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n        }\n        else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);\n        });\n    }\n    _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject) => {\n                const cancelFuncs = [];\n                let done = false;\n                const alreadyDone = function () {\n                    if (done) {\n                        return true;\n                    }\n                    done = true;\n                    cancelFuncs.forEach((func) => { func(); });\n                    return false;\n                };\n                const minedHandler = (receipt) => {\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (alreadyDone()) {\n                        return;\n                    }\n                    resolve(receipt);\n                };\n                this.on(transactionHash, minedHandler);\n                cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n                if (replaceable) {\n                    let lastBlockNumber = replaceable.startBlock;\n                    let scannedBlock = null;\n                    const replaceHandler = (blockNumber) => __awaiter(this, void 0, void 0, function* () {\n                        if (done) {\n                            return;\n                        }\n                        // Wait 1 second; this is only used in the case of a fault, so\n                        // we will trade off a little bit of latency for more consistent\n                        // results and fewer JSON-RPC calls\n                        yield stall(1000);\n                        this.getTransactionCount(replaceable.from).then((nonce) => __awaiter(this, void 0, void 0, function* () {\n                            if (done) {\n                                return;\n                            }\n                            if (nonce <= replaceable.nonce) {\n                                lastBlockNumber = blockNumber;\n                            }\n                            else {\n                                // First check if the transaction was mined\n                                {\n                                    const mined = yield this.getTransaction(transactionHash);\n                                    if (mined && mined.blockNumber != null) {\n                                        return;\n                                    }\n                                }\n                                // First time scanning. We start a little earlier for some\n                                // wiggle room here to handle the eventually consistent nature\n                                // of blockchain (e.g. the getTransactionCount was for a\n                                // different block)\n                                if (scannedBlock == null) {\n                                    scannedBlock = lastBlockNumber - 3;\n                                    if (scannedBlock < replaceable.startBlock) {\n                                        scannedBlock = replaceable.startBlock;\n                                    }\n                                }\n                                while (scannedBlock <= blockNumber) {\n                                    if (done) {\n                                        return;\n                                    }\n                                    const block = yield this.getBlockWithTransactions(scannedBlock);\n                                    for (let ti = 0; ti < block.transactions.length; ti++) {\n                                        const tx = block.transactions[ti];\n                                        // Successfully mined!\n                                        if (tx.hash === transactionHash) {\n                                            return;\n                                        }\n                                        // Matches our transaction from and nonce; its a replacement\n                                        if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                            if (done) {\n                                                return;\n                                            }\n                                            // Get the receipt of the replacement\n                                            const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                                            // Already resolved or rejected (prolly a timeout)\n                                            if (alreadyDone()) {\n                                                return;\n                                            }\n                                            // The reason we were replaced\n                                            let reason = \"replaced\";\n                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                                reason = \"repriced\";\n                                            }\n                                            else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                                reason = \"cancelled\";\n                                            }\n                                            // Explain why we were replaced\n                                            reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                                cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                                reason,\n                                                replacement: this._wrapTransaction(tx),\n                                                hash: transactionHash,\n                                                receipt\n                                            }));\n                                            return;\n                                        }\n                                    }\n                                    scannedBlock++;\n                                }\n                            }\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        }), (error) => {\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        });\n                    });\n                    if (done) {\n                        return;\n                    }\n                    this.once(\"block\", replaceHandler);\n                    cancelFuncs.push(() => {\n                        this.removeListener(\"block\", replaceHandler);\n                    });\n                }\n                if (typeof (timeout) === \"number\" && timeout > 0) {\n                    const timer = setTimeout(() => {\n                        if (alreadyDone()) {\n                            return;\n                        }\n                        reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                    cancelFuncs.push(() => { clearTimeout(timer); });\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._getInternalBlockNumber(0);\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const result = yield this.perform(\"getGasPrice\", {});\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getGasPrice\",\n                    result, error\n                });\n            }\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getBalance\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getBalance\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getTransactionCount\", params);\n            try {\n                return BigNumber.from(result).toNumber();\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getTransactionCount\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getCode\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getCode\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p) => hexValue(p))\n            });\n            const result = yield this.perform(\"getStorageAt\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getStorageAt\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash, startBlock) {\n        if (hash != null && hexDataLength(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n        result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n            if (confirms == null) {\n                confirms = 1;\n            }\n            if (timeout == null) {\n                timeout = 0;\n            }\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n            const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) {\n                return null;\n            }\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            if (tx.confirmations == null) {\n                tx.confirmations = 0;\n            }\n            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n                return this._wrapTransaction(tx, hash, blockNumber);\n            }\n            catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const values = yield transaction;\n            const tx = {};\n            [\"from\", \"to\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));\n            });\n            [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));\n            });\n            [\"type\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));\n            });\n            if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n            }\n            [\"data\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));\n            });\n            return this.formatter.transactionRequest(yield resolveProperties(tx));\n        });\n    }\n    _getFilter(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\"blockHash\", \"topics\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\"fromBlock\", \"toBlock\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter(yield resolveProperties(result));\n        });\n    }\n    _call(transaction, blockTag, attempt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (attempt >= MAX_CCIP_REDIRECTS) {\n                logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                    redirects: attempt, transaction\n                });\n            }\n            const txSender = transaction.to;\n            const result = yield this.perform(\"call\", { transaction, blockTag });\n            // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n            if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n                try {\n                    const data = hexDataSlice(result, 4);\n                    // Check the sender of the OffchainLookup matches the transaction\n                    const sender = hexDataSlice(data, 0, 32);\n                    if (!BigNumber.from(sender).eq(txSender)) {\n                        logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    // Read the URLs from the response\n                    const urls = [];\n                    const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                    const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                    const urlsData = hexDataSlice(data, urlsOffset + 32);\n                    for (let u = 0; u < urlsLength; u++) {\n                        const url = _parseString(urlsData, u * 32);\n                        if (url == null) {\n                            logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                                name: \"OffchainLookup\",\n                                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                                transaction, data: result\n                            });\n                        }\n                        urls.push(url);\n                    }\n                    // Get the CCIP calldata to forward\n                    const calldata = _parseBytes(data, 64);\n                    // Get the callbackSelector (bytes4)\n                    if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                        logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const callbackSelector = hexDataSlice(data, 96, 100);\n                    // Get the extra data to send back to the contract as context\n                    const extraData = _parseBytes(data, 128);\n                    const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n                    if (ccipResult == null) {\n                        logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const tx = {\n                        to: txSender,\n                        data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n                    };\n                    return this._call(tx, blockTag, attempt + 1);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.SERVER_ERROR) {\n                        throw error;\n                    }\n                }\n            }\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"call\",\n                    params: { transaction, blockTag }, result, error\n                });\n            }\n        });\n    }\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const resolved = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag),\n                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n            });\n            return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n        });\n    }\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            const result = yield this.perform(\"estimateGas\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"estimateGas\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    _getAddress(addressOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            addressOrName = yield addressOrName;\n            if (typeof (addressOrName) !== \"string\") {\n                logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n            }\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `resolveName(${JSON.stringify(addressOrName)})`\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if (isHexString(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            }\n            else {\n                try {\n                    params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n                    if (isHexString(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                }\n                catch (error) {\n                    logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const block = yield this.perform(\"getBlock\", params);\n                // Block was not found\n                if (block == null) {\n                    // For blockhashes, if we didn't say it existed, that blockhash may\n                    // not exist. If we did see it though, perhaps from a log, we know\n                    // it exists, and this node is just not caught up yet.\n                    if (params.blockHash != null) {\n                        if (this._emitted[\"b:\" + params.blockHash] == null) {\n                            return null;\n                        }\n                    }\n                    // For block tags, if we are asking for a future block, we return null\n                    if (params.blockTag != null) {\n                        if (blockNumber > this._emitted.block) {\n                            return null;\n                        }\n                    }\n                    // Retry on the next block\n                    return undefined;\n                }\n                // Add transactions\n                if (includeTransactions) {\n                    let blockNumber = null;\n                    for (let i = 0; i < block.transactions.length; i++) {\n                        const tx = block.transactions[i];\n                        if (tx.blockNumber == null) {\n                            tx.confirmations = 0;\n                        }\n                        else if (tx.confirmations == null) {\n                            if (blockNumber == null) {\n                                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                            }\n                            // Add the confirmations using the fast block number (pessimistic)\n                            let confirmations = (blockNumber - tx.blockNumber) + 1;\n                            if (confirmations <= 0) {\n                                confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                        }\n                    }\n                    const blockWithTxs = this.formatter.blockWithTransactions(block);\n                    blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));\n                    return blockWithTxs;\n                }\n                return this.formatter.block(block);\n            }), { oncePoll: this });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, false));\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, true));\n    }\n    getTransaction(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransaction\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                const tx = this.formatter.transactionResponse(result);\n                if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                }\n                else if (tx.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - tx.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    tx.confirmations = confirmations;\n                }\n                return this._wrapTransaction(tx);\n            }), { oncePoll: this });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransactionReceipt\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                // \"geth-etc\" returns receipts before they are ready\n                if (result.blockHash == null) {\n                    return undefined;\n                }\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                }\n                else if (receipt.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }), { oncePoll: this });\n        });\n    }\n    getLogs(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({ filter: this._getFilter(filter) });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log) => {\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            blockTag = yield blockTag;\n            if (typeof (blockTag) === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    getResolver(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let currentName = name;\n            while (true) {\n                if (currentName === \"\" || currentName === \".\") {\n                    return null;\n                }\n                // Optimization since the eth node cannot change and does\n                // not have a wildcar resolver\n                if (name !== \"eth\" && currentName === \"eth\") {\n                    return null;\n                }\n                // Check the current node for a resolver\n                const addr = yield this._getResolver(currentName, \"getResolver\");\n                // Found a resolver!\n                if (addr != null) {\n                    const resolver = new Resolver(this, addr, name);\n                    // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                    if (currentName !== name && !(yield resolver.supportsWildcard())) {\n                        return null;\n                    }\n                    return resolver;\n                }\n                // Get the parent node\n                currentName = currentName.split(\".\").slice(1).join(\".\");\n            }\n        });\n    }\n    _getResolver(name, operation) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (operation == null) {\n                operation = \"ENS\";\n            }\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });\n            }\n            try {\n                // keccak256(\"resolver(bytes32)\")\n                const addrData = yield this.call({\n                    to: network.ensAddress,\n                    data: (\"0x0178b8bf\" + namehash(name).substring(2))\n                });\n                return this.formatter.callAddress(addrData);\n            }\n            catch (error) {\n                // ENS registry cannot throw errors on resolver(bytes32)\n            }\n            return null;\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            name = yield name;\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            }\n            catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if (isHexString(name)) {\n                    throw error;\n                }\n            }\n            if (typeof (name) !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            // Get the addr from the resovler\n            const resolver = yield this.getResolver(name);\n            if (!resolver) {\n                return null;\n            }\n            return yield resolver.getAddress();\n        });\n    }\n    lookupAddress(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            address = yield address;\n            address = this.formatter.address(address);\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n            if (resolverAddr == null) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            const name = _parseString(yield this.call({\n                to: resolverAddr,\n                data: (\"0x691f3431\" + namehash(node).substring(2))\n            }), 0);\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    getAvatar(nameOrAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let resolver = null;\n            if (isHexString(nameOrAddress)) {\n                // Address; reverse lookup\n                const address = this.formatter.address(nameOrAddress);\n                const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n                if (!resolverAddress) {\n                    return null;\n                }\n                // Try resolving the avatar against the addr.reverse resolver\n                resolver = new Resolver(this, resolverAddress, node);\n                try {\n                    const avatar = yield resolver.getAvatar();\n                    if (avatar) {\n                        return avatar.url;\n                    }\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                }\n                // Try getting the name and performing forward lookup; allowing wildcards\n                try {\n                    // keccak(\"name(bytes32)\")\n                    const name = _parseString(yield this.call({\n                        to: resolverAddress,\n                        data: (\"0x691f3431\" + namehash(node).substring(2))\n                    }), 0);\n                    resolver = yield this.getResolver(name);\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                    return null;\n                }\n            }\n            else {\n                // ENS name; forward lookup with wildcard\n                resolver = yield this.getResolver(nameOrAddress);\n                if (!resolver) {\n                    return null;\n                }\n            }\n            const avatar = yield resolver.getAvatar();\n            if (avatar == null) {\n                return null;\n            }\n            return avatar.url;\n        });\n    }\n    perform(method, params) {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n    _startEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _stopEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName, ...args) {\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        }\n        else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n}\n//# sourceMappingURL=base-provider.js.map"]},"metadata":{},"sourceType":"module"}