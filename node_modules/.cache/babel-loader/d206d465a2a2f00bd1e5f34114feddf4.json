{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/solana-embed';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, WalletInitializationError, WalletLoginError } from '@web3auth/base';\nimport { TorusInjectedProvider } from '@web3auth/solana-provider';\nimport log from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar SolanaWalletAdapter = /*#__PURE__*/function (_BaseAdapter) {\n  _inherits(SolanaWalletAdapter, _BaseAdapter);\n\n  var _super = _createSuper(SolanaWalletAdapter);\n\n  function SolanaWalletAdapter() {\n    var _this;\n\n    _classCallCheck(this, SolanaWalletAdapter);\n\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"name\", WALLET_ADAPTERS.TORUS_SOLANA);\n\n    _defineProperty(_assertThisInitialized(_this), \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(_assertThisInitialized(_this), \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(_assertThisInitialized(_this), \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(_assertThisInitialized(_this), \"torusInstance\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"torusWalletOptions\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"initParams\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"loginSettings\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"solanaProvider\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"rehydrated\", false);\n\n    _this.torusWalletOptions = params.adapterSettings || {};\n    _this.initParams = params.initParams || {};\n    _this.loginSettings = params.loginSettings || {};\n    _this.chainConfig = params.chainConfig || null;\n    return _this;\n  }\n\n  _createClass(SolanaWalletAdapter, [{\n    key: \"provider\",\n    get: function get() {\n      if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n        var _this$solanaProvider;\n\n        return ((_this$solanaProvider = this.solanaProvider) === null || _this$solanaProvider === void 0 ? void 0 : _this$solanaProvider.provider) || null;\n      }\n\n      return null;\n    },\n    set: function set(_) {\n      throw new Error(\"Not implemented\");\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        var network, _this$chainConfig, blockExplorer, displayName, ticker, tickerName, rpcTarget, chainId, _this$chainConfig2, _chainId, _blockExplorer, _displayName, _rpcTarget, _ticker, _tickerName;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _get(_getPrototypeOf(SolanaWalletAdapter.prototype), \"checkInitializationRequirements\", this).call(this); // set chainConfig for mainnet by default if not set\n\n\n                if (!this.chainConfig) {\n                  this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n                  _this$chainConfig = this.chainConfig, blockExplorer = _this$chainConfig.blockExplorer, displayName = _this$chainConfig.displayName, ticker = _this$chainConfig.ticker, tickerName = _this$chainConfig.tickerName, rpcTarget = _this$chainConfig.rpcTarget, chainId = _this$chainConfig.chainId;\n                  network = {\n                    chainId: chainId,\n                    rpcTarget: rpcTarget,\n                    blockExplorerUrl: blockExplorer,\n                    displayName: displayName,\n                    ticker: ticker,\n                    tickerName: tickerName,\n                    logo: \"\"\n                  };\n                } else {\n                  _this$chainConfig2 = this.chainConfig, _chainId = _this$chainConfig2.chainId, _blockExplorer = _this$chainConfig2.blockExplorer, _displayName = _this$chainConfig2.displayName, _rpcTarget = _this$chainConfig2.rpcTarget, _ticker = _this$chainConfig2.ticker, _tickerName = _this$chainConfig2.tickerName;\n                  network = {\n                    chainId: _chainId,\n                    rpcTarget: _rpcTarget,\n                    blockExplorerUrl: _blockExplorer,\n                    displayName: _displayName,\n                    tickerName: _tickerName,\n                    ticker: _ticker,\n                    logo: \"\"\n                  };\n                }\n\n                this.torusInstance = new Torus(this.torusWalletOptions);\n                _context.next = 5;\n                return this.torusInstance.init(_objectSpread(_objectSpread({\n                  showTorusButton: false\n                }, this.initParams), {}, {\n                  network: network\n                }));\n\n              case 5:\n                this.solanaProvider = new TorusInjectedProvider({\n                  config: {\n                    chainConfig: this.chainConfig\n                  }\n                });\n                this.status = ADAPTER_STATUS.READY;\n                this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n                _context.prev = 8;\n\n                if (!options.autoConnect) {\n                  _context.next = 13;\n                  break;\n                }\n\n                this.rehydrated = true;\n                _context.next = 13;\n                return this.connect();\n\n              case 13:\n                _context.next = 19;\n                break;\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](8);\n                log.error(\"Failed to connect with cached torus solana provider\", _context.t0);\n                this.emit(ADAPTER_EVENTS.ERRORED, _context.t0);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[8, 15]]);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _get(_getPrototypeOf(SolanaWalletAdapter.prototype), \"checkConnectionRequirements\", this).call(this);\n\n                if (this.torusInstance) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n\n              case 3:\n                if (this.solanaProvider) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n\n              case 5:\n                this.status = ADAPTER_STATUS.CONNECTING;\n                this.emit(ADAPTER_EVENTS.CONNECTING, {\n                  adapter: WALLET_ADAPTERS.TORUS_SOLANA\n                });\n                _context2.prev = 7;\n                _context2.next = 10;\n                return this.torusInstance.login(this.loginSettings);\n\n              case 10:\n                _context2.next = 12;\n                return this.solanaProvider.setupProvider(this.torusInstance.provider);\n\n              case 12:\n                this.status = ADAPTER_STATUS.CONNECTED;\n                this.torusInstance.showTorusButton();\n                this.emit(ADAPTER_STATUS.CONNECTED, {\n                  adapter: WALLET_ADAPTERS.TORUS_SOLANA,\n                  reconnected: this.rehydrated\n                });\n                return _context2.abrupt(\"return\", this.provider);\n\n              case 18:\n                _context2.prev = 18;\n                _context2.t0 = _context2[\"catch\"](7);\n                // ready again to be connected\n                this.status = ADAPTER_STATUS.READY;\n                this.rehydrated = false;\n                this.emit(ADAPTER_EVENTS.ERRORED, _context2.t0);\n                throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n\n              case 24:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[7, 18]]);\n      }));\n\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var options,\n            _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {\n                  cleanup: false\n                };\n\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n              case 3:\n                if (this.torusInstance) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n\n              case 5:\n                _context3.next = 7;\n                return this.torusInstance.logout();\n\n              case 7:\n                if (options.cleanup) {\n                  // ready to connect again\n                  this.status = ADAPTER_STATUS.NOT_READY;\n                  this.torusInstance = null;\n                  this.solanaProvider = null;\n                } else {\n                  // ready to connect again\n                  this.status = ADAPTER_STATUS.READY;\n                }\n\n                this.emit(ADAPTER_EVENTS.DISCONNECTED);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function disconnect() {\n        return _disconnect.apply(this, arguments);\n      }\n\n      return disconnect;\n    }()\n  }, {\n    key: \"getUserInfo\",\n    value: function () {\n      var _getUserInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var userInfo;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n              case 2:\n                if (this.torusInstance) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n\n              case 4:\n                _context4.next = 6;\n                return this.torusInstance.getUserInfo();\n\n              case 6:\n                userInfo = _context4.sent;\n                return _context4.abrupt(\"return\", userInfo);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getUserInfo() {\n        return _getUserInfo.apply(this, arguments);\n      }\n\n      return getUserInfo;\n    }()\n  }, {\n    key: \"setAdapterSettings\",\n    value: function setAdapterSettings(_) {}\n  }]);\n\n  return SolanaWalletAdapter;\n}(BaseAdapter);\n\nexport { SolanaWalletAdapter };","map":{"version":3,"sources":["../src/solanaWalletAdapter.ts"],"names":["SolanaWalletAdapter","BaseAdapter","WALLET_ADAPTERS","TORUS_SOLANA","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","constructor","params","provider","init","getChainConfig","chainId","network","rpcTarget","blockExplorerUrl","displayName","ticker","tickerName","logo","showTorusButton","config","chainConfig","ADAPTER_EVENTS","options","log","connect","WalletInitializationError","adapter","reconnected","rehydrated","WalletLoginError","disconnect","cleanup","getUserInfo","userInfo","setAdapterSettings"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/solana-embed';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, WalletInitializationError, WalletLoginError } from '@web3auth/base';\nimport { TorusInjectedProvider } from '@web3auth/solana-provider';\nimport log from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass SolanaWalletAdapter extends BaseAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_SOLANA);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"solanaProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      var _this$solanaProvider;\n\n      return ((_this$solanaProvider = this.solanaProvider) === null || _this$solanaProvider === void 0 ? void 0 : _this$solanaProvider.provider) || null;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    let network;\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const {\n        blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        rpcTarget,\n        chainId\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        logo: \"\"\n      };\n    } else {\n      const {\n        chainId,\n        blockExplorer,\n        displayName,\n        rpcTarget,\n        ticker,\n        tickerName\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        tickerName,\n        ticker,\n        logo: \"\"\n      };\n    }\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_SOLANA\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      await this.solanaProvider.setupProvider(this.torusInstance.provider);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_SOLANA,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(_) {}\n\n}\n\nexport { SolanaWalletAdapter };\n//# sourceMappingURL=torusSolanaAdapter.esm.js.map\n"]},"metadata":{},"sourceType":"module"}