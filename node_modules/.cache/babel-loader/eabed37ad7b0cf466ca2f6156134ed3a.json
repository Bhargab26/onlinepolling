{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _toConsumableArray = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar BaseFilter = require('./base-filter');\n\nvar getBlocksForRange = require('./getBlocksForRange');\n\nvar _require = require('./hexUtils'),\n    incrementHexInt = _require.incrementHexInt;\n\nvar TxFilter = /*#__PURE__*/function (_BaseFilter) {\n  \"use strict\";\n\n  _inherits(TxFilter, _BaseFilter);\n\n  var _super = _createSuper(TxFilter);\n\n  function TxFilter(_ref) {\n    var _this;\n\n    var provider = _ref.provider;\n\n    _classCallCheck(this, TxFilter);\n\n    _this = _super.call(this);\n    _this.type = 'tx';\n    _this.provider = provider;\n    return _this;\n  }\n\n  _createClass(TxFilter, [{\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref2) {\n        var oldBlock, toBlock, fromBlock, blocks, blockTxHashes, _iterator, _step, block;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                oldBlock = _ref2.oldBlock;\n                toBlock = oldBlock;\n                fromBlock = incrementHexInt(oldBlock);\n                _context.next = 5;\n                return getBlocksForRange({\n                  provider: this.provider,\n                  fromBlock: fromBlock,\n                  toBlock: toBlock\n                });\n\n              case 5:\n                blocks = _context.sent;\n                blockTxHashes = [];\n                _iterator = _createForOfIteratorHelper(blocks);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    block = _step.value;\n                    blockTxHashes.push.apply(blockTxHashes, _toConsumableArray(block.transactions));\n                  } // add to results\n\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                this.addResults(blockTxHashes);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function update(_x) {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  }]);\n\n  return TxFilter;\n}(BaseFilter);\n\nmodule.exports = TxFilter;","map":{"version":3,"names":["BaseFilter","require","getBlocksForRange","incrementHexInt","TxFilter","provider","type","oldBlock","toBlock","fromBlock","blocks","blockTxHashes","block","push","transactions","addResults","module","exports"],"sources":["C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/eth-json-rpc-filters/tx-filter.js"],"sourcesContent":["const BaseFilter = require('./base-filter')\nconst getBlocksForRange = require('./getBlocksForRange')\nconst { incrementHexInt } = require('./hexUtils')\n\nclass TxFilter extends BaseFilter {\n\n  constructor ({ provider }) {\n    super()\n    this.type = 'tx'\n    this.provider = provider\n  }\n\n  async update ({ oldBlock }) {\n    const toBlock = oldBlock\n    const fromBlock = incrementHexInt(oldBlock)\n    const blocks = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock })\n    const blockTxHashes = []\n    for (const block of blocks) {\n      blockTxHashes.push(...block.transactions)\n    }\n    // add to results\n    this.addResults(blockTxHashes)\n  }\n\n}\n\nmodule.exports = TxFilter\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,qBAAD,CAAjC;;AACA,eAA4BA,OAAO,CAAC,YAAD,CAAnC;AAAA,IAAQE,eAAR,YAAQA,eAAR;;IAEMC,Q;;;;;;;EAEJ,wBAA2B;IAAA;;IAAA,IAAZC,QAAY,QAAZA,QAAY;;IAAA;;IACzB;IACA,MAAKC,IAAL,GAAY,IAAZ;IACA,MAAKD,QAAL,GAAgBA,QAAhB;IAHyB;EAI1B;;;;;+EAED;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAgBE,QAAhB,SAAgBA,QAAhB;gBACQC,OADR,GACkBD,QADlB;gBAEQE,SAFR,GAEoBN,eAAe,CAACI,QAAD,CAFnC;gBAAA;gBAAA,OAGuBL,iBAAiB,CAAC;kBAAEG,QAAQ,EAAE,KAAKA,QAAjB;kBAA2BI,SAAS,EAATA,SAA3B;kBAAsCD,OAAO,EAAPA;gBAAtC,CAAD,CAHxC;;cAAA;gBAGQE,MAHR;gBAIQC,aAJR,GAIwB,EAJxB;gBAAA,uCAKsBD,MALtB;;gBAAA;kBAKE,oDAA4B;oBAAjBE,KAAiB;oBAC1BD,aAAa,CAACE,IAAd,OAAAF,aAAa,qBAASC,KAAK,CAACE,YAAf,EAAb;kBACD,CAPH,CAQE;;gBARF;kBAAA;gBAAA;kBAAA;gBAAA;;gBASE,KAAKC,UAAL,CAAgBJ,aAAhB;;cATF;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;EARqBX,U;;AAsBvBgB,MAAM,CAACC,OAAP,GAAiBb,QAAjB"},"metadata":{},"sourceType":"script"}