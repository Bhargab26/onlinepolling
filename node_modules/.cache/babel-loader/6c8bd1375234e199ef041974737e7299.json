{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport var Formatter = /*#__PURE__*/function () {\n  function Formatter() {\n    _classCallCheck(this, Formatter);\n\n    logger.checkNew(this instanceof Formatter ? this.constructor : void 0, Formatter);\n    this.formats = this.getDefaultFormats();\n  }\n\n  _createClass(Formatter, [{\n    key: \"getDefaultFormats\",\n    value: function getDefaultFormats() {\n      var _this = this;\n\n      var formats = {};\n      var address = this.address.bind(this);\n      var bigNumber = this.bigNumber.bind(this);\n      var blockTag = this.blockTag.bind(this);\n      var data = this.data.bind(this);\n      var hash = this.hash.bind(this);\n      var hex = this.hex.bind(this);\n      var number = this.number.bind(this);\n      var type = this.type.bind(this);\n\n      var strictData = function strictData(v) {\n        return _this.data(v, true);\n      };\n\n      formats.transaction = {\n        hash: hash,\n        type: type,\n        accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        blockHash: Formatter.allowNull(hash, null),\n        blockNumber: Formatter.allowNull(number, null),\n        transactionIndex: Formatter.allowNull(number, null),\n        confirmations: Formatter.allowNull(number, null),\n        from: address,\n        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n        // must be set\n        gasPrice: Formatter.allowNull(bigNumber),\n        maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n        maxFeePerGas: Formatter.allowNull(bigNumber),\n        gasLimit: bigNumber,\n        to: Formatter.allowNull(address, null),\n        value: bigNumber,\n        nonce: number,\n        data: data,\n        r: Formatter.allowNull(this.uint256),\n        s: Formatter.allowNull(this.uint256),\n        v: Formatter.allowNull(number),\n        creates: Formatter.allowNull(address, null),\n        raw: Formatter.allowNull(data)\n      };\n      formats.transactionRequest = {\n        from: Formatter.allowNull(address),\n        nonce: Formatter.allowNull(number),\n        gasLimit: Formatter.allowNull(bigNumber),\n        gasPrice: Formatter.allowNull(bigNumber),\n        maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n        maxFeePerGas: Formatter.allowNull(bigNumber),\n        to: Formatter.allowNull(address),\n        value: Formatter.allowNull(bigNumber),\n        data: Formatter.allowNull(strictData),\n        type: Formatter.allowNull(number),\n        accessList: Formatter.allowNull(this.accessList.bind(this), null)\n      };\n      formats.receiptLog = {\n        transactionIndex: number,\n        blockNumber: number,\n        transactionHash: hash,\n        address: address,\n        topics: Formatter.arrayOf(hash),\n        data: data,\n        logIndex: number,\n        blockHash: hash\n      };\n      formats.receipt = {\n        to: Formatter.allowNull(this.address, null),\n        from: Formatter.allowNull(this.address, null),\n        contractAddress: Formatter.allowNull(address, null),\n        transactionIndex: number,\n        // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n        root: Formatter.allowNull(hex),\n        gasUsed: bigNumber,\n        logsBloom: Formatter.allowNull(data),\n        blockHash: hash,\n        transactionHash: hash,\n        logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n        blockNumber: number,\n        confirmations: Formatter.allowNull(number, null),\n        cumulativeGasUsed: bigNumber,\n        effectiveGasPrice: Formatter.allowNull(bigNumber),\n        status: Formatter.allowNull(number),\n        type: type\n      };\n      formats.block = {\n        hash: Formatter.allowNull(hash),\n        parentHash: hash,\n        number: number,\n        timestamp: number,\n        nonce: Formatter.allowNull(hex),\n        difficulty: this.difficulty.bind(this),\n        gasLimit: bigNumber,\n        gasUsed: bigNumber,\n        miner: Formatter.allowNull(address),\n        extraData: data,\n        transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n        baseFeePerGas: Formatter.allowNull(bigNumber)\n      };\n      formats.blockWithTransactions = shallowCopy(formats.block);\n      formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n      formats.filter = {\n        fromBlock: Formatter.allowNull(blockTag, undefined),\n        toBlock: Formatter.allowNull(blockTag, undefined),\n        blockHash: Formatter.allowNull(hash, undefined),\n        address: Formatter.allowNull(address, undefined),\n        topics: Formatter.allowNull(this.topics.bind(this), undefined)\n      };\n      formats.filterLog = {\n        blockNumber: Formatter.allowNull(number),\n        blockHash: Formatter.allowNull(hash),\n        transactionIndex: number,\n        removed: Formatter.allowNull(this.boolean.bind(this)),\n        address: address,\n        data: Formatter.allowFalsish(data, \"0x\"),\n        topics: Formatter.arrayOf(hash),\n        transactionHash: hash,\n        logIndex: number\n      };\n      return formats;\n    }\n  }, {\n    key: \"accessList\",\n    value: function accessList(_accessList) {\n      return accessListify(_accessList || []);\n    } // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n\n  }, {\n    key: \"number\",\n    value: function number(_number) {\n      if (_number === \"0x\") {\n        return 0;\n      }\n\n      return BigNumber.from(_number).toNumber();\n    }\n  }, {\n    key: \"type\",\n    value: function type(number) {\n      if (number === \"0x\" || number == null) {\n        return 0;\n      }\n\n      return BigNumber.from(number).toNumber();\n    } // Strict! Used on input.\n\n  }, {\n    key: \"bigNumber\",\n    value: function bigNumber(value) {\n      return BigNumber.from(value);\n    } // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n\n  }, {\n    key: \"boolean\",\n    value: function boolean(value) {\n      if (typeof value === \"boolean\") {\n        return value;\n      }\n\n      if (typeof value === \"string\") {\n        value = value.toLowerCase();\n\n        if (value === \"true\") {\n          return true;\n        }\n\n        if (value === \"false\") {\n          return false;\n        }\n      }\n\n      throw new Error(\"invalid boolean - \" + value);\n    }\n  }, {\n    key: \"hex\",\n    value: function hex(value, strict) {\n      if (typeof value === \"string\") {\n        if (!strict && value.substring(0, 2) !== \"0x\") {\n          value = \"0x\" + value;\n        }\n\n        if (isHexString(value)) {\n          return value.toLowerCase();\n        }\n      }\n\n      return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n  }, {\n    key: \"data\",\n    value: function data(value, strict) {\n      var result = this.hex(value, strict);\n\n      if (result.length % 2 !== 0) {\n        throw new Error(\"invalid data; odd-length - \" + value);\n      }\n\n      return result;\n    } // Requires an address\n    // Strict! Used on input.\n\n  }, {\n    key: \"address\",\n    value: function address(value) {\n      return getAddress(value);\n    }\n  }, {\n    key: \"callAddress\",\n    value: function callAddress(value) {\n      if (!isHexString(value, 32)) {\n        return null;\n      }\n\n      var address = getAddress(hexDataSlice(value, 12));\n      return address === AddressZero ? null : address;\n    }\n  }, {\n    key: \"contractAddress\",\n    value: function contractAddress(value) {\n      return getContractAddress(value);\n    } // Strict! Used on input.\n\n  }, {\n    key: \"blockTag\",\n    value: function blockTag(_blockTag) {\n      if (_blockTag == null) {\n        return \"latest\";\n      }\n\n      if (_blockTag === \"earliest\") {\n        return \"0x0\";\n      }\n\n      if (_blockTag === \"latest\" || _blockTag === \"pending\") {\n        return _blockTag;\n      }\n\n      if (typeof _blockTag === \"number\" || isHexString(_blockTag)) {\n        return hexValue(_blockTag);\n      }\n\n      throw new Error(\"invalid blockTag\");\n    } // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n\n  }, {\n    key: \"hash\",\n    value: function hash(value, strict) {\n      var result = this.hex(value, strict);\n\n      if (hexDataLength(result) !== 32) {\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n      }\n\n      return result;\n    } // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n\n  }, {\n    key: \"difficulty\",\n    value: function difficulty(value) {\n      if (value == null) {\n        return null;\n      }\n\n      var v = BigNumber.from(value);\n\n      try {\n        return v.toNumber();\n      } catch (error) {}\n\n      return null;\n    }\n  }, {\n    key: \"uint256\",\n    value: function uint256(value) {\n      if (!isHexString(value)) {\n        throw new Error(\"invalid uint256\");\n      }\n\n      return hexZeroPad(value, 32);\n    }\n  }, {\n    key: \"_block\",\n    value: function _block(value, format) {\n      if (value.author != null && value.miner == null) {\n        value.miner = value.author;\n      } // The difficulty may need to come from _difficulty in recursed blocks\n\n\n      var difficulty = value._difficulty != null ? value._difficulty : value.difficulty;\n      var result = Formatter.check(format, value);\n      result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);\n      return result;\n    }\n  }, {\n    key: \"block\",\n    value: function block(value) {\n      return this._block(value, this.formats.block);\n    }\n  }, {\n    key: \"blockWithTransactions\",\n    value: function blockWithTransactions(value) {\n      return this._block(value, this.formats.blockWithTransactions);\n    } // Strict! Used on input.\n\n  }, {\n    key: \"transactionRequest\",\n    value: function transactionRequest(value) {\n      return Formatter.check(this.formats.transactionRequest, value);\n    }\n  }, {\n    key: \"transactionResponse\",\n    value: function transactionResponse(transaction) {\n      // Rename gas to gasLimit\n      if (transaction.gas != null && transaction.gasLimit == null) {\n        transaction.gasLimit = transaction.gas;\n      } // Some clients (TestRPC) do strange things like return 0x0 for the\n      // 0 address; correct this to be a real address\n\n\n      if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n        transaction.to = \"0x0000000000000000000000000000000000000000\";\n      } // Rename input to data\n\n\n      if (transaction.input != null && transaction.data == null) {\n        transaction.data = transaction.input;\n      } // If to and creates are empty, populate the creates from the transaction\n\n\n      if (transaction.to == null && transaction.creates == null) {\n        transaction.creates = this.contractAddress(transaction);\n      }\n\n      if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n        transaction.accessList = [];\n      }\n\n      var result = Formatter.check(this.formats.transaction, transaction);\n\n      if (transaction.chainId != null) {\n        var chainId = transaction.chainId;\n\n        if (isHexString(chainId)) {\n          chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        result.chainId = chainId;\n      } else {\n        var _chainId = transaction.networkId; // geth-etc returns chainId\n\n        if (_chainId == null && result.v == null) {\n          _chainId = transaction.chainId;\n        }\n\n        if (isHexString(_chainId)) {\n          _chainId = BigNumber.from(_chainId).toNumber();\n        }\n\n        if (typeof _chainId !== \"number\" && result.v != null) {\n          _chainId = (result.v - 35) / 2;\n\n          if (_chainId < 0) {\n            _chainId = 0;\n          }\n\n          _chainId = parseInt(_chainId);\n        }\n\n        if (typeof _chainId !== \"number\") {\n          _chainId = 0;\n        }\n\n        result.chainId = _chainId;\n      } // 0x0000... should actually be null\n\n\n      if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n        result.blockHash = null;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"transaction\",\n    value: function transaction(value) {\n      return parseTransaction(value);\n    }\n  }, {\n    key: \"receiptLog\",\n    value: function receiptLog(value) {\n      return Formatter.check(this.formats.receiptLog, value);\n    }\n  }, {\n    key: \"receipt\",\n    value: function receipt(value) {\n      var result = Formatter.check(this.formats.receipt, value); // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n\n      if (result.root != null) {\n        if (result.root.length <= 4) {\n          // Could be 0x00, 0x0, 0x01 or 0x1\n          var _value = BigNumber.from(result.root).toNumber();\n\n          if (_value === 0 || _value === 1) {\n            // Make sure if both are specified, they match\n            if (result.status != null && result.status !== _value) {\n              logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", {\n                root: result.root,\n                status: result.status\n              });\n            }\n\n            result.status = _value;\n            delete result.root;\n          } else {\n            logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n          }\n        } else if (result.root.length !== 66) {\n          // Must be a valid bytes32\n          logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n        }\n      }\n\n      if (result.status != null) {\n        result.byzantium = true;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"topics\",\n    value: function topics(value) {\n      var _this2 = this;\n\n      if (Array.isArray(value)) {\n        return value.map(function (v) {\n          return _this2.topics(v);\n        });\n      } else if (value != null) {\n        return this.hash(value, true);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(value) {\n      return Formatter.check(this.formats.filter, value);\n    }\n  }, {\n    key: \"filterLog\",\n    value: function filterLog(value) {\n      return Formatter.check(this.formats.filterLog, value);\n    }\n  }], [{\n    key: \"check\",\n    value: function check(format, object) {\n      var result = {};\n\n      for (var key in format) {\n        try {\n          var value = format[key](object[key]);\n\n          if (value !== undefined) {\n            result[key] = value;\n          }\n        } catch (error) {\n          error.checkKey = key;\n          error.checkValue = object[key];\n          throw error;\n        }\n      }\n\n      return result;\n    } // if value is null-ish, nullValue is returned\n\n  }, {\n    key: \"allowNull\",\n    value: function allowNull(format, nullValue) {\n      return function (value) {\n        if (value == null) {\n          return nullValue;\n        }\n\n        return format(value);\n      };\n    } // If value is false-ish, replaceValue is returned\n\n  }, {\n    key: \"allowFalsish\",\n    value: function allowFalsish(format, replaceValue) {\n      return function (value) {\n        if (!value) {\n          return replaceValue;\n        }\n\n        return format(value);\n      };\n    } // Requires an Array satisfying check\n\n  }, {\n    key: \"arrayOf\",\n    value: function arrayOf(format) {\n      return function (array) {\n        if (!Array.isArray(array)) {\n          throw new Error(\"not an array\");\n        }\n\n        var result = [];\n        array.forEach(function (value) {\n          result.push(format(value));\n        });\n        return result;\n      };\n    }\n  }]);\n\n  return Formatter;\n}();\nexport function isCommunityResourcable(value) {\n  return value && typeof value.isCommunityResource === \"function\";\n}\nexport function isCommunityResource(value) {\n  return isCommunityResourcable(value) && value.isCommunityResource();\n} // Show the throttle message only once\n\nvar throttleMessage = false;\nexport function showThrottleMessage() {\n  if (throttleMessage) {\n    return;\n  }\n\n  throttleMessage = true;\n  console.log(\"========= NOTICE =========\");\n  console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n  console.log(\"\");\n  console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n  console.log(\"community resource for low-traffic projects and early prototyping.\");\n  console.log(\"\");\n  console.log(\"While your application will continue to function, we highly recommended\");\n  console.log(\"signing up for your own API keys to improve performance, increase your\");\n  console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n  console.log(\"\");\n  console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n  console.log(\"==========================\");\n}","map":{"version":3,"sources":["../src.ts/formatter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n    constructor() {\n        logger.checkNew(new.target, Formatter);\n        this.formats = this.getDefaultFormats();\n    }\n    getDefaultFormats() {\n        const formats = ({});\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n        const strictData = (v) => { return this.data(v, true); };\n        formats.transaction = {\n            hash: hash,\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n            confirmations: Formatter.allowNull(number, null),\n            from: address,\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n            creates: Formatter.allowNull(address, null),\n            raw: Formatter.allowNull(data),\n        };\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: Formatter.allowNull(address),\n            extraData: data,\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n            topics: Formatter.arrayOf(hash),\n            transactionHash: hash,\n            logIndex: number,\n        };\n        return formats;\n    }\n    accessList(accessList) {\n        return accessListify(accessList || []);\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number) {\n        if (number === \"0x\") {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    type(number) {\n        if (number === \"0x\" || number == null) {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    // Strict! Used on input.\n    bigNumber(value) {\n        return BigNumber.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value) {\n        if (typeof (value) === \"boolean\") {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n                return true;\n            }\n            if (value === \"false\") {\n                return false;\n            }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n    hex(value, strict) {\n        if (typeof (value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n                value = \"0x\" + value;\n            }\n            if (isHexString(value)) {\n                return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    data(value, strict) {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n    address(value) {\n        return getAddress(value);\n    }\n    callAddress(value) {\n        if (!isHexString(value, 32)) {\n            return null;\n        }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null : address;\n    }\n    contractAddress(value) {\n        return getContractAddress(value);\n    }\n    // Strict! Used on input.\n    blockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        if (blockTag === \"earliest\") {\n            return \"0x0\";\n        }\n        if (blockTag === \"latest\" || blockTag === \"pending\") {\n            return blockTag;\n        }\n        if (typeof (blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(blockTag);\n        }\n        throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value, strict) {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value) {\n        if (value == null) {\n            return null;\n        }\n        const v = BigNumber.from(value);\n        try {\n            return v.toNumber();\n        }\n        catch (error) { }\n        return null;\n    }\n    uint256(value) {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n    _block(value, format) {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null : BigNumber.from(difficulty));\n        return result;\n    }\n    block(value) {\n        return this._block(value, this.formats.block);\n    }\n    blockWithTransactions(value) {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n    transactionRequest(value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n    transactionResponse(transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n            transaction.accessList = [];\n        }\n        const result = Formatter.check(this.formats.transaction, transaction);\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n        }\n        else {\n            let chainId = transaction.networkId;\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            if (typeof (chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) {\n                    chainId = 0;\n                }\n                chainId = parseInt(chainId);\n            }\n            if (typeof (chainId) !== \"number\") {\n                chainId = 0;\n            }\n            result.chainId = chainId;\n        }\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n        return result;\n    }\n    transaction(value) {\n        return parseTransaction(value);\n    }\n    receiptLog(value) {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n    receipt(value) {\n        const result = Formatter.check(this.formats.receipt, value);\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                }\n                else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            }\n            else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n        return result;\n    }\n    topics(value) {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n        }\n        else if (value != null) {\n            return this.hash(value, true);\n        }\n        return null;\n    }\n    filter(value) {\n        return Formatter.check(this.formats.filter, value);\n    }\n    filterLog(value) {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n    static check(format, object) {\n        const result = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) {\n                    result[key] = value;\n                }\n            }\n            catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n    // if value is null-ish, nullValue is returned\n    static allowNull(format, nullValue) {\n        return (function (value) {\n            if (value == null) {\n                return nullValue;\n            }\n            return format(value);\n        });\n    }\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format, replaceValue) {\n        return (function (value) {\n            if (!value) {\n                return replaceValue;\n            }\n            return format(value);\n        });\n    }\n    // Requires an Array satisfying check\n    static arrayOf(format) {\n        return (function (array) {\n            if (!Array.isArray(array)) {\n                throw new Error(\"not an array\");\n            }\n            const result = [];\n            array.forEach(function (value) {\n                result.push(format(value));\n            });\n            return result;\n        });\n    }\n}\nexport function isCommunityResourcable(value) {\n    return (value && typeof (value.isCommunityResource) === \"function\");\n}\nexport function isCommunityResource(value) {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) {\n        return;\n    }\n    throttleMessage = true;\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n//# sourceMappingURL=formatter.js.map"]},"metadata":{},"sourceType":"module"}