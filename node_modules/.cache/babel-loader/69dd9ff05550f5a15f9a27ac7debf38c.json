{"ast":null,"code":"import _classCallCheck from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Bhargab kalita/Downloads/DAO/DAO/PROJECTDAO/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\"; // Experimental\n\nexport var JsonRpcBatchProvider = /*#__PURE__*/function (_JsonRpcProvider) {\n  _inherits(JsonRpcBatchProvider, _JsonRpcProvider);\n\n  var _super = _createSuper(JsonRpcBatchProvider);\n\n  function JsonRpcBatchProvider() {\n    _classCallCheck(this, JsonRpcBatchProvider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(JsonRpcBatchProvider, [{\n    key: \"send\",\n    value: function send(method, params) {\n      var _this = this;\n\n      var request = {\n        method: method,\n        params: params,\n        id: this._nextId++,\n        jsonrpc: \"2.0\"\n      };\n\n      if (this._pendingBatch == null) {\n        this._pendingBatch = [];\n      }\n\n      var inflightRequest = {\n        request: request,\n        resolve: null,\n        reject: null\n      };\n      var promise = new Promise(function (resolve, reject) {\n        inflightRequest.resolve = resolve;\n        inflightRequest.reject = reject;\n      });\n\n      this._pendingBatch.push(inflightRequest);\n\n      if (!this._pendingBatchAggregator) {\n        // Schedule batch for next event loop + short duration\n        this._pendingBatchAggregator = setTimeout(function () {\n          // Get teh current batch and clear it, so new requests\n          // go into the next batch\n          var batch = _this._pendingBatch;\n          _this._pendingBatch = null;\n          _this._pendingBatchAggregator = null; // Get the request as an array of requests\n\n          var request = batch.map(function (inflight) {\n            return inflight.request;\n          });\n\n          _this.emit(\"debug\", {\n            action: \"requestBatch\",\n            request: deepCopy(request),\n            provider: _this\n          });\n\n          return fetchJson(_this.connection, JSON.stringify(request)).then(function (result) {\n            _this.emit(\"debug\", {\n              action: \"response\",\n              request: request,\n              response: result,\n              provider: _this\n            }); // For each result, feed it to the correct Promise, depending\n            // on whether it was a success or error\n\n\n            batch.forEach(function (inflightRequest, index) {\n              var payload = result[index];\n\n              if (payload.error) {\n                var error = new Error(payload.error.message);\n                error.code = payload.error.code;\n                error.data = payload.error.data;\n                inflightRequest.reject(error);\n              } else {\n                inflightRequest.resolve(payload.result);\n              }\n            });\n          }, function (error) {\n            _this.emit(\"debug\", {\n              action: \"response\",\n              error: error,\n              request: request,\n              provider: _this\n            });\n\n            batch.forEach(function (inflightRequest) {\n              inflightRequest.reject(error);\n            });\n          });\n        }, 10);\n      }\n\n      return promise;\n    }\n  }]);\n\n  return JsonRpcBatchProvider;\n}(JsonRpcProvider);","map":{"version":3,"sources":["../src.ts/json-rpc-batch-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n// Experimental\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [];\n        }\n        const inflightRequest = { request, resolve: null, reject: null };\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n        this._pendingBatch.push(inflightRequest);\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            error.code = payload.error.code;\n                            error.data = payload.error.data;\n                            inflightRequest.reject(error);\n                        }\n                        else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n            }, 10);\n        }\n        return promise;\n    }\n}\n//# sourceMappingURL=json-rpc-batch-provider.js.map"]},"metadata":{},"sourceType":"module"}